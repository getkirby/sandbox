var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};
(function() {
  var _parseMarkdown, parseMarkdown_fn, _onError, onError_fn;
  "use strict";
  var _self = "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {}, Prism$1 = function(e) {
    var n = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i, t = 0, r = {}, a = { manual: e.Prism && e.Prism.manual, disableWorkerMessageHandler: e.Prism && e.Prism.disableWorkerMessageHandler, util: { encode: function e2(n2) {
      return n2 instanceof i ? new i(n2.type, e2(n2.content), n2.alias) : Array.isArray(n2) ? n2.map(e2) : n2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
    }, type: function(e2) {
      return Object.prototype.toString.call(e2).slice(8, -1);
    }, objId: function(e2) {
      return e2.__id || Object.defineProperty(e2, "__id", { value: ++t }), e2.__id;
    }, clone: function e2(n2, t2) {
      var r2, i2;
      switch (t2 = t2 || {}, a.util.type(n2)) {
        case "Object":
          if (i2 = a.util.objId(n2), t2[i2])
            return t2[i2];
          for (var l2 in r2 = {}, t2[i2] = r2, n2)
            n2.hasOwnProperty(l2) && (r2[l2] = e2(n2[l2], t2));
          return r2;
        case "Array":
          return i2 = a.util.objId(n2), t2[i2] ? t2[i2] : (r2 = [], t2[i2] = r2, n2.forEach(function(n3, a2) {
            r2[a2] = e2(n3, t2);
          }), r2);
        default:
          return n2;
      }
    }, getLanguage: function(e2) {
      for (; e2; ) {
        var t2 = n.exec(e2.className);
        if (t2)
          return t2[1].toLowerCase();
        e2 = e2.parentElement;
      }
      return "none";
    }, setLanguage: function(e2, t2) {
      e2.className = e2.className.replace(RegExp(n, "gi"), ""), e2.classList.add("language-" + t2);
    }, currentScript: function() {
      if ("undefined" == typeof document)
        return null;
      if ("currentScript" in document)
        return document.currentScript;
      try {
        throw new Error();
      } catch (r2) {
        var e2 = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(r2.stack) || [])[1];
        if (e2) {
          var n2 = document.getElementsByTagName("script");
          for (var t2 in n2)
            if (n2[t2].src == e2)
              return n2[t2];
        }
        return null;
      }
    }, isActive: function(e2, n2, t2) {
      for (var r2 = "no-" + n2; e2; ) {
        var a2 = e2.classList;
        if (a2.contains(n2))
          return true;
        if (a2.contains(r2))
          return false;
        e2 = e2.parentElement;
      }
      return !!t2;
    } }, languages: { plain: r, plaintext: r, text: r, txt: r, extend: function(e2, n2) {
      var t2 = a.util.clone(a.languages[e2]);
      for (var r2 in n2)
        t2[r2] = n2[r2];
      return t2;
    }, insertBefore: function(e2, n2, t2, r2) {
      var i2 = (r2 = r2 || a.languages)[e2], l2 = {};
      for (var o2 in i2)
        if (i2.hasOwnProperty(o2)) {
          if (o2 == n2)
            for (var s2 in t2)
              t2.hasOwnProperty(s2) && (l2[s2] = t2[s2]);
          t2.hasOwnProperty(o2) || (l2[o2] = i2[o2]);
        }
      var u2 = r2[e2];
      return r2[e2] = l2, a.languages.DFS(a.languages, function(n3, t3) {
        t3 === u2 && n3 != e2 && (this[n3] = l2);
      }), l2;
    }, DFS: function e2(n2, t2, r2, i2) {
      i2 = i2 || {};
      var l2 = a.util.objId;
      for (var o2 in n2)
        if (n2.hasOwnProperty(o2)) {
          t2.call(n2, o2, n2[o2], r2 || o2);
          var s2 = n2[o2], u2 = a.util.type(s2);
          "Object" !== u2 || i2[l2(s2)] ? "Array" !== u2 || i2[l2(s2)] || (i2[l2(s2)] = true, e2(s2, t2, o2, i2)) : (i2[l2(s2)] = true, e2(s2, t2, null, i2));
        }
    } }, plugins: {}, highlightAll: function(e2, n2) {
      a.highlightAllUnder(document, e2, n2);
    }, highlightAllUnder: function(e2, n2, t2) {
      var r2 = { callback: t2, container: e2, selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code' };
      a.hooks.run("before-highlightall", r2), r2.elements = Array.prototype.slice.apply(r2.container.querySelectorAll(r2.selector)), a.hooks.run("before-all-elements-highlight", r2);
      for (var i2, l2 = 0; i2 = r2.elements[l2++]; )
        a.highlightElement(i2, true === n2, r2.callback);
    }, highlightElement: function(n2, t2, r2) {
      var i2 = a.util.getLanguage(n2), l2 = a.languages[i2];
      a.util.setLanguage(n2, i2);
      var o2 = n2.parentElement;
      o2 && "pre" === o2.nodeName.toLowerCase() && a.util.setLanguage(o2, i2);
      var s2 = { element: n2, language: i2, grammar: l2, code: n2.textContent };
      function u2(e2) {
        s2.highlightedCode = e2, a.hooks.run("before-insert", s2), s2.element.innerHTML = s2.highlightedCode, a.hooks.run("after-highlight", s2), a.hooks.run("complete", s2), r2 && r2.call(s2.element);
      }
      if (a.hooks.run("before-sanity-check", s2), (o2 = s2.element.parentElement) && "pre" === o2.nodeName.toLowerCase() && !o2.hasAttribute("tabindex") && o2.setAttribute("tabindex", "0"), !s2.code)
        return a.hooks.run("complete", s2), void (r2 && r2.call(s2.element));
      if (a.hooks.run("before-highlight", s2), s2.grammar)
        if (t2 && e.Worker) {
          var c2 = new Worker(a.filename);
          c2.onmessage = function(e2) {
            u2(e2.data);
          }, c2.postMessage(JSON.stringify({ language: s2.language, code: s2.code, immediateClose: true }));
        } else
          u2(a.highlight(s2.code, s2.grammar, s2.language));
      else
        u2(a.util.encode(s2.code));
    }, highlight: function(e2, n2, t2) {
      var r2 = { code: e2, grammar: n2, language: t2 };
      if (a.hooks.run("before-tokenize", r2), !r2.grammar)
        throw new Error('The language "' + r2.language + '" has no grammar.');
      return r2.tokens = a.tokenize(r2.code, r2.grammar), a.hooks.run("after-tokenize", r2), i.stringify(a.util.encode(r2.tokens), r2.language);
    }, tokenize: function(e2, n2) {
      var t2 = n2.rest;
      if (t2) {
        for (var r2 in t2)
          n2[r2] = t2[r2];
        delete n2.rest;
      }
      var a2 = new s();
      return u(a2, a2.head, e2), o(e2, a2, n2, a2.head, 0), function(e3) {
        for (var n3 = [], t3 = e3.head.next; t3 !== e3.tail; )
          n3.push(t3.value), t3 = t3.next;
        return n3;
      }(a2);
    }, hooks: { all: {}, add: function(e2, n2) {
      var t2 = a.hooks.all;
      t2[e2] = t2[e2] || [], t2[e2].push(n2);
    }, run: function(e2, n2) {
      var t2 = a.hooks.all[e2];
      if (t2 && t2.length)
        for (var r2, i2 = 0; r2 = t2[i2++]; )
          r2(n2);
    } }, Token: i };
    function i(e2, n2, t2, r2) {
      this.type = e2, this.content = n2, this.alias = t2, this.length = 0 | (r2 || "").length;
    }
    function l(e2, n2, t2, r2) {
      e2.lastIndex = n2;
      var a2 = e2.exec(t2);
      if (a2 && r2 && a2[1]) {
        var i2 = a2[1].length;
        a2.index += i2, a2[0] = a2[0].slice(i2);
      }
      return a2;
    }
    function o(e2, n2, t2, r2, s2, g2) {
      for (var f2 in t2)
        if (t2.hasOwnProperty(f2) && t2[f2]) {
          var h2 = t2[f2];
          h2 = Array.isArray(h2) ? h2 : [h2];
          for (var d = 0; d < h2.length; ++d) {
            if (g2 && g2.cause == f2 + "," + d)
              return;
            var v = h2[d], p = v.inside, m = !!v.lookbehind, y = !!v.greedy, k = v.alias;
            if (y && !v.pattern.global) {
              var x = v.pattern.toString().match(/[imsuy]*$/)[0];
              v.pattern = RegExp(v.pattern.source, x + "g");
            }
            for (var b = v.pattern || v, w = r2.next, A = s2; w !== n2.tail && !(g2 && A >= g2.reach); A += w.value.length, w = w.next) {
              var E = w.value;
              if (n2.length > e2.length)
                return;
              if (!(E instanceof i)) {
                var P, L = 1;
                if (y) {
                  if (!(P = l(b, A, e2, m)) || P.index >= e2.length)
                    break;
                  var S = P.index, O = P.index + P[0].length, j = A;
                  for (j += w.value.length; S >= j; )
                    j += (w = w.next).value.length;
                  if (A = j -= w.value.length, w.value instanceof i)
                    continue;
                  for (var C = w; C !== n2.tail && (j < O || "string" == typeof C.value); C = C.next)
                    L++, j += C.value.length;
                  L--, E = e2.slice(A, j), P.index -= A;
                } else if (!(P = l(b, 0, E, m)))
                  continue;
                S = P.index;
                var N = P[0], _ = E.slice(0, S), M = E.slice(S + N.length), W = A + E.length;
                g2 && W > g2.reach && (g2.reach = W);
                var z = w.prev;
                if (_ && (z = u(n2, z, _), A += _.length), c(n2, z, L), w = u(n2, z, new i(f2, p ? a.tokenize(N, p) : N, k, N)), M && u(n2, w, M), L > 1) {
                  var I = { cause: f2 + "," + d, reach: W };
                  o(e2, n2, t2, w.prev, A, I), g2 && I.reach > g2.reach && (g2.reach = I.reach);
                }
              }
            }
          }
        }
    }
    function s() {
      var e2 = { value: null, prev: null, next: null }, n2 = { value: null, prev: e2, next: null };
      e2.next = n2, this.head = e2, this.tail = n2, this.length = 0;
    }
    function u(e2, n2, t2) {
      var r2 = n2.next, a2 = { value: t2, prev: n2, next: r2 };
      return n2.next = a2, r2.prev = a2, e2.length++, a2;
    }
    function c(e2, n2, t2) {
      for (var r2 = n2.next, a2 = 0; a2 < t2 && r2 !== e2.tail; a2++)
        r2 = r2.next;
      n2.next = r2, r2.prev = n2, e2.length -= a2;
    }
    if (e.Prism = a, i.stringify = function e2(n2, t2) {
      if ("string" == typeof n2)
        return n2;
      if (Array.isArray(n2)) {
        var r2 = "";
        return n2.forEach(function(n3) {
          r2 += e2(n3, t2);
        }), r2;
      }
      var i2 = { type: n2.type, content: e2(n2.content, t2), tag: "span", classes: ["token", n2.type], attributes: {}, language: t2 }, l2 = n2.alias;
      l2 && (Array.isArray(l2) ? Array.prototype.push.apply(i2.classes, l2) : i2.classes.push(l2)), a.hooks.run("wrap", i2);
      var o2 = "";
      for (var s2 in i2.attributes)
        o2 += " " + s2 + '="' + (i2.attributes[s2] || "").replace(/"/g, "&quot;") + '"';
      return "<" + i2.tag + ' class="' + i2.classes.join(" ") + '"' + o2 + ">" + i2.content + "</" + i2.tag + ">";
    }, !e.document)
      return e.addEventListener ? (a.disableWorkerMessageHandler || e.addEventListener("message", function(n2) {
        var t2 = JSON.parse(n2.data), r2 = t2.language, i2 = t2.code, l2 = t2.immediateClose;
        e.postMessage(a.highlight(i2, a.languages[r2], r2)), l2 && e.close();
      }, false), a) : a;
    var g = a.util.currentScript();
    function f() {
      a.manual || a.highlightAll();
    }
    if (g && (a.filename = g.src, g.hasAttribute("data-manual") && (a.manual = true)), !a.manual) {
      var h = document.readyState;
      "loading" === h || "interactive" === h && g && g.defer ? document.addEventListener("DOMContentLoaded", f) : window.requestAnimationFrame ? window.requestAnimationFrame(f) : window.setTimeout(f, 16);
    }
    return a;
  }(_self);
  "undefined" != typeof module && module.exports && (module.exports = Prism$1), "undefined" != typeof global && (global.Prism = Prism$1);
  Prism$1.languages.markup = { comment: { pattern: /<!--(?:(?!<!--)[\s\S])*?-->/, greedy: true }, prolog: { pattern: /<\?[\s\S]+?\?>/, greedy: true }, doctype: { pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i, greedy: true, inside: { "internal-subset": { pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/, lookbehind: true, greedy: true, inside: null }, string: { pattern: /"[^"]*"|'[^']*'/, greedy: true }, punctuation: /^<!|>$|[[\]]/, "doctype-tag": /^DOCTYPE/i, name: /[^\s<>'"]+/ } }, cdata: { pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i, greedy: true }, tag: { pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/, greedy: true, inside: { tag: { pattern: /^<\/?[^\s>\/]+/, inside: { punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/ } }, "special-attr": [], "attr-value": { pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/, inside: { punctuation: [{ pattern: /^=/, alias: "attr-equals" }, { pattern: /^(\s*)["']|["']$/, lookbehind: true }] } }, punctuation: /\/?>/, "attr-name": { pattern: /[^\s>\/]+/, inside: { namespace: /^[^\s>\/:]+:/ } } } }, entity: [{ pattern: /&[\da-z]{1,8};/i, alias: "named-entity" }, /&#x?[\da-f]{1,8};/i] }, Prism$1.languages.markup.tag.inside["attr-value"].inside.entity = Prism$1.languages.markup.entity, Prism$1.languages.markup.doctype.inside["internal-subset"].inside = Prism$1.languages.markup, Prism$1.hooks.add("wrap", function(a) {
    "entity" === a.type && (a.attributes.title = a.content.replace(/&amp;/, "&"));
  }), Object.defineProperty(Prism$1.languages.markup.tag, "addInlined", { value: function(a, e) {
    var s = {};
    s["language-" + e] = { pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i, lookbehind: true, inside: Prism$1.languages[e] }, s.cdata = /^<!\[CDATA\[|\]\]>$/i;
    var t = { "included-cdata": { pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i, inside: s } };
    t["language-" + e] = { pattern: /[\s\S]+/, inside: Prism$1.languages[e] };
    var n = {};
    n[a] = { pattern: RegExp("(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[^])*?(?=</__>)".replace(/__/g, function() {
      return a;
    }), "i"), lookbehind: true, greedy: true, inside: t }, Prism$1.languages.insertBefore("markup", "cdata", n);
  } }), Object.defineProperty(Prism$1.languages.markup.tag, "addAttribute", { value: function(a, e) {
    Prism$1.languages.markup.tag.inside["special-attr"].push({ pattern: RegExp(`(^|["'\\s])(?:` + a + `)\\s*=\\s*(?:"[^"]*"|'[^']*'|[^\\s'">=]+(?=[\\s>]))`, "i"), lookbehind: true, inside: { "attr-name": /^[^\s=]+/, "attr-value": { pattern: /=[\s\S]+/, inside: { value: { pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/, lookbehind: true, alias: [e, "language-" + e], inside: Prism$1.languages[e] }, punctuation: [{ pattern: /^=/, alias: "attr-equals" }, /"|'/] } } } });
  } }), Prism$1.languages.html = Prism$1.languages.markup, Prism$1.languages.mathml = Prism$1.languages.markup, Prism$1.languages.svg = Prism$1.languages.markup, Prism$1.languages.xml = Prism$1.languages.extend("markup", {}), Prism$1.languages.ssml = Prism$1.languages.xml, Prism$1.languages.atom = Prism$1.languages.xml, Prism$1.languages.rss = Prism$1.languages.xml;
  !function(s) {
    var e = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
    s.languages.css = { comment: /\/\*[\s\S]*?\*\//, atrule: { pattern: RegExp(`@[\\w-](?:[^;{\\s"']|\\s+(?!\\s)|` + e.source + ")*?(?:;|(?=\\s*\\{))"), inside: { rule: /^@[\w-]+/, "selector-function-argument": { pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/, lookbehind: true, alias: "selector" }, keyword: { pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/, lookbehind: true } } }, url: { pattern: RegExp("\\burl\\((?:" + e.source + `|(?:[^\\\\\r
()"']|\\\\[^])*)\\)`, "i"), greedy: true, inside: { function: /^url/i, punctuation: /^\(|\)$/, string: { pattern: RegExp("^" + e.source + "$"), alias: "url" } } }, selector: { pattern: RegExp(`(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + e.source + ")*(?=\\s*\\{)"), lookbehind: true }, string: { pattern: e, greedy: true }, property: { pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i, lookbehind: true }, important: /!important\b/i, function: { pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i, lookbehind: true }, punctuation: /[(){};:,]/ }, s.languages.css.atrule.inside.rest = s.languages.css;
    var t = s.languages.markup;
    t && (t.tag.addInlined("style", "css"), t.tag.addAttribute("style", "css"));
  }(Prism$1);
  Prism$1.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/, lookbehind: true, greedy: true }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: true, greedy: true }], string: { pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: true }, "class-name": { pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i, lookbehind: true, inside: { punctuation: /[.\\]/ } }, keyword: /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/, boolean: /\b(?:false|true)\b/, function: /\b\w+(?=\()/, number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i, operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/, punctuation: /[{}[\];(),.:]/ };
  Prism$1.languages.javascript = Prism$1.languages.extend("clike", { "class-name": [Prism$1.languages.clike["class-name"], { pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/, lookbehind: true }], keyword: [{ pattern: /((?:^|\})\s*)catch\b/, lookbehind: true }, { pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/, lookbehind: true }], function: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/, number: { pattern: RegExp("(^|[^\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?|\\d+(?:_\\d+)*n|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?)(?![\\w$])"), lookbehind: true }, operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/ }), Prism$1.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/, Prism$1.languages.insertBefore("javascript", "keyword", { regex: { pattern: RegExp(`((?:^|[^$\\w\\xA0-\\uFFFF."'\\])\\s]|\\b(?:return|yield))\\s*)/(?:(?:\\[(?:[^\\]\\\\\r
]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\r
])+/[dgimyus]{0,7}|(?:\\[(?:[^[\\]\\\\\r
]|\\\\.|\\[(?:[^[\\]\\\\\r
]|\\\\.|\\[(?:[^[\\]\\\\\r
]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\r
])+/[dgimyus]{0,7}v[dgimyus]{0,7})(?=(?:\\s|/\\*(?:[^*]|\\*(?!/))*\\*/)*(?:$|[\r
,.;:})\\]]|//))`), lookbehind: true, greedy: true, inside: { "regex-source": { pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/, lookbehind: true, alias: "language-regex", inside: Prism$1.languages.regex }, "regex-delimiter": /^\/|\/$/, "regex-flags": /^[a-z]+$/ } }, "function-variable": { pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/, alias: "function" }, parameter: [{ pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/, lookbehind: true, inside: Prism$1.languages.javascript }, { pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i, lookbehind: true, inside: Prism$1.languages.javascript }, { pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/, lookbehind: true, inside: Prism$1.languages.javascript }, { pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/, lookbehind: true, inside: Prism$1.languages.javascript }], constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/ }), Prism$1.languages.insertBefore("javascript", "string", { hashbang: { pattern: /^#!.*/, greedy: true, alias: "comment" }, "template-string": { pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/, greedy: true, inside: { "template-punctuation": { pattern: /^`|`$/, alias: "string" }, interpolation: { pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/, lookbehind: true, inside: { "interpolation-punctuation": { pattern: /^\$\{|\}$/, alias: "punctuation" }, rest: Prism$1.languages.javascript } }, string: /[\s\S]+/ } }, "string-property": { pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m, lookbehind: true, greedy: true, alias: "property" } }), Prism$1.languages.insertBefore("javascript", "operator", { "literal-property": { pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m, lookbehind: true, alias: "property" } }), Prism$1.languages.markup && (Prism$1.languages.markup.tag.addInlined("script", "javascript"), Prism$1.languages.markup.tag.addAttribute("on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)", "javascript")), Prism$1.languages.js = Prism$1.languages.javascript;
  !function(e) {
    var t = "\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b", a = { pattern: /(^(["']?)\w+\2)[ \t]+\S.*/, lookbehind: true, alias: "punctuation", inside: null }, n = { bash: a, environment: { pattern: RegExp("\\$" + t), alias: "constant" }, variable: [{ pattern: /\$?\(\([\s\S]+?\)\)/, greedy: true, inside: { variable: [{ pattern: /(^\$\(\([\s\S]+)\)\)/, lookbehind: true }, /^\$\(\(/], number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/, operator: /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/, punctuation: /\(\(?|\)\)?|,|;/ } }, { pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/, greedy: true, inside: { variable: /^\$\(|^`|\)$|`$/ } }, { pattern: /\$\{[^}]+\}/, greedy: true, inside: { operator: /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/, punctuation: /[\[\]]/, environment: { pattern: RegExp("(\\{)" + t), lookbehind: true, alias: "constant" } } }, /\$(?:\w+|[#?*!@$])/], entity: /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/ };
    e.languages.bash = { shebang: { pattern: /^#!\s*\/.*/, alias: "important" }, comment: { pattern: /(^|[^"{\\$])#.*/, lookbehind: true }, "function-name": [{ pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/, lookbehind: true, alias: "function" }, { pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/, alias: "function" }], "for-or-select": { pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/, alias: "variable", lookbehind: true }, "assign-left": { pattern: /(^|[\s;|&]|[<>]\()\w+(?:\.\w+)*(?=\+?=)/, inside: { environment: { pattern: RegExp("(^|[\\s;|&]|[<>]\\()" + t), lookbehind: true, alias: "constant" } }, alias: "variable", lookbehind: true }, parameter: { pattern: /(^|\s)-{1,2}(?:\w+:[+-]?)?\w+(?:\.\w+)*(?=[=\s]|$)/, alias: "variable", lookbehind: true }, string: [{ pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/, lookbehind: true, greedy: true, inside: n }, { pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/, lookbehind: true, greedy: true, inside: { bash: a } }, { pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/, lookbehind: true, greedy: true, inside: n }, { pattern: /(^|[^$\\])'[^']*'/, lookbehind: true, greedy: true }, { pattern: /\$'(?:[^'\\]|\\[\s\S])*'/, greedy: true, inside: { entity: n.entity } }], environment: { pattern: RegExp("\\$?" + t), alias: "constant" }, variable: n.variable, function: { pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/, lookbehind: true }, keyword: { pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/, lookbehind: true }, builtin: { pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/, lookbehind: true, alias: "class-name" }, boolean: { pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/, lookbehind: true }, "file-descriptor": { pattern: /\B&\d\b/, alias: "important" }, operator: { pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/, inside: { "file-descriptor": { pattern: /^\d/, alias: "important" } } }, punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/, number: { pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/, lookbehind: true } }, a.inside = e.languages.bash;
    for (var s = ["comment", "function-name", "for-or-select", "assign-left", "parameter", "string", "environment", "function", "keyword", "builtin", "boolean", "file-descriptor", "operator", "punctuation", "number"], o = n.variable[1].inside, i = 0; i < s.length; i++)
      o[s[i]] = e.languages.bash[s[i]];
    e.languages.sh = e.languages.bash, e.languages.shell = e.languages.bash;
  }(Prism$1);
  !function(e) {
    function n(e2, n2) {
      return "___" + e2.toUpperCase() + n2 + "___";
    }
    Object.defineProperties(e.languages["markup-templating"] = {}, { buildPlaceholders: { value: function(t, a, r, o) {
      if (t.language === a) {
        var c = t.tokenStack = [];
        t.code = t.code.replace(r, function(e2) {
          if ("function" == typeof o && !o(e2))
            return e2;
          for (var r2, i = c.length; -1 !== t.code.indexOf(r2 = n(a, i)); )
            ++i;
          return c[i] = e2, r2;
        }), t.grammar = e.languages.markup;
      }
    } }, tokenizePlaceholders: { value: function(t, a) {
      if (t.language === a && t.tokenStack) {
        t.grammar = e.languages[a];
        var r = 0, o = Object.keys(t.tokenStack);
        !function c(i) {
          for (var u = 0; u < i.length && !(r >= o.length); u++) {
            var g = i[u];
            if ("string" == typeof g || g.content && "string" == typeof g.content) {
              var l = o[r], s = t.tokenStack[l], f = "string" == typeof g ? g : g.content, p = n(a, l), k = f.indexOf(p);
              if (k > -1) {
                ++r;
                var m = f.substring(0, k), d = new e.Token(a, e.tokenize(s, t.grammar), "language-" + a, s), h = f.substring(k + p.length), v = [];
                m && v.push.apply(v, c([m])), v.push(d), h && v.push.apply(v, c([h])), "string" == typeof g ? i.splice.apply(i, [u, 1].concat(v)) : g.content = v;
              }
            } else
              g.content && c(g.content);
          }
          return i;
        }(t.tokens);
      }
    } } });
  }(Prism$1);
  !function(e) {
    var a = /\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/, t = [{ pattern: /\b(?:false|true)\b/i, alias: "boolean" }, { pattern: /(::\s*)\b[a-z_]\w*\b(?!\s*\()/i, greedy: true, lookbehind: true }, { pattern: /(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i, greedy: true, lookbehind: true }, /\b(?:null)\b/i, /\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/], i = /\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i, n = /<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/, s = /[{}\[\](),:;]/;
    e.languages.php = { delimiter: { pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i, alias: "important" }, comment: a, variable: /\$+(?:\w+\b|(?=\{))/, package: { pattern: /(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i, lookbehind: true, inside: { punctuation: /\\/ } }, "class-name-definition": { pattern: /(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i, lookbehind: true, alias: "class-name" }, "function-definition": { pattern: /(\bfunction\s+)[a-z_]\w*(?=\s*\()/i, lookbehind: true, alias: "function" }, keyword: [{ pattern: /(\(\s*)\b(?:array|bool|boolean|float|int|integer|object|string)\b(?=\s*\))/i, alias: "type-casting", greedy: true, lookbehind: true }, { pattern: /([(,?]\s*)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|object|self|static|string)\b(?=\s*\$)/i, alias: "type-hint", greedy: true, lookbehind: true }, { pattern: /(\)\s*:\s*(?:\?\s*)?)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|never|object|self|static|string|void)\b/i, alias: "return-type", greedy: true, lookbehind: true }, { pattern: /\b(?:array(?!\s*\()|bool|float|int|iterable|mixed|object|string|void)\b/i, alias: "type-declaration", greedy: true }, { pattern: /(\|\s*)(?:false|null)\b|\b(?:false|null)(?=\s*\|)/i, alias: "type-declaration", greedy: true, lookbehind: true }, { pattern: /\b(?:parent|self|static)(?=\s*::)/i, alias: "static-context", greedy: true }, { pattern: /(\byield\s+)from\b/i, lookbehind: true }, /\bclass\b/i, { pattern: /((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\b/i, lookbehind: true }], "argument-name": { pattern: /([(,]\s*)\b[a-z_]\w*(?=\s*:(?!:))/i, lookbehind: true }, "class-name": [{ pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i, greedy: true, lookbehind: true }, { pattern: /(\|\s*)\b[a-z_]\w*(?!\\)\b/i, greedy: true, lookbehind: true }, { pattern: /\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i, greedy: true }, { pattern: /(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i, alias: "class-name-fully-qualified", greedy: true, lookbehind: true, inside: { punctuation: /\\/ } }, { pattern: /(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i, alias: "class-name-fully-qualified", greedy: true, inside: { punctuation: /\\/ } }, { pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i, alias: "class-name-fully-qualified", greedy: true, lookbehind: true, inside: { punctuation: /\\/ } }, { pattern: /\b[a-z_]\w*(?=\s*\$)/i, alias: "type-declaration", greedy: true }, { pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i, alias: ["class-name-fully-qualified", "type-declaration"], greedy: true, inside: { punctuation: /\\/ } }, { pattern: /\b[a-z_]\w*(?=\s*::)/i, alias: "static-context", greedy: true }, { pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*::)/i, alias: ["class-name-fully-qualified", "static-context"], greedy: true, inside: { punctuation: /\\/ } }, { pattern: /([(,?]\s*)[a-z_]\w*(?=\s*\$)/i, alias: "type-hint", greedy: true, lookbehind: true }, { pattern: /([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i, alias: ["class-name-fully-qualified", "type-hint"], greedy: true, lookbehind: true, inside: { punctuation: /\\/ } }, { pattern: /(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i, alias: "return-type", greedy: true, lookbehind: true }, { pattern: /(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i, alias: ["class-name-fully-qualified", "return-type"], greedy: true, lookbehind: true, inside: { punctuation: /\\/ } }], constant: t, function: { pattern: /(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i, lookbehind: true, inside: { punctuation: /\\/ } }, property: { pattern: /(->\s*)\w+/, lookbehind: true }, number: i, operator: n, punctuation: s };
    var l = { pattern: /\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/, lookbehind: true, inside: e.languages.php }, r = [{ pattern: /<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/, alias: "nowdoc-string", greedy: true, inside: { delimiter: { pattern: /^<<<'[^']+'|[a-z_]\w*;$/i, alias: "symbol", inside: { punctuation: /^<<<'?|[';]$/ } } } }, { pattern: /<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i, alias: "heredoc-string", greedy: true, inside: { delimiter: { pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i, alias: "symbol", inside: { punctuation: /^<<<"?|[";]$/ } }, interpolation: l } }, { pattern: /`(?:\\[\s\S]|[^\\`])*`/, alias: "backtick-quoted-string", greedy: true }, { pattern: /'(?:\\[\s\S]|[^\\'])*'/, alias: "single-quoted-string", greedy: true }, { pattern: /"(?:\\[\s\S]|[^\\"])*"/, alias: "double-quoted-string", greedy: true, inside: { interpolation: l } }];
    e.languages.insertBefore("php", "variable", { string: r, attribute: { pattern: /#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im, greedy: true, inside: { "attribute-content": { pattern: /^(#\[)[\s\S]+(?=\]$)/, lookbehind: true, inside: { comment: a, string: r, "attribute-class-name": [{ pattern: /([^:]|^)\b[a-z_]\w*(?!\\)\b/i, alias: "class-name", greedy: true, lookbehind: true }, { pattern: /([^:]|^)(?:\\?\b[a-z_]\w*)+/i, alias: ["class-name", "class-name-fully-qualified"], greedy: true, lookbehind: true, inside: { punctuation: /\\/ } }], constant: t, number: i, operator: n, punctuation: s } }, delimiter: { pattern: /^#\[|\]$/, alias: "punctuation" } } } }), e.hooks.add("before-tokenize", function(a2) {
      /<\?/.test(a2.code) && e.languages["markup-templating"].buildPlaceholders(a2, "php", /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/g);
    }), e.hooks.add("after-tokenize", function(a2) {
      e.languages["markup-templating"].tokenizePlaceholders(a2, "php");
    });
  }(Prism$1);
  !function(e) {
    var n = /[*&][^\s[\]{},]+/, r = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/, t = "(?:" + r.source + "(?:[ 	]+" + n.source + ")?|" + n.source + "(?:[ 	]+" + r.source + ")?)", a = "(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ 	]*(?:(?![#:])<PLAIN>|:<PLAIN>))*".replace(/<PLAIN>/g, function() {
      return "[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]";
    }), d = `"(?:[^"\\\\\r
]|\\\\.)*"|'(?:[^'\\\\\r
]|\\\\.)*'`;
    function o(e2, n2) {
      n2 = (n2 || "").replace(/m/g, "") + "m";
      var r2 = "([:\\-,[{]\\s*(?:\\s<<prop>>[ 	]+)?)(?:<<value>>)(?=[ 	]*(?:$|,|\\]|\\}|(?:[\r\n]\\s*)?#))".replace(/<<prop>>/g, function() {
        return t;
      }).replace(/<<value>>/g, function() {
        return e2;
      });
      return RegExp(r2, n2);
    }
    e.languages.yaml = { scalar: { pattern: RegExp("([\\-:]\\s*(?:\\s<<prop>>[ 	]+)?[|>])[ 	]*(?:((?:\r?\n|\r)[ 	]+)\\S[^\r\n]*(?:\\2[^\r\n]+)*)".replace(/<<prop>>/g, function() {
      return t;
    })), lookbehind: true, alias: "string" }, comment: /#.*/, key: { pattern: RegExp("((?:^|[:\\-,[{\r\n?])[ 	]*(?:<<prop>>[ 	]+)?)<<key>>(?=\\s*:\\s)".replace(/<<prop>>/g, function() {
      return t;
    }).replace(/<<key>>/g, function() {
      return "(?:" + a + "|" + d + ")";
    })), lookbehind: true, greedy: true, alias: "atrule" }, directive: { pattern: /(^[ \t]*)%.+/m, lookbehind: true, alias: "important" }, datetime: { pattern: o("\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ 	]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ 	]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?"), lookbehind: true, alias: "number" }, boolean: { pattern: o("false|true", "i"), lookbehind: true, alias: "important" }, null: { pattern: o("null|~", "i"), lookbehind: true, alias: "important" }, string: { pattern: o(d), lookbehind: true, greedy: true }, number: { pattern: o("[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)", "i"), lookbehind: true }, tag: r, important: n, punctuation: /---|[:[\]{}\-,|>?]|\.\.\./ }, e.languages.yml = e.languages.yaml;
  }(Prism$1);
  const prism = "";
  function normalizeComponent(scriptExports, render, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
    var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
    if (render) {
      options.render = render;
      options.staticRenderFns = staticRenderFns;
      options._compiled = true;
    }
    if (functionalTemplate) {
      options.functional = true;
    }
    if (scopeId) {
      options._scopeId = "data-v-" + scopeId;
    }
    var hook;
    if (moduleIdentifier) {
      hook = function(context) {
        context = context || // cached call
        this.$vnode && this.$vnode.ssrContext || // stateful
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
        if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
          context = __VUE_SSR_CONTEXT__;
        }
        if (injectStyles) {
          injectStyles.call(this, context);
        }
        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      };
      options._ssrRegister = hook;
    } else if (injectStyles) {
      hook = shadowMode ? function() {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        );
      } : injectStyles;
    }
    if (hook) {
      if (options.functional) {
        options._injectStyles = hook;
        var originalRender = options.render;
        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        var existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }
    return {
      exports: scriptExports,
      options
    };
  }
  window.Prism = window.Prism || {};
  window.Prism.manual = true;
  const _sfc_main$f = {
    props: {
      language: String
    },
    mounted() {
      Prism.highlightAll(this.$el);
    }
  };
  var _sfc_render$f = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-code", { attrs: { "language": _vm.language } }, [_vm._t("default")], 2);
  };
  var _sfc_staticRenderFns$f = [];
  _sfc_render$f._withStripped = true;
  var __component__$f = /* @__PURE__ */ normalizeComponent(
    _sfc_main$f,
    _sfc_render$f,
    _sfc_staticRenderFns$f,
    false,
    null,
    null,
    null,
    null
  );
  __component__$f.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/Code.vue";
  const Code = __component__$f.exports;
  function _getDefaults() {
    return {
      async: false,
      breaks: false,
      extensions: null,
      gfm: true,
      hooks: null,
      pedantic: false,
      renderer: null,
      silent: false,
      tokenizer: null,
      walkTokens: null
    };
  }
  let _defaults = _getDefaults();
  function changeDefaults(newDefaults) {
    _defaults = newDefaults;
  }
  const escapeTest = /[&<>"']/;
  const escapeReplace = new RegExp(escapeTest.source, "g");
  const escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
  const escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
  const escapeReplacements = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  };
  const getEscapeReplacement = (ch) => escapeReplacements[ch];
  function escape(html, encode) {
    if (encode) {
      if (escapeTest.test(html)) {
        return html.replace(escapeReplace, getEscapeReplacement);
      }
    } else {
      if (escapeTestNoEncode.test(html)) {
        return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
      }
    }
    return html;
  }
  const unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
  function unescape(html) {
    return html.replace(unescapeTest, (_, n) => {
      n = n.toLowerCase();
      if (n === "colon")
        return ":";
      if (n.charAt(0) === "#") {
        return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
      }
      return "";
    });
  }
  const caret = /(^|[^\[])\^/g;
  function edit(regex, opt) {
    regex = typeof regex === "string" ? regex : regex.source;
    opt = opt || "";
    const obj = {
      replace: (name, val) => {
        val = typeof val === "object" && "source" in val ? val.source : val;
        val = val.replace(caret, "$1");
        regex = regex.replace(name, val);
        return obj;
      },
      getRegex: () => {
        return new RegExp(regex, opt);
      }
    };
    return obj;
  }
  function cleanUrl(href) {
    try {
      href = encodeURI(href).replace(/%25/g, "%");
    } catch (e) {
      return null;
    }
    return href;
  }
  const noopTest = { exec: () => null };
  function splitCells(tableRow, count) {
    const row = tableRow.replace(/\|/g, (match, offset, str) => {
      let escaped = false;
      let curr = offset;
      while (--curr >= 0 && str[curr] === "\\")
        escaped = !escaped;
      if (escaped) {
        return "|";
      } else {
        return " |";
      }
    }), cells = row.split(/ \|/);
    let i = 0;
    if (!cells[0].trim()) {
      cells.shift();
    }
    if (cells.length > 0 && !cells[cells.length - 1].trim()) {
      cells.pop();
    }
    if (count) {
      if (cells.length > count) {
        cells.splice(count);
      } else {
        while (cells.length < count)
          cells.push("");
      }
    }
    for (; i < cells.length; i++) {
      cells[i] = cells[i].trim().replace(/\\\|/g, "|");
    }
    return cells;
  }
  function rtrim(str, c, invert) {
    const l = str.length;
    if (l === 0) {
      return "";
    }
    let suffLen = 0;
    while (suffLen < l) {
      const currChar = str.charAt(l - suffLen - 1);
      if (currChar === c && !invert) {
        suffLen++;
      } else if (currChar !== c && invert) {
        suffLen++;
      } else {
        break;
      }
    }
    return str.slice(0, l - suffLen);
  }
  function findClosingBracket(str, b) {
    if (str.indexOf(b[1]) === -1) {
      return -1;
    }
    let level = 0;
    for (let i = 0; i < str.length; i++) {
      if (str[i] === "\\") {
        i++;
      } else if (str[i] === b[0]) {
        level++;
      } else if (str[i] === b[1]) {
        level--;
        if (level < 0) {
          return i;
        }
      }
    }
    return -1;
  }
  function outputLink(cap, link, raw, lexer) {
    const href = link.href;
    const title = link.title ? escape(link.title) : null;
    const text = cap[1].replace(/\\([\[\]])/g, "$1");
    if (cap[0].charAt(0) !== "!") {
      lexer.state.inLink = true;
      const token = {
        type: "link",
        raw,
        href,
        title,
        text,
        tokens: lexer.inlineTokens(text)
      };
      lexer.state.inLink = false;
      return token;
    }
    return {
      type: "image",
      raw,
      href,
      title,
      text: escape(text)
    };
  }
  function indentCodeCompensation(raw, text) {
    const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
    if (matchIndentToCode === null) {
      return text;
    }
    const indentToCode = matchIndentToCode[1];
    return text.split("\n").map((node) => {
      const matchIndentInNode = node.match(/^\s+/);
      if (matchIndentInNode === null) {
        return node;
      }
      const [indentInNode] = matchIndentInNode;
      if (indentInNode.length >= indentToCode.length) {
        return node.slice(indentToCode.length);
      }
      return node;
    }).join("\n");
  }
  class _Tokenizer {
    constructor(options) {
      __publicField(this, "options");
      // TODO: Fix this rules type
      __publicField(this, "rules");
      __publicField(this, "lexer");
      this.options = options || _defaults;
    }
    space(src) {
      const cap = this.rules.block.newline.exec(src);
      if (cap && cap[0].length > 0) {
        return {
          type: "space",
          raw: cap[0]
        };
      }
    }
    code(src) {
      const cap = this.rules.block.code.exec(src);
      if (cap) {
        const text = cap[0].replace(/^ {1,4}/gm, "");
        return {
          type: "code",
          raw: cap[0],
          codeBlockStyle: "indented",
          text: !this.options.pedantic ? rtrim(text, "\n") : text
        };
      }
    }
    fences(src) {
      const cap = this.rules.block.fences.exec(src);
      if (cap) {
        const raw = cap[0];
        const text = indentCodeCompensation(raw, cap[3] || "");
        return {
          type: "code",
          raw,
          lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, "$1") : cap[2],
          text
        };
      }
    }
    heading(src) {
      const cap = this.rules.block.heading.exec(src);
      if (cap) {
        let text = cap[2].trim();
        if (/#$/.test(text)) {
          const trimmed = rtrim(text, "#");
          if (this.options.pedantic) {
            text = trimmed.trim();
          } else if (!trimmed || / $/.test(trimmed)) {
            text = trimmed.trim();
          }
        }
        return {
          type: "heading",
          raw: cap[0],
          depth: cap[1].length,
          text,
          tokens: this.lexer.inline(text)
        };
      }
    }
    hr(src) {
      const cap = this.rules.block.hr.exec(src);
      if (cap) {
        return {
          type: "hr",
          raw: cap[0]
        };
      }
    }
    blockquote(src) {
      const cap = this.rules.block.blockquote.exec(src);
      if (cap) {
        const text = cap[0].replace(/^ *>[ \t]?/gm, "");
        const top = this.lexer.state.top;
        this.lexer.state.top = true;
        const tokens = this.lexer.blockTokens(text);
        this.lexer.state.top = top;
        return {
          type: "blockquote",
          raw: cap[0],
          tokens,
          text
        };
      }
    }
    list(src) {
      let cap = this.rules.block.list.exec(src);
      if (cap) {
        let bull = cap[1].trim();
        const isordered = bull.length > 1;
        const list = {
          type: "list",
          raw: "",
          ordered: isordered,
          start: isordered ? +bull.slice(0, -1) : "",
          loose: false,
          items: []
        };
        bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
        if (this.options.pedantic) {
          bull = isordered ? bull : "[*+-]";
        }
        const itemRegex = new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`);
        let raw = "";
        let itemContents = "";
        let endsWithBlankLine = false;
        while (src) {
          let endEarly = false;
          if (!(cap = itemRegex.exec(src))) {
            break;
          }
          if (this.rules.block.hr.test(src)) {
            break;
          }
          raw = cap[0];
          src = src.substring(raw.length);
          let line = cap[2].split("\n", 1)[0].replace(/^\t+/, (t) => " ".repeat(3 * t.length));
          let nextLine = src.split("\n", 1)[0];
          let indent = 0;
          if (this.options.pedantic) {
            indent = 2;
            itemContents = line.trimStart();
          } else {
            indent = cap[2].search(/[^ ]/);
            indent = indent > 4 ? 1 : indent;
            itemContents = line.slice(indent);
            indent += cap[1].length;
          }
          let blankLine = false;
          if (!line && /^ *$/.test(nextLine)) {
            raw += nextLine + "\n";
            src = src.substring(nextLine.length + 1);
            endEarly = true;
          }
          if (!endEarly) {
            const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`);
            const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
            const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
            const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
            while (src) {
              const rawLine = src.split("\n", 1)[0];
              nextLine = rawLine;
              if (this.options.pedantic) {
                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
              }
              if (fencesBeginRegex.test(nextLine)) {
                break;
              }
              if (headingBeginRegex.test(nextLine)) {
                break;
              }
              if (nextBulletRegex.test(nextLine)) {
                break;
              }
              if (hrRegex.test(src)) {
                break;
              }
              if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {
                itemContents += "\n" + nextLine.slice(indent);
              } else {
                if (blankLine) {
                  break;
                }
                if (line.search(/[^ ]/) >= 4) {
                  break;
                }
                if (fencesBeginRegex.test(line)) {
                  break;
                }
                if (headingBeginRegex.test(line)) {
                  break;
                }
                if (hrRegex.test(line)) {
                  break;
                }
                itemContents += "\n" + nextLine;
              }
              if (!blankLine && !nextLine.trim()) {
                blankLine = true;
              }
              raw += rawLine + "\n";
              src = src.substring(rawLine.length + 1);
              line = nextLine.slice(indent);
            }
          }
          if (!list.loose) {
            if (endsWithBlankLine) {
              list.loose = true;
            } else if (/\n *\n *$/.test(raw)) {
              endsWithBlankLine = true;
            }
          }
          let istask = null;
          let ischecked;
          if (this.options.gfm) {
            istask = /^\[[ xX]\] /.exec(itemContents);
            if (istask) {
              ischecked = istask[0] !== "[ ] ";
              itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
            }
          }
          list.items.push({
            type: "list_item",
            raw,
            task: !!istask,
            checked: ischecked,
            loose: false,
            text: itemContents,
            tokens: []
          });
          list.raw += raw;
        }
        list.items[list.items.length - 1].raw = raw.trimEnd();
        list.items[list.items.length - 1].text = itemContents.trimEnd();
        list.raw = list.raw.trimEnd();
        for (let i = 0; i < list.items.length; i++) {
          this.lexer.state.top = false;
          list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
          if (!list.loose) {
            const spacers = list.items[i].tokens.filter((t) => t.type === "space");
            const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t) => /\n.*\n/.test(t.raw));
            list.loose = hasMultipleLineBreaks;
          }
        }
        if (list.loose) {
          for (let i = 0; i < list.items.length; i++) {
            list.items[i].loose = true;
          }
        }
        return list;
      }
    }
    html(src) {
      const cap = this.rules.block.html.exec(src);
      if (cap) {
        const token = {
          type: "html",
          block: true,
          raw: cap[0],
          pre: cap[1] === "pre" || cap[1] === "script" || cap[1] === "style",
          text: cap[0]
        };
        return token;
      }
    }
    def(src) {
      const cap = this.rules.block.def.exec(src);
      if (cap) {
        const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
        const href = cap[2] ? cap[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline._escapes, "$1") : "";
        const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, "$1") : cap[3];
        return {
          type: "def",
          tag,
          raw: cap[0],
          href,
          title
        };
      }
    }
    table(src) {
      const cap = this.rules.block.table.exec(src);
      if (cap) {
        if (!/[:|]/.test(cap[2])) {
          return;
        }
        const item = {
          type: "table",
          raw: cap[0],
          header: splitCells(cap[1]).map((c) => {
            return { text: c, tokens: [] };
          }),
          align: cap[2].replace(/^\||\| *$/g, "").split("|"),
          rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
        };
        if (item.header.length === item.align.length) {
          let l = item.align.length;
          let i, j, k, row;
          for (i = 0; i < l; i++) {
            const align = item.align[i];
            if (align) {
              if (/^ *-+: *$/.test(align)) {
                item.align[i] = "right";
              } else if (/^ *:-+: *$/.test(align)) {
                item.align[i] = "center";
              } else if (/^ *:-+ *$/.test(align)) {
                item.align[i] = "left";
              } else {
                item.align[i] = null;
              }
            }
          }
          l = item.rows.length;
          for (i = 0; i < l; i++) {
            item.rows[i] = splitCells(item.rows[i], item.header.length).map((c) => {
              return { text: c, tokens: [] };
            });
          }
          l = item.header.length;
          for (j = 0; j < l; j++) {
            item.header[j].tokens = this.lexer.inline(item.header[j].text);
          }
          l = item.rows.length;
          for (j = 0; j < l; j++) {
            row = item.rows[j];
            for (k = 0; k < row.length; k++) {
              row[k].tokens = this.lexer.inline(row[k].text);
            }
          }
          return item;
        }
      }
    }
    lheading(src) {
      const cap = this.rules.block.lheading.exec(src);
      if (cap) {
        return {
          type: "heading",
          raw: cap[0],
          depth: cap[2].charAt(0) === "=" ? 1 : 2,
          text: cap[1],
          tokens: this.lexer.inline(cap[1])
        };
      }
    }
    paragraph(src) {
      const cap = this.rules.block.paragraph.exec(src);
      if (cap) {
        const text = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
        return {
          type: "paragraph",
          raw: cap[0],
          text,
          tokens: this.lexer.inline(text)
        };
      }
    }
    text(src) {
      const cap = this.rules.block.text.exec(src);
      if (cap) {
        return {
          type: "text",
          raw: cap[0],
          text: cap[0],
          tokens: this.lexer.inline(cap[0])
        };
      }
    }
    escape(src) {
      const cap = this.rules.inline.escape.exec(src);
      if (cap) {
        return {
          type: "escape",
          raw: cap[0],
          text: escape(cap[1])
        };
      }
    }
    tag(src) {
      const cap = this.rules.inline.tag.exec(src);
      if (cap) {
        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
          this.lexer.state.inLink = true;
        } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
          this.lexer.state.inLink = false;
        }
        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = true;
        } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = false;
        }
        return {
          type: "html",
          raw: cap[0],
          inLink: this.lexer.state.inLink,
          inRawBlock: this.lexer.state.inRawBlock,
          block: false,
          text: cap[0]
        };
      }
    }
    link(src) {
      const cap = this.rules.inline.link.exec(src);
      if (cap) {
        const trimmedUrl = cap[2].trim();
        if (!this.options.pedantic && /^</.test(trimmedUrl)) {
          if (!/>$/.test(trimmedUrl)) {
            return;
          }
          const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
            return;
          }
        } else {
          const lastParenIndex = findClosingBracket(cap[2], "()");
          if (lastParenIndex > -1) {
            const start = cap[0].indexOf("!") === 0 ? 5 : 4;
            const linkLen = start + cap[1].length + lastParenIndex;
            cap[2] = cap[2].substring(0, lastParenIndex);
            cap[0] = cap[0].substring(0, linkLen).trim();
            cap[3] = "";
          }
        }
        let href = cap[2];
        let title = "";
        if (this.options.pedantic) {
          const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
          if (link) {
            href = link[1];
            title = link[3];
          }
        } else {
          title = cap[3] ? cap[3].slice(1, -1) : "";
        }
        href = href.trim();
        if (/^</.test(href)) {
          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
            href = href.slice(1);
          } else {
            href = href.slice(1, -1);
          }
        }
        return outputLink(cap, {
          href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
          title: title ? title.replace(this.rules.inline._escapes, "$1") : title
        }, cap[0], this.lexer);
      }
    }
    reflink(src, links) {
      let cap;
      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
        let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
        link = links[link.toLowerCase()];
        if (!link) {
          const text = cap[0].charAt(0);
          return {
            type: "text",
            raw: text,
            text
          };
        }
        return outputLink(cap, link, cap[0], this.lexer);
      }
    }
    emStrong(src, maskedSrc, prevChar = "") {
      let match = this.rules.inline.emStrong.lDelim.exec(src);
      if (!match)
        return;
      if (match[3] && prevChar.match(/[\p{L}\p{N}]/u))
        return;
      const nextChar = match[1] || match[2] || "";
      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
        const lLength = [...match[0]].length - 1;
        let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
        const endReg = match[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
        endReg.lastIndex = 0;
        maskedSrc = maskedSrc.slice(-1 * src.length + match[0].length - 1);
        while ((match = endReg.exec(maskedSrc)) != null) {
          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
          if (!rDelim)
            continue;
          rLength = [...rDelim].length;
          if (match[3] || match[4]) {
            delimTotal += rLength;
            continue;
          } else if (match[5] || match[6]) {
            if (lLength % 3 && !((lLength + rLength) % 3)) {
              midDelimTotal += rLength;
              continue;
            }
          }
          delimTotal -= rLength;
          if (delimTotal > 0)
            continue;
          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
          const raw = [...src].slice(0, lLength + match.index + rLength + 1).join("");
          if (Math.min(lLength, rLength) % 2) {
            const text2 = raw.slice(1, -1);
            return {
              type: "em",
              raw,
              text: text2,
              tokens: this.lexer.inlineTokens(text2)
            };
          }
          const text = raw.slice(2, -2);
          return {
            type: "strong",
            raw,
            text,
            tokens: this.lexer.inlineTokens(text)
          };
        }
      }
    }
    codespan(src) {
      const cap = this.rules.inline.code.exec(src);
      if (cap) {
        let text = cap[2].replace(/\n/g, " ");
        const hasNonSpaceChars = /[^ ]/.test(text);
        const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
          text = text.substring(1, text.length - 1);
        }
        text = escape(text, true);
        return {
          type: "codespan",
          raw: cap[0],
          text
        };
      }
    }
    br(src) {
      const cap = this.rules.inline.br.exec(src);
      if (cap) {
        return {
          type: "br",
          raw: cap[0]
        };
      }
    }
    del(src) {
      const cap = this.rules.inline.del.exec(src);
      if (cap) {
        return {
          type: "del",
          raw: cap[0],
          text: cap[2],
          tokens: this.lexer.inlineTokens(cap[2])
        };
      }
    }
    autolink(src) {
      const cap = this.rules.inline.autolink.exec(src);
      if (cap) {
        let text, href;
        if (cap[2] === "@") {
          text = escape(cap[1]);
          href = "mailto:" + text;
        } else {
          text = escape(cap[1]);
          href = text;
        }
        return {
          type: "link",
          raw: cap[0],
          text,
          href,
          tokens: [
            {
              type: "text",
              raw: text,
              text
            }
          ]
        };
      }
    }
    url(src) {
      let cap;
      if (cap = this.rules.inline.url.exec(src)) {
        let text, href;
        if (cap[2] === "@") {
          text = escape(cap[0]);
          href = "mailto:" + text;
        } else {
          let prevCapZero;
          do {
            prevCapZero = cap[0];
            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
          } while (prevCapZero !== cap[0]);
          text = escape(cap[0]);
          if (cap[1] === "www.") {
            href = "http://" + cap[0];
          } else {
            href = cap[0];
          }
        }
        return {
          type: "link",
          raw: cap[0],
          text,
          href,
          tokens: [
            {
              type: "text",
              raw: text,
              text
            }
          ]
        };
      }
    }
    inlineText(src) {
      const cap = this.rules.inline.text.exec(src);
      if (cap) {
        let text;
        if (this.lexer.state.inRawBlock) {
          text = cap[0];
        } else {
          text = escape(cap[0]);
        }
        return {
          type: "text",
          raw: cap[0],
          text
        };
      }
    }
  }
  const block = {
    newline: /^(?: *(?:\n|$))+/,
    code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
    fences: /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
    hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
    heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
    blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
    list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
    html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
    def: /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
    table: noopTest,
    lheading: /^(?!bull )((?:.|\n(?!\s*?\n|bull ))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
    // regex template, placeholders will be replaced according to different paragraph
    // interruption rules of commonmark and the original markdown spec:
    _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
    text: /^[^\n]+/
  };
  block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
  block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
  block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
  block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
  block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
  block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
  block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
  block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
  block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
  block.lheading = edit(block.lheading).replace(/bull/g, block.bullet).getRegex();
  block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
  block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
  block.normal = { ...block };
  block.gfm = {
    ...block.normal,
    table: "^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
    // Cells
  };
  block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
  block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
  block.pedantic = {
    ...block.normal,
    html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
    heading: /^(#{1,6})(.*)(?:\n+|$)/,
    fences: noopTest,
    lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
    paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
  };
  const inline = {
    escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
    autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
    url: noopTest,
    tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
    link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
    reflink: /^!?\[(label)\]\[(ref)\]/,
    nolink: /^!?\[(ref)\](?:\[\])?/,
    reflinkSearch: "reflink|nolink(?!\\()",
    emStrong: {
      lDelim: /^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/,
      //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
      //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a
      rDelimAst: /^[^_*]*?__[^_*]*?\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\*)[punct](\*+)(?=[\s]|$)|[^punct\s](\*+)(?!\*)(?=[punct\s]|$)|(?!\*)[punct\s](\*+)(?=[^punct\s])|[\s](\*+)(?!\*)(?=[punct])|(?!\*)[punct](\*+)(?!\*)(?=[punct])|[^punct\s](\*+)(?=[^punct\s])/,
      rDelimUnd: /^[^_*]*?\*\*[^_*]*?_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\s]|$)|[^punct\s](_+)(?!_)(?=[punct\s]|$)|(?!_)[punct\s](_+)(?=[^punct\s])|[\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/
      // ^- Not allowed for _
    },
    code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
    br: /^( {2,}|\\)\n(?!\s*$)/,
    del: noopTest,
    text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
    punctuation: /^((?![*_])[\spunctuation])/
  };
  inline._punctuation = "\\p{P}$+<=>`^|~";
  inline.punctuation = edit(inline.punctuation, "u").replace(/punctuation/g, inline._punctuation).getRegex();
  inline.blockSkip = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g;
  inline.anyPunctuation = /\\[punct]/g;
  inline._escapes = /\\([punct])/g;
  inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
  inline.emStrong.lDelim = edit(inline.emStrong.lDelim, "u").replace(/punct/g, inline._punctuation).getRegex();
  inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "gu").replace(/punct/g, inline._punctuation).getRegex();
  inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "gu").replace(/punct/g, inline._punctuation).getRegex();
  inline.anyPunctuation = edit(inline.anyPunctuation, "gu").replace(/punct/g, inline._punctuation).getRegex();
  inline._escapes = edit(inline._escapes, "gu").replace(/punct/g, inline._punctuation).getRegex();
  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
  inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
  inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
  inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
  inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
  inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
  inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
  inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
  inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
  inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
  inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
  inline.normal = { ...inline };
  inline.pedantic = {
    ...inline.normal,
    strong: {
      start: /^__|\*\*/,
      middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
      endAst: /\*\*(?!\*)/g,
      endUnd: /__(?!_)/g
    },
    em: {
      start: /^_|\*/,
      middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
      endAst: /\*(?!\*)/g,
      endUnd: /_(?!_)/g
    },
    link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
    reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
  };
  inline.gfm = {
    ...inline.normal,
    escape: edit(inline.escape).replace("])", "~|])").getRegex(),
    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
    url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
    _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
    del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
    text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
  };
  inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
  inline.breaks = {
    ...inline.gfm,
    br: edit(inline.br).replace("{2,}", "*").getRegex(),
    text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
  };
  class _Lexer {
    constructor(options) {
      __publicField(this, "tokens");
      __publicField(this, "options");
      __publicField(this, "state");
      __publicField(this, "tokenizer");
      __publicField(this, "inlineQueue");
      this.tokens = [];
      this.tokens.links = /* @__PURE__ */ Object.create(null);
      this.options = options || _defaults;
      this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
      this.tokenizer = this.options.tokenizer;
      this.tokenizer.options = this.options;
      this.tokenizer.lexer = this;
      this.inlineQueue = [];
      this.state = {
        inLink: false,
        inRawBlock: false,
        top: true
      };
      const rules = {
        block: block.normal,
        inline: inline.normal
      };
      if (this.options.pedantic) {
        rules.block = block.pedantic;
        rules.inline = inline.pedantic;
      } else if (this.options.gfm) {
        rules.block = block.gfm;
        if (this.options.breaks) {
          rules.inline = inline.breaks;
        } else {
          rules.inline = inline.gfm;
        }
      }
      this.tokenizer.rules = rules;
    }
    /**
     * Expose Rules
     */
    static get rules() {
      return {
        block,
        inline
      };
    }
    /**
     * Static Lex Method
     */
    static lex(src, options) {
      const lexer = new _Lexer(options);
      return lexer.lex(src);
    }
    /**
     * Static Lex Inline Method
     */
    static lexInline(src, options) {
      const lexer = new _Lexer(options);
      return lexer.inlineTokens(src);
    }
    /**
     * Preprocessing
     */
    lex(src) {
      src = src.replace(/\r\n|\r/g, "\n");
      this.blockTokens(src, this.tokens);
      let next;
      while (next = this.inlineQueue.shift()) {
        this.inlineTokens(next.src, next.tokens);
      }
      return this.tokens;
    }
    blockTokens(src, tokens = []) {
      if (this.options.pedantic) {
        src = src.replace(/\t/g, "    ").replace(/^ +$/gm, "");
      } else {
        src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) => {
          return leading + "    ".repeat(tabs.length);
        });
      }
      let token;
      let lastToken;
      let cutSrc;
      let lastParagraphClipped;
      while (src) {
        if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.space(src)) {
          src = src.substring(token.raw.length);
          if (token.raw.length === 1 && tokens.length > 0) {
            tokens[tokens.length - 1].raw += "\n";
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.code(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.fences(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.heading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.hr(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.blockquote(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.list(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.html(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.def(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.raw;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else if (!this.tokens.links[token.tag]) {
            this.tokens.links[token.tag] = {
              href: token.href,
              title: token.title
            };
          }
          continue;
        }
        if (token = this.tokenizer.table(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.lheading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        cutSrc = src;
        if (this.options.extensions && this.options.extensions.startBlock) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startBlock.forEach((getStartIndex) => {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
          lastToken = tokens[tokens.length - 1];
          if (lastParagraphClipped && lastToken.type === "paragraph") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          lastParagraphClipped = cutSrc.length !== src.length;
          src = src.substring(token.raw.length);
          continue;
        }
        if (token = this.tokenizer.text(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && lastToken.type === "text") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            console.error(errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      this.state.top = true;
      return tokens;
    }
    inline(src, tokens = []) {
      this.inlineQueue.push({ src, tokens });
      return tokens;
    }
    /**
     * Lexing/Compiling
     */
    inlineTokens(src, tokens = []) {
      let token, lastToken, cutSrc;
      let maskedSrc = src;
      let match;
      let keepPrevChar, prevChar;
      if (this.tokens.links) {
        const links = Object.keys(this.tokens.links);
        if (links.length > 0) {
          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
            if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
              maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
            }
          }
        }
      }
      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
      }
      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
      }
      while (src) {
        if (!keepPrevChar) {
          prevChar = "";
        }
        keepPrevChar = false;
        if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.escape(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.tag(src)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && token.type === "text" && lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.link(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.reflink(src, this.tokens.links)) {
          src = src.substring(token.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && token.type === "text" && lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.codespan(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.br(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.del(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.autolink(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (!this.state.inLink && (token = this.tokenizer.url(src))) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        cutSrc = src;
        if (this.options.extensions && this.options.extensions.startInline) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startInline.forEach((getStartIndex) => {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (token = this.tokenizer.inlineText(cutSrc)) {
          src = src.substring(token.raw.length);
          if (token.raw.slice(-1) !== "_") {
            prevChar = token.raw.slice(-1);
          }
          keepPrevChar = true;
          lastToken = tokens[tokens.length - 1];
          if (lastToken && lastToken.type === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            console.error(errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      return tokens;
    }
  }
  class _Renderer {
    constructor(options) {
      __publicField(this, "options");
      this.options = options || _defaults;
    }
    code(code, infostring, escaped) {
      var _a;
      const lang = (_a = (infostring || "").match(/^\S*/)) == null ? void 0 : _a[0];
      code = code.replace(/\n$/, "") + "\n";
      if (!lang) {
        return "<pre><code>" + (escaped ? code : escape(code, true)) + "</code></pre>\n";
      }
      return '<pre><code class="language-' + escape(lang) + '">' + (escaped ? code : escape(code, true)) + "</code></pre>\n";
    }
    blockquote(quote) {
      return `<blockquote>
${quote}</blockquote>
`;
    }
    html(html, block2) {
      return html;
    }
    heading(text, level, raw) {
      return `<h${level}>${text}</h${level}>
`;
    }
    hr() {
      return "<hr>\n";
    }
    list(body, ordered, start) {
      const type = ordered ? "ol" : "ul";
      const startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
      return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
    }
    listitem(text, task, checked) {
      return `<li>${text}</li>
`;
    }
    checkbox(checked) {
      return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox">';
    }
    paragraph(text) {
      return `<p>${text}</p>
`;
    }
    table(header, body) {
      if (body)
        body = `<tbody>${body}</tbody>`;
      return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
    }
    tablerow(content) {
      return `<tr>
${content}</tr>
`;
    }
    tablecell(content, flags) {
      const type = flags.header ? "th" : "td";
      const tag = flags.align ? `<${type} align="${flags.align}">` : `<${type}>`;
      return tag + content + `</${type}>
`;
    }
    /**
     * span level renderer
     */
    strong(text) {
      return `<strong>${text}</strong>`;
    }
    em(text) {
      return `<em>${text}</em>`;
    }
    codespan(text) {
      return `<code>${text}</code>`;
    }
    br() {
      return "<br>";
    }
    del(text) {
      return `<del>${text}</del>`;
    }
    link(href, title, text) {
      const cleanHref = cleanUrl(href);
      if (cleanHref === null) {
        return text;
      }
      href = cleanHref;
      let out = '<a href="' + href + '"';
      if (title) {
        out += ' title="' + title + '"';
      }
      out += ">" + text + "</a>";
      return out;
    }
    image(href, title, text) {
      const cleanHref = cleanUrl(href);
      if (cleanHref === null) {
        return text;
      }
      href = cleanHref;
      let out = `<img src="${href}" alt="${text}"`;
      if (title) {
        out += ` title="${title}"`;
      }
      out += ">";
      return out;
    }
    text(text) {
      return text;
    }
  }
  class _TextRenderer {
    // no need for block level renderers
    strong(text) {
      return text;
    }
    em(text) {
      return text;
    }
    codespan(text) {
      return text;
    }
    del(text) {
      return text;
    }
    html(text) {
      return text;
    }
    text(text) {
      return text;
    }
    link(href, title, text) {
      return "" + text;
    }
    image(href, title, text) {
      return "" + text;
    }
    br() {
      return "";
    }
  }
  class _Parser {
    constructor(options) {
      __publicField(this, "options");
      __publicField(this, "renderer");
      __publicField(this, "textRenderer");
      this.options = options || _defaults;
      this.options.renderer = this.options.renderer || new _Renderer();
      this.renderer = this.options.renderer;
      this.renderer.options = this.options;
      this.textRenderer = new _TextRenderer();
    }
    /**
     * Static Parse Method
     */
    static parse(tokens, options) {
      const parser = new _Parser(options);
      return parser.parse(tokens);
    }
    /**
     * Static Parse Inline Method
     */
    static parseInline(tokens, options) {
      const parser = new _Parser(options);
      return parser.parseInline(tokens);
    }
    /**
     * Parse Loop
     */
    parse(tokens, top = true) {
      let out = "";
      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
          const genericToken = token;
          const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);
          if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(genericToken.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token.type) {
          case "space": {
            continue;
          }
          case "hr": {
            out += this.renderer.hr();
            continue;
          }
          case "heading": {
            const headingToken = token;
            out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));
            continue;
          }
          case "code": {
            const codeToken = token;
            out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);
            continue;
          }
          case "table": {
            const tableToken = token;
            let header = "";
            let cell = "";
            for (let j = 0; j < tableToken.header.length; j++) {
              cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });
            }
            header += this.renderer.tablerow(cell);
            let body = "";
            for (let j = 0; j < tableToken.rows.length; j++) {
              const row = tableToken.rows[j];
              cell = "";
              for (let k = 0; k < row.length; k++) {
                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });
              }
              body += this.renderer.tablerow(cell);
            }
            out += this.renderer.table(header, body);
            continue;
          }
          case "blockquote": {
            const blockquoteToken = token;
            const body = this.parse(blockquoteToken.tokens);
            out += this.renderer.blockquote(body);
            continue;
          }
          case "list": {
            const listToken = token;
            const ordered = listToken.ordered;
            const start = listToken.start;
            const loose = listToken.loose;
            let body = "";
            for (let j = 0; j < listToken.items.length; j++) {
              const item = listToken.items[j];
              const checked = item.checked;
              const task = item.task;
              let itemBody = "";
              if (item.task) {
                const checkbox = this.renderer.checkbox(!!checked);
                if (loose) {
                  if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                    item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                      item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                    }
                  } else {
                    item.tokens.unshift({
                      type: "text",
                      text: checkbox + " "
                    });
                  }
                } else {
                  itemBody += checkbox + " ";
                }
              }
              itemBody += this.parse(item.tokens, loose);
              body += this.renderer.listitem(itemBody, task, !!checked);
            }
            out += this.renderer.list(body, ordered, start);
            continue;
          }
          case "html": {
            const htmlToken = token;
            out += this.renderer.html(htmlToken.text, htmlToken.block);
            continue;
          }
          case "paragraph": {
            const paragraphToken = token;
            out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));
            continue;
          }
          case "text": {
            let textToken = token;
            let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;
            while (i + 1 < tokens.length && tokens[i + 1].type === "text") {
              textToken = tokens[++i];
              body += "\n" + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);
            }
            out += top ? this.renderer.paragraph(body) : body;
            continue;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              console.error(errMsg);
              return "";
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
    /**
     * Parse Inline Tokens
     */
    parseInline(tokens, renderer) {
      renderer = renderer || this.renderer;
      let out = "";
      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
          const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
          if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token.type) {
          case "escape": {
            const escapeToken = token;
            out += renderer.text(escapeToken.text);
            break;
          }
          case "html": {
            const tagToken = token;
            out += renderer.html(tagToken.text);
            break;
          }
          case "link": {
            const linkToken = token;
            out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));
            break;
          }
          case "image": {
            const imageToken = token;
            out += renderer.image(imageToken.href, imageToken.title, imageToken.text);
            break;
          }
          case "strong": {
            const strongToken = token;
            out += renderer.strong(this.parseInline(strongToken.tokens, renderer));
            break;
          }
          case "em": {
            const emToken = token;
            out += renderer.em(this.parseInline(emToken.tokens, renderer));
            break;
          }
          case "codespan": {
            const codespanToken = token;
            out += renderer.codespan(codespanToken.text);
            break;
          }
          case "br": {
            out += renderer.br();
            break;
          }
          case "del": {
            const delToken = token;
            out += renderer.del(this.parseInline(delToken.tokens, renderer));
            break;
          }
          case "text": {
            const textToken = token;
            out += renderer.text(textToken.text);
            break;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              console.error(errMsg);
              return "";
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
  }
  class _Hooks {
    constructor(options) {
      __publicField(this, "options");
      this.options = options || _defaults;
    }
    /**
     * Process markdown before marked
     */
    preprocess(markdown) {
      return markdown;
    }
    /**
     * Process HTML after marked is finished
     */
    postprocess(html) {
      return html;
    }
  }
  __publicField(_Hooks, "passThroughHooks", /* @__PURE__ */ new Set([
    "preprocess",
    "postprocess"
  ]));
  class Marked {
    constructor(...args) {
      __privateAdd(this, _parseMarkdown);
      __privateAdd(this, _onError);
      __publicField(this, "defaults", _getDefaults());
      __publicField(this, "options", this.setOptions);
      __publicField(this, "parse", __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lex, _Parser.parse));
      __publicField(this, "parseInline", __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lexInline, _Parser.parseInline));
      __publicField(this, "Parser", _Parser);
      __publicField(this, "parser", _Parser.parse);
      __publicField(this, "Renderer", _Renderer);
      __publicField(this, "TextRenderer", _TextRenderer);
      __publicField(this, "Lexer", _Lexer);
      __publicField(this, "lexer", _Lexer.lex);
      __publicField(this, "Tokenizer", _Tokenizer);
      __publicField(this, "Hooks", _Hooks);
      this.use(...args);
    }
    /**
     * Run callback for every token
     */
    walkTokens(tokens, callback) {
      var _a, _b;
      let values = [];
      for (const token of tokens) {
        values = values.concat(callback.call(this, token));
        switch (token.type) {
          case "table": {
            const tableToken = token;
            for (const cell of tableToken.header) {
              values = values.concat(this.walkTokens(cell.tokens, callback));
            }
            for (const row of tableToken.rows) {
              for (const cell of row) {
                values = values.concat(this.walkTokens(cell.tokens, callback));
              }
            }
            break;
          }
          case "list": {
            const listToken = token;
            values = values.concat(this.walkTokens(listToken.items, callback));
            break;
          }
          default: {
            const genericToken = token;
            if ((_b = (_a = this.defaults.extensions) == null ? void 0 : _a.childTokens) == null ? void 0 : _b[genericToken.type]) {
              this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {
                values = values.concat(this.walkTokens(genericToken[childTokens], callback));
              });
            } else if (genericToken.tokens) {
              values = values.concat(this.walkTokens(genericToken.tokens, callback));
            }
          }
        }
      }
      return values;
    }
    use(...args) {
      const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };
      args.forEach((pack) => {
        const opts = { ...pack };
        opts.async = this.defaults.async || opts.async || false;
        if (pack.extensions) {
          pack.extensions.forEach((ext) => {
            if (!ext.name) {
              throw new Error("extension name required");
            }
            if ("renderer" in ext) {
              const prevRenderer = extensions.renderers[ext.name];
              if (prevRenderer) {
                extensions.renderers[ext.name] = function(...args2) {
                  let ret = ext.renderer.apply(this, args2);
                  if (ret === false) {
                    ret = prevRenderer.apply(this, args2);
                  }
                  return ret;
                };
              } else {
                extensions.renderers[ext.name] = ext.renderer;
              }
            }
            if ("tokenizer" in ext) {
              if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
                throw new Error("extension level must be 'block' or 'inline'");
              }
              const extLevel = extensions[ext.level];
              if (extLevel) {
                extLevel.unshift(ext.tokenizer);
              } else {
                extensions[ext.level] = [ext.tokenizer];
              }
              if (ext.start) {
                if (ext.level === "block") {
                  if (extensions.startBlock) {
                    extensions.startBlock.push(ext.start);
                  } else {
                    extensions.startBlock = [ext.start];
                  }
                } else if (ext.level === "inline") {
                  if (extensions.startInline) {
                    extensions.startInline.push(ext.start);
                  } else {
                    extensions.startInline = [ext.start];
                  }
                }
              }
            }
            if ("childTokens" in ext && ext.childTokens) {
              extensions.childTokens[ext.name] = ext.childTokens;
            }
          });
          opts.extensions = extensions;
        }
        if (pack.renderer) {
          const renderer = this.defaults.renderer || new _Renderer(this.defaults);
          for (const prop in pack.renderer) {
            const rendererFunc = pack.renderer[prop];
            const rendererKey = prop;
            const prevRenderer = renderer[rendererKey];
            renderer[rendererKey] = (...args2) => {
              let ret = rendererFunc.apply(renderer, args2);
              if (ret === false) {
                ret = prevRenderer.apply(renderer, args2);
              }
              return ret || "";
            };
          }
          opts.renderer = renderer;
        }
        if (pack.tokenizer) {
          const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
          for (const prop in pack.tokenizer) {
            const tokenizerFunc = pack.tokenizer[prop];
            const tokenizerKey = prop;
            const prevTokenizer = tokenizer[tokenizerKey];
            tokenizer[tokenizerKey] = (...args2) => {
              let ret = tokenizerFunc.apply(tokenizer, args2);
              if (ret === false) {
                ret = prevTokenizer.apply(tokenizer, args2);
              }
              return ret;
            };
          }
          opts.tokenizer = tokenizer;
        }
        if (pack.hooks) {
          const hooks = this.defaults.hooks || new _Hooks();
          for (const prop in pack.hooks) {
            const hooksFunc = pack.hooks[prop];
            const hooksKey = prop;
            const prevHook = hooks[hooksKey];
            if (_Hooks.passThroughHooks.has(prop)) {
              hooks[hooksKey] = (arg) => {
                if (this.defaults.async) {
                  return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret2) => {
                    return prevHook.call(hooks, ret2);
                  });
                }
                const ret = hooksFunc.call(hooks, arg);
                return prevHook.call(hooks, ret);
              };
            } else {
              hooks[hooksKey] = (...args2) => {
                let ret = hooksFunc.apply(hooks, args2);
                if (ret === false) {
                  ret = prevHook.apply(hooks, args2);
                }
                return ret;
              };
            }
          }
          opts.hooks = hooks;
        }
        if (pack.walkTokens) {
          const walkTokens = this.defaults.walkTokens;
          const packWalktokens = pack.walkTokens;
          opts.walkTokens = function(token) {
            let values = [];
            values.push(packWalktokens.call(this, token));
            if (walkTokens) {
              values = values.concat(walkTokens.call(this, token));
            }
            return values;
          };
        }
        this.defaults = { ...this.defaults, ...opts };
      });
      return this;
    }
    setOptions(opt) {
      this.defaults = { ...this.defaults, ...opt };
      return this;
    }
  }
  _parseMarkdown = new WeakSet();
  parseMarkdown_fn = function(lexer, parser) {
    return (src, options) => {
      const origOpt = { ...options };
      const opt = { ...this.defaults, ...origOpt };
      if (this.defaults.async === true && origOpt.async === false) {
        if (!opt.silent) {
          console.warn("marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.");
        }
        opt.async = true;
      }
      const throwError = __privateMethod(this, _onError, onError_fn).call(this, !!opt.silent, !!opt.async);
      if (typeof src === "undefined" || src === null) {
        return throwError(new Error("marked(): input parameter is undefined or null"));
      }
      if (typeof src !== "string") {
        return throwError(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected"));
      }
      if (opt.hooks) {
        opt.hooks.options = opt;
      }
      if (opt.async) {
        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer(src2, opt)).then((tokens) => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser(tokens, opt)).then((html) => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);
      }
      try {
        if (opt.hooks) {
          src = opt.hooks.preprocess(src);
        }
        const tokens = lexer(src, opt);
        if (opt.walkTokens) {
          this.walkTokens(tokens, opt.walkTokens);
        }
        let html = parser(tokens, opt);
        if (opt.hooks) {
          html = opt.hooks.postprocess(html);
        }
        return html;
      } catch (e) {
        return throwError(e);
      }
    };
  };
  _onError = new WeakSet();
  onError_fn = function(silent, async) {
    return (e) => {
      e.message += "\nPlease report this to https://github.com/markedjs/marked.";
      if (silent) {
        const msg = "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
        if (async) {
          return Promise.resolve(msg);
        }
        return msg;
      }
      if (async) {
        return Promise.reject(e);
      }
      throw e;
    };
  };
  const markedInstance = new Marked();
  function marked(src, opt) {
    return markedInstance.parse(src, opt);
  }
  marked.options = marked.setOptions = function(options) {
    markedInstance.setOptions(options);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.getDefaults = _getDefaults;
  marked.defaults = _defaults;
  marked.use = function(...args) {
    markedInstance.use(...args);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.walkTokens = function(tokens, callback) {
    return markedInstance.walkTokens(tokens, callback);
  };
  marked.parseInline = markedInstance.parseInline;
  marked.Parser = _Parser;
  marked.parser = _Parser.parse;
  marked.Renderer = _Renderer;
  marked.TextRenderer = _TextRenderer;
  marked.Lexer = _Lexer;
  marked.lexer = _Lexer.lex;
  marked.Tokenizer = _Tokenizer;
  marked.Hooks = _Hooks;
  marked.parse = marked;
  marked.options;
  marked.setOptions;
  marked.use;
  marked.walkTokens;
  marked.parseInline;
  _Parser.parse;
  _Lexer.lex;
  const ui = [
    {
      description: "The `k-collection` component is a wrapper around `k-items`\nthat adds sortabilty and pagination to the items.",
      tags: {},
      exportName: "default",
      displayName: "Collection",
      props: [
        {
          name: "columns",
          type: {
            name: "object|array"
          },
          defaultValue: {
            func: true,
            value: "() => ({})"
          }
        },
        {
          name: "empty",
          type: {
            name: "object"
          }
        },
        {
          name: "help",
          description: "Help text to show below the collection",
          type: {
            name: "string"
          }
        },
        {
          name: "items",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "layout",
          description: "Layout of the collection",
          tags: {},
          values: [
            "list",
            "cards"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"list"'
          }
        },
        {
          name: "link",
          description: "Enable/disable item links",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "size",
          description: "Size for items in cards layout",
          tags: {},
          values: [
            "tiny",
            "small",
            "medium",
            "large",
            "huge"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "sortable",
          description: "Whether the collection can be sorted",
          type: {
            name: "boolean"
          }
        },
        {
          name: "pagination",
          type: {
            name: "boolean|object"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "change"
        },
        {
          name: "item"
        },
        {
          name: "sort"
        },
        {
          name: "paginate",
          description: "Emitted when the pagination changes",
          properties: [
            {
              type: {
                names: [
                  "object"
                ]
              },
              name: "pagination"
            }
          ]
        },
        {
          name: "empty"
        },
        {
          name: "action",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "option",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "options",
          scoped: true,
          bindings: [
            {
              name: "item",
              title: "binding"
            },
            {
              name: "index",
              title: "binding"
            }
          ]
        }
      ],
      sourceFiles: [
        "src/components/Collection/Collection.vue"
      ],
      srcFile: "src/components/Collection/Collection.vue"
    },
    {
      description: 'Whenever you have to deal with an "empty" state, such as an empty list or a search without results, you can use the `k-empty` component to make it a bit nicer.',
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-empty icon="image">No images yet</k-empty>'
          }
        ]
      },
      exportName: "default",
      displayName: "Empty",
      props: [
        {
          name: "text",
          description: "Text to show inside the box",
          type: {
            name: "string"
          }
        },
        {
          name: "icon",
          description: "Icon to show inside the box",
          type: {
            name: "string"
          }
        },
        {
          name: "layout",
          description: "Layout for the box",
          tags: {
            types: [
              {
                description: "list, cardlets, cards",
                title: "types"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"list"'
          }
        }
      ],
      events: [
        {
          name: "click"
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Collection/Empty.vue"
      ],
      srcFile: "src/components/Collection/Empty.vue"
    },
    {
      exportName: "default",
      displayName: "Item",
      description: "",
      tags: {},
      props: [
        {
          name: "buttons",
          description: "Additional inline buttons in the item's footer",
          type: {
            name: "array"
          }
        },
        {
          name: "data",
          type: {
            name: "object"
          }
        },
        {
          name: "image",
          type: {
            name: "object|boolean"
          }
        },
        {
          name: "info",
          type: {
            name: "string"
          }
        },
        {
          name: "layout",
          description: "Display layout",
          tags: {},
          values: [
            "list",
            "cards",
            "cardlets"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"list"'
          }
        },
        {
          name: "link",
          type: {
            name: "boolean|string|func"
          }
        },
        {
          name: "options",
          type: {
            name: "array|func|string"
          }
        },
        {
          name: "sortable",
          type: {
            name: "boolean"
          }
        },
        {
          name: "target",
          type: {
            name: "string"
          }
        },
        {
          name: "text",
          type: {
            name: "string"
          }
        },
        {
          name: "width",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "click"
        },
        {
          name: "drag"
        },
        {
          name: "action",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "option",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "image"
        },
        {
          name: "options"
        }
      ],
      sourceFiles: [
        "src/components/Collection/Item.vue"
      ],
      srcFile: "src/components/Collection/Item.vue"
    },
    {
      exportName: "default",
      displayName: "ItemImage",
      description: "",
      tags: {},
      props: [
        {
          name: "image",
          type: {
            name: "object|boolean"
          }
        },
        {
          name: "layout",
          description: "Display layout",
          tags: {},
          values: [
            "list",
            "cards",
            "cardlets"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"list"'
          }
        },
        {
          name: "width",
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Collection/ItemImage.vue"
      ],
      srcFile: "src/components/Collection/ItemImage.vue"
    },
    {
      exportName: "default",
      displayName: "Items",
      description: "",
      tags: {},
      props: [
        {
          name: "columns",
          type: {
            name: "object|array"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "items",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "layout",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"list"'
          }
        },
        {
          name: "link",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "image",
          type: {
            name: "object|boolean"
          },
          defaultValue: {
            func: true,
            value: "() => ({})"
          }
        },
        {
          name: "sortable",
          type: {
            name: "boolean"
          }
        },
        {
          name: "empty",
          description: "Placeholder text and icon for empty state",
          type: {
            name: "string|object"
          }
        },
        {
          name: "size",
          description: "Card sizes",
          tags: {},
          values: [
            "tiny",
            "small",
            "medium",
            "large",
            "huge"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        }
      ],
      events: [
        {
          name: "change"
        },
        {
          name: "sort"
        },
        {
          name: "item"
        },
        {
          name: "hover"
        },
        {
          name: "option",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            },
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous2>"
            }
          ]
        }
      ],
      slots: [
        {
          name: "options",
          scoped: true,
          bindings: [
            {
              name: "item",
              title: "binding"
            },
            {
              name: "index",
              title: "binding"
            }
          ]
        },
        {
          name: "default",
          scoped: true,
          bindings: [
            {
              name: "item",
              title: "binding"
            },
            {
              name: "itemIndex",
              title: "binding"
            }
          ]
        }
      ],
      sourceFiles: [
        "src/components/Collection/Items.vue"
      ],
      srcFile: "src/components/Collection/Items.vue"
    },
    {
      exportName: "default",
      displayName: "ChangesDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "changes",
          type: {
            name: "array"
          }
        },
        {
          name: "loading",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/ChangesDialog.vue"
      ],
      srcFile: "src/components/Dialogs/ChangesDialog.vue"
    },
    {
      exportName: "default",
      displayName: "Dialog",
      description: "Modal dialogs are used in Kirby's Panel in many places for quick actions like adding new pages, changing titles, etc. that don't necessarily need a full new view. You can create your own modals for your fields and other plugins or reuse our existing modals to invoke typical Panel actions.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"default"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "cancel"
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "header"
        },
        {
          name: "default"
        },
        {
          name: "footer"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/Dialog.vue"
      ],
      srcFile: "src/components/Dialogs/Dialog.vue"
    },
    {
      displayName: "Body",
      description: "",
      tags: {},
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Dialogs/Elements/Body.vue"
      ],
      srcFile: "src/components/Dialogs/Elements/Body.vue"
    },
    {
      exportName: "default",
      displayName: "Buttons",
      description: "",
      tags: {},
      props: [
        {
          name: "cancelButton",
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        }
      ],
      events: [
        {
          name: "cancel"
        }
      ],
      sourceFiles: [
        "src/components/Dialogs/Elements/Buttons.vue"
      ],
      srcFile: "src/components/Dialogs/Elements/Buttons.vue"
    },
    {
      exportName: "default",
      displayName: "Fields",
      description: "",
      tags: {},
      props: [
        {
          name: "empty",
          description: "Empty state message if no fields are defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.fields.empty")'
          }
        },
        {
          name: "fields",
          description: "An array or object with all available fields",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "novalidate",
          description: "Skip client side validation (vuelidate).\nValidation is skipped by default in\ndialogs. Native input validation still works though.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          description: "An object with all values for the fields",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        }
      ],
      events: [
        {
          name: "input"
        },
        {
          name: "submit"
        }
      ],
      sourceFiles: [
        "src/components/Dialogs/Elements/Fields.vue"
      ],
      srcFile: "src/components/Dialogs/Elements/Fields.vue"
    },
    {
      displayName: "Footer",
      description: "",
      tags: {},
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Dialogs/Elements/Footer.vue"
      ],
      srcFile: "src/components/Dialogs/Elements/Footer.vue"
    },
    {
      displayName: "Notification",
      description: "",
      tags: {},
      sourceFiles: [
        "src/components/Dialogs/Elements/Notification.vue"
      ],
      srcFile: "src/components/Dialogs/Elements/Notification.vue"
    },
    {
      exportName: "default",
      displayName: "Search",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "placeholder",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("search") + " …"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "search"
        }
      ],
      sourceFiles: [
        "src/components/Dialogs/Elements/Search.vue"
      ],
      srcFile: "src/components/Dialogs/Elements/Search.vue"
    },
    {
      exportName: "default",
      displayName: "Text",
      description: "",
      tags: {},
      props: [
        {
          name: "empty",
          description: "Empty state message if no text is defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.text.empty")'
          }
        },
        {
          name: "text",
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Dialogs/Elements/Text.vue"
      ],
      srcFile: "src/components/Dialogs/Elements/Text.vue"
    },
    {
      exportName: "default",
      displayName: "EmailDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("insert")'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Empty state message if no fields are defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An array or object with all available fields",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => ({\n    href: {\n        label: window.panel.$t("email"),\n        type: "email",\n        icon: "email"\n    },\n    title: {\n        label: window.panel.$t("link.text"),\n        type: "text",\n        icon: "title"\n    }\n})'
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Skip client side validation (vuelidate).\nValidation is skipped by default in\ndialogs. Native input validation still works though.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An object with all values for the fields",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/EmailDialog.vue"
      ],
      srcFile: "src/components/Dialogs/EmailDialog.vue"
    },
    {
      exportName: "default",
      displayName: "ErrorDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "details",
          type: {
            name: "object|array"
          }
        },
        {
          name: "message",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/ErrorDialog.vue"
      ],
      srcFile: "src/components/Dialogs/ErrorDialog.vue"
    },
    {
      displayName: "FiberDialog",
      description: "",
      tags: {},
      sourceFiles: [
        "src/components/Dialogs/FiberDialog.vue"
      ],
      srcFile: "src/components/Dialogs/FiberDialog.vue"
    },
    {
      exportName: "default",
      displayName: "FilesDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "endpoint",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    icon: "image",\n    text: window.panel.$t("dialog.files.empty")\n}'
          }
        },
        {
          name: "fetchParams",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "object"
          }
        },
        {
          name: "item",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "(item) => item"
          }
        },
        {
          name: "max",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "multiple",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          scoped: true,
          bindings: [
            {
              name: "item",
              title: "binding"
            }
          ]
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/ModelsDialog.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/FilesDialog.vue"
      ],
      srcFile: "src/components/Dialogs/FilesDialog.vue"
    },
    {
      exportName: "default",
      displayName: "FormDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("save")'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Empty state message if no fields are defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An array or object with all available fields",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Skip client side validation (vuelidate).\nValidation is skipped by default in\ndialogs. Native input validation still works though.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An object with all values for the fields",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "text",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/FormDialog.vue"
      ],
      srcFile: "src/components/Dialogs/FormDialog.vue"
    },
    {
      exportName: "default",
      displayName: "LanguageDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("save")'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Empty state message if no fields are defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An array or object with all available fields",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Skip client side validation (vuelidate).\nValidation is skipped by default in\ndialogs. Native input validation still works though.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An object with all values for the fields",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "text",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/FormDialog.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/LanguageDialog.vue"
      ],
      srcFile: "src/components/Dialogs/LanguageDialog.vue"
    },
    {
      exportName: "default",
      displayName: "LinkDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("insert")'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Empty state message if no fields are defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An array or object with all available fields",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => ({\n    href: {\n        label: window.panel.$t("link"),\n        type: "link",\n        placeholder: window.panel.$t("url.placeholder"),\n        icon: "url"\n    },\n    title: {\n        label: window.panel.$t("title"),\n        type: "text",\n        icon: "title"\n    },\n    target: {\n        label: window.panel.$t("open.newWindow"),\n        type: "toggle",\n        text: [window.panel.$t("no"), window.panel.$t("yes")]\n    }\n})'
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Skip client side validation (vuelidate).\nValidation is skipped by default in\ndialogs. Native input validation still works though.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An object with all values for the fields",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/LinkDialog.vue"
      ],
      srcFile: "src/components/Dialogs/LinkDialog.vue"
    },
    {
      exportName: "default",
      displayName: "ModelsDialog",
      description: "The Search mixin is intended for all components\nthat feature a query input that should trigger\nrunning a search via a required `search` method.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "delay",
          mixin: {
            name: "search",
            path: "../../mixins/search.js"
          },
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "200"
          }
        },
        {
          name: "hasSearch",
          mixin: {
            name: "search",
            path: "../../mixins/search.js"
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "endpoint",
          type: {
            name: "string"
          }
        },
        {
          name: "empty",
          type: {
            name: "object"
          }
        },
        {
          name: "fetchParams",
          type: {
            name: "object"
          }
        },
        {
          name: "item",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "(item) => item"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "multiple",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "fetched",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "header"
        },
        {
          name: "options",
          scoped: true,
          bindings: [
            {
              name: "item",
              title: "binding"
            }
          ]
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/search.js",
        "src/components/Dialogs/ModelsDialog.vue"
      ],
      srcFile: "src/components/Dialogs/ModelsDialog.vue"
    },
    {
      exportName: "default",
      displayName: "PageCreateDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "string|boolean"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("save")'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Empty state message if no fields are defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An array or object with all available fields",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Skip client side validation (vuelidate).\nValidation is skipped by default in\ndialogs. Native input validation still works though.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An object with all values for the fields",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "text",
          type: {
            name: "string"
          }
        },
        {
          name: "blueprints",
          type: {
            name: "array"
          }
        },
        {
          name: "template",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "default",
          mixin: {
            name: "FormDialog",
            path: "FormDialog.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/FormDialog.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/PageCreateDialog.vue"
      ],
      srcFile: "src/components/Dialogs/PageCreateDialog.vue"
    },
    {
      exportName: "default",
      displayName: "PageMoveDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"default"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/PageMoveDialog.vue"
      ],
      srcFile: "src/components/Dialogs/PageMoveDialog.vue"
    },
    {
      exportName: "default",
      displayName: "PagesDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "endpoint",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    icon: "page",\n    text: window.panel.$t("dialog.pages.empty")\n}'
          }
        },
        {
          name: "fetchParams",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "object"
          }
        },
        {
          name: "item",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "(item) => item"
          }
        },
        {
          name: "max",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "multiple",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          scoped: true,
          bindings: [
            {
              name: "item",
              title: "binding"
            }
          ]
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/ModelsDialog.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/PagesDialog.vue"
      ],
      srcFile: "src/components/Dialogs/PagesDialog.vue"
    },
    {
      exportName: "default",
      displayName: "RemoveDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"trash"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("delete")'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"negative"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"default"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Text",
            path: "Elements/Text.vue"
          },
          description: "Empty state message if no text is defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.text.empty")'
          }
        },
        {
          name: "text",
          mixin: {
            name: "Text",
            path: "Elements/Text.vue"
          },
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Text.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/TextDialog.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/RemoveDialog.vue"
      ],
      srcFile: "src/components/Dialogs/RemoveDialog.vue"
    },
    {
      exportName: "default",
      displayName: "SearchDialog",
      description: "The Search mixin is intended for all components\nthat feature a query input that should trigger\nrunning a search via a required `search` method.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"default"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "delay",
          mixin: {
            name: "search",
            path: "../../mixins/search.js"
          },
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "200"
          }
        },
        {
          name: "hasSearch",
          mixin: {
            name: "search",
            path: "../../mixins/search.js"
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/search.js",
        "src/components/Dialogs/SearchDialog.vue"
      ],
      srcFile: "src/components/Dialogs/SearchDialog.vue"
    },
    {
      exportName: "default",
      displayName: "TextDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"default"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Text",
            path: "Elements/Text.vue"
          },
          description: "Empty state message if no text is defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.text.empty")'
          }
        },
        {
          name: "text",
          mixin: {
            name: "Text",
            path: "Elements/Text.vue"
          },
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Text.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/TextDialog.vue"
      ],
      srcFile: "src/components/Dialogs/TextDialog.vue"
    },
    {
      exportName: "default",
      displayName: "TotpDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => ({\n    text: window.panel.$t("activate"),\n    icon: "lock",\n    theme: "notice"\n})'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"default"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Empty state message if no fields are defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An array or object with all available fields",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "Skip client side validation (vuelidate).\nValidation is skipped by default in\ndialogs. Native input validation still works though.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          description: "An object with all values for the fields",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "qr",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/TotpDialog.vue"
      ],
      srcFile: "src/components/Dialogs/TotpDialog.vue"
    },
    {
      exportName: "default",
      displayName: "UploadDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "string|boolean|object"
          },
          defaultValue: {
            func: true,
            value: '() => {\n    return {\n        icon: "upload",\n        text: window.panel.$t("upload")\n    };\n}'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"default"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/UploadDialog.vue"
      ],
      srcFile: "src/components/Dialogs/UploadDialog.vue"
    },
    {
      exportName: "default",
      displayName: "UploadReplaceDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "string|boolean|object"
          },
          defaultValue: {
            func: true,
            value: '() => {\n    return {\n        icon: "upload",\n        text: window.panel.$t("replace")\n    };\n}'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"default"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "original",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/UploadDialog.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/UploadReplaceDialog.vue"
      ],
      srcFile: "src/components/Dialogs/UploadReplaceDialog.vue"
    },
    {
      exportName: "default",
      displayName: "UsersDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "endpoint",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    icon: "users",\n    text: window.panel.$t("dialog.users.empty")\n}'
          }
        },
        {
          name: "fetchParams",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "object"
          }
        },
        {
          name: "item",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "(item) => ({\n    ...item,\n    key: item.email,\n    info: item.info !== item.text ? item.info : null\n})"
          }
        },
        {
          name: "max",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "multiple",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "ModelsDialog",
            path: "ModelsDialog.vue"
          },
          scoped: true,
          bindings: [
            {
              name: "item",
              title: "binding"
            }
          ]
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/ModelsDialog.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Dialogs/UsersDialog.vue"
      ],
      srcFile: "src/components/Dialogs/UsersDialog.vue"
    },
    {
      exportName: "default",
      displayName: "BlockDrawer",
      description: "The Drawer mixin is intended for all components\nthat extend <k-drawer> It forwards the methods to\nthe <k-drawer> ref. Extending <k-drawer> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "breadcrumb",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "tab",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "tabs",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          }
        },
        {
          name: "id",
          type: {
            name: "string"
          }
        },
        {
          name: "options",
          type: {
            name: "array"
          }
        },
        {
          name: "title",
          type: {
            name: "string"
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("drawer.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "object"
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "object"
          }
        },
        {
          name: "hidden",
          type: {
            name: "boolean"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "crumb"
        },
        {
          name: "input"
        },
        {
          name: "submit"
        },
        {
          name: "tab"
        },
        {
          name: "show"
        },
        {
          name: "prev"
        },
        {
          name: "next"
        },
        {
          name: "remove"
        }
      ],
      slots: [
        {
          name: "default",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Drawers/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Drawers/Elements/Header.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/drawer.js",
        "src/components/Drawers/BlockDrawer.vue"
      ],
      srcFile: "src/components/Drawers/BlockDrawer.vue"
    },
    {
      exportName: "default",
      displayName: "Drawer",
      description: "The Drawer mixin is intended for all components\nthat extend <k-drawer> It forwards the methods to\nthe <k-drawer> ref. Extending <k-drawer> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "breadcrumb",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "tab",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "tabs",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          }
        },
        {
          name: "id",
          type: {
            name: "string"
          }
        },
        {
          name: "options",
          type: {
            name: "array"
          }
        },
        {
          name: "title",
          type: {
            name: "string"
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "submit"
        },
        {
          name: "crumb"
        },
        {
          name: "tab"
        },
        {
          name: "cancel"
        }
      ],
      slots: [
        {
          name: "options"
        },
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Drawers/Elements/Header.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/drawer.js",
        "src/components/Drawers/Drawer.vue"
      ],
      srcFile: "src/components/Drawers/Drawer.vue"
    },
    {
      displayName: "Body",
      description: "",
      tags: {},
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Drawers/Elements/Body.vue"
      ],
      srcFile: "src/components/Drawers/Elements/Body.vue"
    },
    {
      exportName: "default",
      displayName: "Fields",
      description: "",
      tags: {},
      props: [
        {
          name: "empty",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("drawer.fields.empty")'
          }
        },
        {
          name: "fields",
          type: {
            name: "object"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "input"
        },
        {
          name: "submit"
        }
      ],
      sourceFiles: [
        "src/components/Drawers/Elements/Fields.vue"
      ],
      srcFile: "src/components/Drawers/Elements/Fields.vue"
    },
    {
      exportName: "default",
      displayName: "Header",
      description: "",
      tags: {},
      props: [
        {
          name: "breadcrumb",
          type: {
            name: "array"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "tab",
          type: {
            name: "string"
          }
        },
        {
          name: "tabs",
          type: {
            name: "object"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        }
      ],
      events: [
        {
          name: "crumb"
        },
        {
          name: "tab"
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Drawers/Elements/Header.vue"
      ],
      srcFile: "src/components/Drawers/Elements/Header.vue"
    },
    {
      displayName: "Notification",
      description: "",
      tags: {},
      sourceFiles: [
        "src/components/Drawers/Elements/Notification.vue"
      ],
      srcFile: "src/components/Drawers/Elements/Notification.vue"
    },
    {
      exportName: "default",
      displayName: "Tabs",
      description: "",
      tags: {},
      props: [
        {
          name: "tab",
          type: {
            name: "string"
          }
        },
        {
          name: "tabs",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        }
      ],
      events: [
        {
          name: "open"
        }
      ],
      sourceFiles: [
        "src/components/Drawers/Elements/Tabs.vue"
      ],
      srcFile: "src/components/Drawers/Elements/Tabs.vue"
    },
    {
      exportName: "default",
      displayName: "FiberDrawer",
      description: "",
      tags: {},
      sourceFiles: [
        "src/components/Drawers/FiberDrawer.vue"
      ],
      srcFile: "src/components/Drawers/FiberDrawer.vue"
    },
    {
      exportName: "default",
      displayName: "FormDrawer",
      description: "The Drawer mixin is intended for all components\nthat extend <k-drawer> It forwards the methods to\nthe <k-drawer> ref. Extending <k-drawer> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "breadcrumb",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "tab",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "tabs",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          }
        },
        {
          name: "id",
          type: {
            name: "string"
          }
        },
        {
          name: "options",
          type: {
            name: "array"
          }
        },
        {
          name: "title",
          type: {
            name: "string"
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("drawer.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "object"
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "crumb"
        },
        {
          name: "submit"
        },
        {
          name: "tab"
        },
        {
          name: "input"
        }
      ],
      slots: [
        {
          name: "options",
          scoped: true,
          bindings: [
            {
              name: "slot",
              title: "binding"
            }
          ]
        },
        {
          name: "default",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Drawers/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Drawers/Elements/Header.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/drawer.js",
        "src/components/Drawers/FormDrawer.vue"
      ],
      srcFile: "src/components/Drawers/FormDrawer.vue"
    },
    {
      exportName: "default",
      displayName: "StructureDrawer",
      description: "The Drawer mixin is intended for all components\nthat extend <k-drawer> It forwards the methods to\nthe <k-drawer> ref. Extending <k-drawer> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "breadcrumb",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "tab",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "tabs",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          }
        },
        {
          name: "id",
          type: {
            name: "string"
          }
        },
        {
          name: "options",
          type: {
            name: "array"
          }
        },
        {
          name: "title",
          type: {
            name: "string"
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("drawer.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "object"
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "Elements/Fields.vue"
          },
          type: {
            name: "object"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "crumb"
        },
        {
          name: "input"
        },
        {
          name: "submit"
        },
        {
          name: "tab"
        },
        {
          name: "prev"
        },
        {
          name: "next"
        },
        {
          name: "remove"
        }
      ],
      slots: [
        {
          name: "default",
          mixin: {
            name: "Header",
            path: "Elements/Header.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Drawers/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Drawers/Elements/Header.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/drawer.js",
        "src/components/Drawers/StructureDrawer.vue"
      ],
      srcFile: "src/components/Drawers/StructureDrawer.vue"
    },
    {
      description: "",
      tags: {
        deprecated: [
          {
            description: "4.0.0 Use `<k-dropdown-content>` as standalone.",
            title: "deprecated"
          }
        ]
      },
      exportName: "default",
      displayName: "Dropdown",
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Dropdowns/Dropdown.vue"
      ],
      srcFile: "src/components/Dropdowns/Dropdown.vue"
    },
    {
      description: "Dropdowns are constructed with two elements: `<k-dropdown-content>` holds any content shown when opening the dropdown: any number of `<k-dropdown-item>` elements or any other HTML; typically a `<k-button>` then is used to call the `toggle()` method on `<k-dropdown-content>`.",
      tags: {},
      exportName: "default",
      displayName: "DropdownContent",
      props: [
        {
          name: "align",
          tags: {
            deprecated: [
              {
                description: "4.0.0 Use `alignX` instead",
                title: "deprecated"
              }
            ],
            todo: [
              {
                description: "rename `axis` data to `align` when removed",
                title: "todo"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "alignX",
          description: "Default horizontal alignment of the dropdown",
          tags: {},
          values: [
            "start",
            "end",
            "center"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"start"'
          }
        },
        {
          name: "alignY",
          description: "Default vertical alignment of the dropdown",
          tags: {},
          values: [
            "top",
            "bottom"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"bottom"'
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "navigate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "options",
          type: {
            name: "array|func|string"
          }
        },
        {
          name: "theme",
          description: "Visual theme of the dropdown",
          tags: {},
          values: [
            "dark",
            "light"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"dark"'
          }
        }
      ],
      events: [
        {
          name: "action",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close",
          description: "When the dropdown content is closed"
        },
        {
          name: "open",
          description: "When the dropdown content is opened"
        }
      ],
      methods: [
        {
          name: "close",
          description: "Closes the dropdown",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dropdown",
          params: [
            {
              name: "opener"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "toggle",
          description: "Toggles the open state of the dropdown",
          params: [
            {
              name: "opener"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Dropdowns/DropdownContent.vue"
      ],
      srcFile: "src/components/Dropdowns/DropdownContent.vue"
    },
    {
      description: "Item to be used within `<k-dropdown-content>`",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ],
        examples: [
          {
            title: "example",
            content: "<k-dropdown-item>Option A</k-dropdown-item>"
          }
        ]
      },
      exportName: "default",
      displayName: "DropdownItem",
      props: [
        {
          name: "current",
          type: {
            name: "boolean|string"
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          }
        },
        {
          name: "image",
          type: {
            name: "string|object"
          }
        },
        {
          name: "link",
          type: {
            name: "string"
          }
        },
        {
          name: "target",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        },
        {
          name: "upload",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "click",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "default",
          description: "The item's content/text"
        }
      ],
      sourceFiles: [
        "src/components/Dropdowns/DropdownItem.vue"
      ],
      srcFile: "src/components/Dropdowns/DropdownItem.vue"
    },
    {
      exportName: "default",
      displayName: "LanguagesDropdown",
      description: "",
      tags: {},
      sourceFiles: [
        "src/components/Dropdowns/LanguagesDropdown.vue"
      ],
      srcFile: "src/components/Dropdowns/LanguagesDropdown.vue"
    },
    {
      exportName: "default",
      displayName: "OptionsDropdown",
      description: "",
      tags: {},
      props: [
        {
          name: "align",
          description: "Aligment of the dropdown items",
          tags: {},
          values: [
            "left",
            "right"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"right"'
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          description: "Icon for the dropdown button",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"dots"'
          }
        },
        {
          name: "options",
          type: {
            name: "array|func|string"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "text",
          description: "Whether or which text to show\nfor the dropdown button",
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          description: "Visual theme of the dropdown",
          tags: {},
          values: [
            "dark",
            "light"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"dark"'
          }
        },
        {
          name: "size",
          description: "Specific size styling for the button",
          type: {
            name: "string"
          }
        },
        {
          name: "variant",
          description: "Styling variant for the button",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "action",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            },
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous2>"
            }
          ]
        },
        {
          name: "option",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            },
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous2>"
            }
          ]
        }
      ],
      sourceFiles: [
        "src/components/Dropdowns/OptionsDropdown.vue"
      ],
      srcFile: "src/components/Dropdowns/OptionsDropdown.vue"
    },
    {
      exportName: "default",
      displayName: "SelectorDropdown",
      description: "",
      tags: {},
      props: [
        {
          name: "accept",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"all"'
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "ignore",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "search",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "object|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "align",
          type: {
            name: "string"
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "create",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "select",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Selector.vue",
        "src/components/Dropdowns/SelectorDropdown.vue"
      ],
      srcFile: "src/components/Dropdowns/SelectorDropdown.vue"
    },
    {
      description: "The Autocomplete component can be wrapped around any form of input to get an flexible starting point to provide an real-time autocomplete dropdown. We use it for our `TagsInput` component.",
      tags: {},
      exportName: "default",
      displayName: "Autocomplete",
      props: [
        {
          name: "html",
          description: "If set to `true`, the text of the options is rendered as HTML",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "limit",
          description: "Maximum number of displayed results",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "10"
          }
        },
        {
          name: "skip",
          description: "You can pass an array of strings, which should be ignored in the search.",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "options",
          description: "Options for the autocomplete dropdown must be passed as an array of\nobjects. Each object can have as many items as you like, but a text\nitem is required to match agains the query",
          tags: {
            example: [
              {
                description: '[ { text: "this will be searched", id: "anything else is optional" }, ];',
                title: "example"
              }
            ]
          },
          type: {
            name: "array"
          }
        },
        {
          name: "query",
          description: "Term to filter options",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "leave"
        },
        {
          name: "search",
          type: {
            names: [
              "undefined"
            ]
          },
          description: "Search has been performed",
          properties: [
            {
              type: {
                names: [
                  "string"
                ]
              },
              name: "query"
            },
            {
              type: {
                names: [
                  "array"
                ]
              },
              name: "matches",
              description: "all options that match the search query"
            }
          ]
        },
        {
          name: "select",
          type: {
            names: [
              "undefined"
            ]
          },
          description: "New value has been selected",
          properties: [
            {
              type: {
                names: [
                  "object"
                ]
              },
              name: "item",
              description: "option item"
            }
          ]
        }
      ],
      methods: [
        {
          name: "search",
          description: "Opens the dropdown and filters the options",
          params: [
            {
              name: "query",
              type: {
                name: "string"
              },
              description: "search term"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "string"
                },
                name: "query",
                description: "search term"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "default",
          description: "Use to insert your input"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Autocomplete.vue"
      ],
      srcFile: "src/components/Forms/Autocomplete.vue"
    },
    {
      exportName: "default",
      displayName: "Block",
      description: "",
      tags: {},
      props: [
        {
          name: "attrs",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => ({})"
          }
        },
        {
          name: "content",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => ({})"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => ({})"
          }
        },
        {
          name: "fieldset",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "id",
          type: {
            name: "string"
          }
        },
        {
          name: "isBatched",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isFull",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isHidden",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isLastSelected",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isMergable",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isSelected",
          type: {
            name: "boolean"
          }
        },
        {
          name: "name",
          type: {
            name: "string"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "merge"
        },
        {
          name: "selectDown"
        },
        {
          name: "selectUp"
        },
        {
          name: "sortDown"
        },
        {
          name: "sortUp"
        },
        {
          name: "focus",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "append",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "chooseToAppend",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "chooseToConvert",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "chooseToPrepend",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "copy"
        },
        {
          name: "duplicate"
        },
        {
          name: "hide"
        },
        {
          name: "open"
        },
        {
          name: "paste"
        },
        {
          name: "prepend",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "remove",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "show"
        },
        {
          name: "split",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "submit"
        },
        {
          name: "update",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "removeSelected"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/Block.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Block.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "BlockFigure",
      props: [
        {
          name: "caption",
          type: {
            name: "string"
          }
        },
        {
          name: "captionMarks",
          type: {
            name: "boolean|array"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "isEmpty",
          type: {
            name: "boolean"
          }
        },
        {
          name: "emptyIcon",
          type: {
            name: "string"
          }
        },
        {
          name: "emptyText",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "open"
        },
        {
          name: "update"
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/BlockFigure.vue"
      ],
      srcFile: "src/components/Forms/Blocks/BlockFigure.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "BlockOptions",
      props: [
        {
          name: "isBatched",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isEditable",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isFull",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isHidden",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isMergable",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isSplitable",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "copy"
        },
        {
          name: "merge"
        },
        {
          name: "removeSelected"
        },
        {
          name: "open"
        },
        {
          name: "chooseToAppend"
        },
        {
          name: "remove"
        },
        {
          name: "sortUp"
        },
        {
          name: "sortDown"
        },
        {
          name: "chooseToPrepend"
        },
        {
          name: "chooseToConvert"
        },
        {
          name: "split"
        },
        {
          name: "paste"
        },
        {
          name: "<undefined>"
        },
        {
          name: "duplicate"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/BlockOptions.vue"
      ],
      srcFile: "src/components/Forms/Blocks/BlockOptions.vue"
    },
    {
      exportName: "default",
      displayName: "BlockPasteboard",
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"large"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "paste",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Forms/Blocks/BlockPasteboard.vue"
      ],
      srcFile: "src/components/Forms/Blocks/BlockPasteboard.vue"
    },
    {
      exportName: "default",
      displayName: "Blocks",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsets",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsetGroups",
          type: {
            name: "object"
          }
        },
        {
          name: "group",
          type: {
            name: "string"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "click",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/Blocks.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Blocks.vue"
    },
    {
      exportName: "default",
      displayName: "BlockSelector",
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "disabledFieldsets",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "fieldsets",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsetGroups",
          type: {
            name: "object"
          }
        },
        {
          name: "headline",
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "paste",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Forms/Blocks/BlockSelector.vue"
      ],
      srcFile: "src/components/Forms/Blocks/BlockSelector.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "BlockTitle",
      props: [
        {
          name: "fieldset",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "content",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/BlockTitle.vue"
      ],
      srcFile: "src/components/Forms/Blocks/BlockTitle.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "BlockType",
      props: [
        {
          name: "content",
          type: {
            name: "object|array"
          }
        },
        {
          name: "fieldset",
          type: {
            name: "object"
          }
        },
        {
          name: "id",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "open"
        },
        {
          name: "update",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/BlockType.vue"
      ],
      srcFile: "src/components/Forms/Blocks/BlockType.vue"
    },
    {
      description: "",
      displayName: "BlockTypeCode",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Code.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Code.vue"
    },
    {
      description: "",
      displayName: "BlockTypeDefault",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      events: [
        {
          name: "open"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Default.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Default.vue"
    },
    {
      description: "",
      displayName: "BlockTypeFields",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      props: [
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "tabs",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "open",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "update"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Fields.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Fields.vue"
    },
    {
      description: "",
      displayName: "BlockTypeGallery",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      events: [
        {
          name: "update"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Gallery.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Gallery.vue"
    },
    {
      description: "",
      displayName: "BlockTypeHeading",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      events: [
        {
          name: "append",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "split",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Heading.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Heading.vue"
    },
    {
      description: "",
      displayName: "BlockTypeImage",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Image.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Image.vue"
    },
    {
      description: "",
      displayName: "BlockTypeLine",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Line.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Line.vue"
    },
    {
      description: "",
      displayName: "BlockTypeList",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      events: [
        {
          name: "split",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/Types/List.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/List.vue"
    },
    {
      description: "",
      displayName: "BlockTypeMarkdown",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Markdown.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Markdown.vue"
    },
    {
      description: "",
      displayName: "BlockTypeQuote",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Quote.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Quote.vue"
    },
    {
      description: "Preview for the `table` block",
      displayName: "BlockTypeTable",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Table.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Table.vue"
    },
    {
      description: "",
      displayName: "BlockTypeText",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      events: [
        {
          name: "split",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Text.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Text.vue"
    },
    {
      description: "",
      displayName: "BlockTypeVideo",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      sourceFiles: [
        "src/components/Forms/Blocks/Types/Video.vue"
      ],
      srcFile: "src/components/Forms/Blocks/Types/Video.vue"
    },
    {
      description: "We use the counter in many fields to show the character count of an input or the accepted min/max length of items. You can use the counter yourself very easily:",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-counter :count="text.length" :min="2" :max="10" />\n<input :value="text" @input="text = $event.target.value">'
          }
        ]
      },
      exportName: "default",
      displayName: "Counter",
      props: [
        {
          name: "count",
          type: {
            name: "number"
          }
        },
        {
          name: "min",
          type: {
            name: "number"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "required",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Counter.vue"
      ],
      srcFile: "src/components/Forms/Counter.vue"
    },
    {
      exportName: "default",
      displayName: "Field",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "focus"
        },
        {
          name: "blur"
        }
      ],
      slots: [
        {
          name: "header"
        },
        {
          name: "label"
        },
        {
          name: "options"
        },
        {
          name: "counter"
        },
        {
          name: "default"
        },
        {
          name: "footer"
        },
        {
          name: "help"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field.vue"
      ],
      srcFile: "src/components/Forms/Field.vue"
    },
    {
      exportName: "default",
      displayName: "BlocksField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "fieldsets",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsetGroups",
          type: {
            name: "object"
          }
        },
        {
          name: "group",
          type: {
            name: "string"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/BlocksField.vue"
      ],
      srcFile: "src/components/Forms/Field/BlocksField.vue"
    },
    {
      exportName: "default",
      displayName: "CheckboxesField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-checkboxes-input>` for additional information.",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          },
          description: "The value for the input should be provided as array. Each value in the array corresponds with the value in the options. If you provide a string, the string will be split by comma."
        },
        {
          name: "options",
          mixin: {
            name: "options",
            path: "../../../mixins/props/options.js"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "columns",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "1"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "min",
          type: {
            name: "number"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/CheckboxesInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/counter.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/options.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/CheckboxesField.vue"
      ],
      srcFile: "src/components/Forms/Field/CheckboxesField.vue"
    },
    {
      exportName: "default",
      displayName: "ColorField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"pipette"'
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "alpha",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "format",
          tags: {},
          values: [
            "`hex`",
            "`rgb`",
            "`hsl`"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"hex"'
          }
        },
        {
          name: "mode",
          tags: {},
          values: [
            "`picker`",
            "`input`",
            "`options`"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"picker"'
          }
        },
        {
          name: "options",
          description: "Array of color options { value, key }",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "input"
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/ColorInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/ColorField.vue"
      ],
      srcFile: "src/components/Forms/Field/ColorField.vue"
    },
    {
      exportName: "default",
      displayName: "DateField",
      description: "Form field to handle a date/datetime value.\n\nBundles `k-date-input` with `k-calendar` and, optionally,\n`k-time-input` with `k-times`.\n\nHave a look at `<k-field>`, `<k-input>`\nand `<k-datetime-input>` for additional information.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: `<k-date-field :value="date" name="date" label="Date" @input="$emit('input', $event)" />`
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"date"'
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          },
          description: "Icon used for the date input (and calendar dropdown)",
          defaultValue: {
            func: false,
            value: '"calendar"'
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          },
          description: "Value must be provided as ISO date string",
          tags: {
            example: [
              {
                description: "`2012-12-12`",
                title: "example"
              }
            ]
          }
        },
        {
          name: "display",
          description: "Format to parse and display the date",
          tags: {
            example: [
              {
                description: "`MM/DD/YY`",
                title: "example"
              }
            ]
          },
          values: [
            "YYYY",
            "YY",
            "MM",
            "M",
            "DD",
            "D"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"DD.MM.YYYY"'
          }
        },
        {
          name: "max",
          description: "The last allowed date as ISO date string",
          tags: {
            example: [
              {
                description: "`2025-12-31`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "min",
          description: "The first allowed date as ISO date string",
          tags: {
            example: [
              {
                description: "`2020-01-01`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "step",
          description: "Rounding to the nearest step.\nRequires an object with a `unit`\nand a `size` key",
          tags: {
            example: [
              {
                description: "{ unit: 'minute', size: 30 }",
                title: "example"
              }
            ]
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    size: 1,\n    unit: "day"\n}'
          }
        },
        {
          name: "calendar",
          description: "Deactivate the calendar dropdown or not",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "time",
          description: "Time options (e.g. `display`, `icon`, `step`).\nPlease check docs for `k-time-input` props.",
          tags: {
            example: [
              {
                description: `{ display: 'HH:mm', step: { unit: "minute", size: 30 } }`,
                title: "example"
              }
            ]
          },
          type: {
            name: "boolean|object"
          },
          defaultValue: {
            func: true,
            value: "() => ({})"
          }
        },
        {
          name: "times",
          description: "Deactivate the times dropdown or not",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      events: [
        {
          name: "submit"
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/DateInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/DateField.vue"
      ],
      srcFile: "src/components/Forms/Field/DateField.vue"
    },
    {
      exportName: "default",
      displayName: "EmailField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-email-input>` for additional information.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-email-field :value="email" @input="email = $event" name="email" label="Email" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"email"'
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"email"'
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("email.placeholder")'
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"email"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "link",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/EmailInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Field/EmailField.vue"
      ],
      srcFile: "src/components/Forms/Field/EmailField.vue"
    },
    {
      exportName: "default",
      displayName: "FilesField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "info",
          type: {
            name: "string"
          }
        },
        {
          name: "link",
          type: {
            name: "boolean"
          }
        },
        {
          name: "layout",
          description: "Switches the layout of the items",
          tags: {},
          values: [
            "list",
            "cards"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"list"'
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "multiple",
          description: "If false, only a single item can be selected",
          type: {
            name: "boolean"
          }
        },
        {
          name: "parent",
          type: {
            name: "string"
          }
        },
        {
          name: "search",
          type: {
            name: "boolean"
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          }
        },
        {
          name: "text",
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "uploads",
          type: {
            name: "boolean|object|array"
          }
        }
      ],
      events: [
        {
          name: "change"
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field/ModelsField.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/FilesField.vue"
      ],
      srcFile: "src/components/Forms/Field/FilesField.vue"
    },
    {
      displayName: "GapField",
      description: "",
      tags: {},
      sourceFiles: [
        "src/components/Forms/Field/GapField.vue"
      ],
      srcFile: "src/components/Forms/Field/GapField.vue"
    },
    {
      exportName: "default",
      displayName: "HeadlineField",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-headline-field label="This is a headline" />'
          }
        ]
      },
      props: [
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "src/components/Forms/Field/HeadlineField.vue"
      ],
      srcFile: "src/components/Forms/Field/HeadlineField.vue"
    },
    {
      exportName: "default",
      displayName: "InfoField",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-info-field label="Info" text="This is a nice info text" />'
          }
        ]
      },
      props: [
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "icon",
          description: "Sets an icon for the info box.",
          type: {
            name: "string"
          }
        },
        {
          name: "text",
          description: "Sets the info text. You can use HTML here to format the info.",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          description: "The info box can have different styles/themes.",
          tags: {},
          values: [
            "The themes are inherited from the `<k-box>` component."
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"info"'
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "src/components/Forms/Field/InfoField.vue"
      ],
      srcFile: "src/components/Forms/Field/InfoField.vue"
    },
    {
      exportName: "default",
      displayName: "LayoutField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "fieldsetGroups",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsets",
          type: {
            name: "object"
          }
        },
        {
          name: "layouts",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: '[["1/1"]]'
          }
        },
        {
          name: "selector",
          type: {
            name: "object"
          }
        },
        {
          name: "settings",
          type: {
            name: "object"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "input"
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/LayoutField.vue"
      ],
      srcFile: "src/components/Forms/Field/LayoutField.vue"
    },
    {
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: "<k-line-field />"
          }
        ]
      },
      exportName: "default",
      displayName: "LineField",
      sourceFiles: [
        "src/components/Forms/Field/LineField.vue"
      ],
      srcFile: "src/components/Forms/Field/LineField.vue"
    },
    {
      exportName: "default",
      displayName: "LinkField",
      description: "Have a look at `<k-field>` and `<k-input>`",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-link-field :value="link" @input="link = $event" name="link" label="Link" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        },
        {
          name: "options",
          mixin: {
            name: "options",
            path: "../../../mixins/props/options.js"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/options.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/LinkField.vue"
      ],
      srcFile: "src/components/Forms/Field/LinkField.vue"
    },
    {
      exportName: "default",
      displayName: "ListField",
      description: "Have a look at `<k-field>` and `<k-input>` for additional information.",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "breaks",
          type: {
            name: "boolean"
          }
        },
        {
          name: "code",
          type: {
            name: "boolean"
          }
        },
        {
          name: "emptyDocument",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    type: "doc",\n    content: []\n}'
          }
        },
        {
          name: "extensions",
          type: {
            name: "array"
          }
        },
        {
          name: "headings",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: true,
            value: "() => [1, 2, 3, 4, 5, 6]"
          }
        },
        {
          name: "inline",
          type: {
            name: "boolean"
          }
        },
        {
          name: "keys",
          type: {
            name: "object"
          }
        },
        {
          name: "marks",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "nodes",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: '["bulletList", "orderedList"]'
          }
        },
        {
          name: "paste",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "() => () => false"
          }
        },
        {
          name: "toolbar",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    inline: true\n}"
          }
        }
      ],
      events: [
        {
          name: "input"
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/ListInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/WriterInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Writer/Writer.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Field/ListField.vue"
      ],
      srcFile: "src/components/Forms/Field/ListField.vue"
    },
    {
      exportName: "default",
      displayName: "ModelsField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "info",
          type: {
            name: "string"
          }
        },
        {
          name: "link",
          type: {
            name: "boolean"
          }
        },
        {
          name: "layout",
          description: "Switches the layout of the items",
          tags: {},
          values: [
            "list",
            "cards"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"list"'
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "multiple",
          description: "If false, only a single item can be selected",
          type: {
            name: "boolean"
          }
        },
        {
          name: "parent",
          type: {
            name: "string"
          }
        },
        {
          name: "search",
          type: {
            name: "boolean"
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          }
        },
        {
          name: "text",
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "change"
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/ModelsField.vue"
      ],
      srcFile: "src/components/Forms/Field/ModelsField.vue"
    },
    {
      exportName: "default",
      displayName: "MultiselectField",
      description: "Have a look at `<k-tags-field>`.",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string|boolean|number|object|array"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          mixin: {
            name: "TagsInput",
            path: "../Input/TagsInput.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field/TagsField.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TagsInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/counter.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/MultiselectField.vue"
      ],
      srcFile: "src/components/Forms/Field/MultiselectField.vue"
    },
    {
      exportName: "default",
      displayName: "NumberField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-number-input>` for additional information.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-number-field :value="number" @input="number = $event" name="number" label="Number" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "min",
          type: {
            name: "number"
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "step",
          description: "The amount to increment with each input step. This can be a decimal.",
          type: {
            name: "number|string"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/NumberInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/NumberField.vue"
      ],
      srcFile: "src/components/Forms/Field/NumberField.vue"
    },
    {
      exportName: "default",
      displayName: "ObjectField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string|object"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "fields",
          type: {
            name: "object|array"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/ObjectField.vue"
      ],
      srcFile: "src/components/Forms/Field/ObjectField.vue"
    },
    {
      exportName: "default",
      displayName: "PagesField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "info",
          type: {
            name: "string"
          }
        },
        {
          name: "link",
          type: {
            name: "boolean"
          }
        },
        {
          name: "layout",
          description: "Switches the layout of the items",
          tags: {},
          values: [
            "list",
            "cards"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"list"'
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "multiple",
          description: "If false, only a single item can be selected",
          type: {
            name: "boolean"
          }
        },
        {
          name: "parent",
          type: {
            name: "string"
          }
        },
        {
          name: "search",
          type: {
            name: "boolean"
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          }
        },
        {
          name: "text",
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "change"
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field/ModelsField.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/PagesField.vue"
      ],
      srcFile: "src/components/Forms/Field/PagesField.vue"
    },
    {
      exportName: "default",
      displayName: "PasswordField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-password-input>` for additional information.",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"password"'
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"key"'
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "8"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"new-password"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "options"
        },
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/PasswordInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/counter.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Field/PasswordField.vue"
      ],
      srcFile: "src/components/Forms/Field/PasswordField.vue"
    },
    {
      exportName: "default",
      displayName: "RadioField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-radio-input>` for additional information.",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string|number|boolean"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "options",
          mixin: {
            name: "options",
            path: "../../../mixins/props/options.js"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "columns",
          type: {
            name: "number"
          }
        },
        {
          name: "reset",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          mixin: {
            name: "RadioInput",
            path: "../Input/RadioInput.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/RadioInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/options.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/RadioField.vue"
      ],
      srcFile: "src/components/Forms/Field/RadioField.vue"
    },
    {
      exportName: "default",
      displayName: "RangeField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-range-input>` for additional information.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-range-field :value="range" @input="range = $event" name="range" label="Slider" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "default",
          type: {
            name: "number|string"
          }
        },
        {
          name: "max",
          description: "The highest accepted number",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "100"
          }
        },
        {
          name: "min",
          description: "The lowest required number",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "0"
          }
        },
        {
          name: "step",
          description: "The amount to increment when dragging the slider. This can be a decimal.",
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: false,
            value: "1"
          }
        },
        {
          name: "tooltip",
          description: "The slider tooltip can have text before and after the value.",
          type: {
            name: "boolean|object"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return {\n        before: null,\n        after: null\n    };\n}"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          mixin: {
            name: "RangeInput",
            path: "../Input/RangeInput.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/RangeInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/RangeField.vue"
      ],
      srcFile: "src/components/Forms/Field/RangeField.vue"
    },
    {
      exportName: "default",
      displayName: "SelectField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-select-input>` for additional information.",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"angle-down"'
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string|number|boolean"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        },
        {
          name: "options",
          mixin: {
            name: "options",
            path: "../../../mixins/props/options.js"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "ariaLabel",
          type: {
            name: "string"
          }
        },
        {
          name: "default",
          type: {
            name: "string"
          }
        },
        {
          name: "empty",
          description: "The text, that is shown as the first empty option, when the field is not required.",
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/SelectInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/options.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/SelectField.vue"
      ],
      srcFile: "src/components/Forms/Field/SelectField.vue"
    },
    {
      exportName: "default",
      displayName: "SlugField",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-slug-field :value="slug" @input="slug = $event" name="slug" label="Slug" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"text"'
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"url"'
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "allow",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        },
        {
          name: "formData",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "sync",
          type: {
            name: "string"
          }
        },
        {
          name: "path",
          type: {
            name: "string"
          }
        },
        {
          name: "wizard",
          type: {
            name: "boolean|object"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/SlugInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Field/SlugField.vue"
      ],
      srcFile: "src/components/Forms/Field/SlugField.vue"
    },
    {
      exportName: "default",
      displayName: "StructureField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "columns",
          description: "What columns to show in the table",
          type: {
            name: "object"
          }
        },
        {
          name: "duplicate",
          description: "Whether to allow row duplication",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "empty",
          description: "The text, that is shown when the field has no entries.",
          type: {
            name: "string"
          }
        },
        {
          name: "fields",
          description: "Fields for the form",
          type: {
            name: "array|object"
          }
        },
        {
          name: "limit",
          description: "How many rows to show per page",
          type: {
            name: "number"
          }
        },
        {
          name: "max",
          description: "Upper limit of rows allowed",
          type: {
            name: "number"
          }
        },
        {
          name: "min",
          description: "Lower limit of rows required",
          type: {
            name: "number"
          }
        },
        {
          name: "prepend",
          description: "Whether to insert new entries at the top\nof the list instead at the end",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "sortable",
          description: "Whether to allow sorting of rows",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "sortBy",
          description: "Expression by which to sort rows automatically",
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "add",
          description: "Adds new entry",
          params: [
            {
              name: "value"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Focuses the add button",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Edit the structure field entry at `index` position\nin the structure form with field `field` focused",
          params: [
            {
              name: "item",
              type: {
                name: "object"
              }
            },
            {
              name: "field",
              type: {
                name: "string"
              }
            },
            {
              name: "replace"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "object"
                },
                name: "item"
              },
              {
                title: "param",
                type: {
                  name: "string"
                },
                name: "field"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/StructureField.vue"
      ],
      srcFile: "src/components/Forms/Field/StructureField.vue"
    },
    {
      exportName: "default",
      displayName: "TagsField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-tags-input>` for additional information.",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string|boolean|number|object|array"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          mixin: {
            name: "TagsInput",
            path: "../Input/TagsInput.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TagsInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/counter.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/TagsField.vue"
      ],
      srcFile: "src/components/Forms/Field/TagsField.vue"
    },
    {
      exportName: "default",
      displayName: "TelField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-tel-input>`\nfor additional information.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-tel-field :value="tel" @input="tel = $event" name="tel" label="Phone number" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"tel"'
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"phone"'
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("tel.placeholder")'
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"tel"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TelInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Field/TelField.vue"
      ],
      srcFile: "src/components/Forms/Field/TelField.vue"
    },
    {
      exportName: "default",
      displayName: "TextareaField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-textarea-input>`\nfor additional information.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-textarea-field :value="text" @input="text = $event" name="text" label="Text" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "buttons",
          type: {
            name: "boolean|array"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "size",
          description: "Pre-selects the size before auto-sizing kicks in.\nThis can be useful to fill gaps in field layouts.",
          tags: {},
          values: [
            "small",
            "medium",
            "large",
            "huge"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        },
        {
          name: "uploads",
          type: {
            name: "boolean|object|array"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextareaInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/counter.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Field/TextareaField.vue"
      ],
      srcFile: "src/components/Forms/Field/TextareaField.vue"
    },
    {
      exportName: "default",
      displayName: "TextField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-text-input>`\nfor additional information.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-text-field :value="text" @input="text = $event" name="text" label="Boring text" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"text"'
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "options"
        },
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/counter.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Field/TextField.vue"
      ],
      srcFile: "src/components/Forms/Field/TextField.vue"
    },
    {
      exportName: "default",
      displayName: "TimeField",
      description: "Form field to handle a time value.\n\nHave a look at `<k-field>`, `<k-input>`\nand `<k-time-input>` for additional information.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-time-field :value="time" @input="time = $event" name="time" label="Time" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"time"'
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          },
          description: "Icon used for the input (and times dropdown)",
          defaultValue: {
            func: false,
            value: '"clock"'
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          },
          description: "Value must be provided as ISO time string",
          tags: {
            example: [
              {
                description: "`22:33:00`",
                title: "example"
              }
            ]
          }
        },
        {
          name: "display",
          mixin: {
            name: "TimeInput",
            path: "../Input/TimeInput.vue"
          },
          description: "Format to parse and display the time",
          tags: {
            example: [
              {
                description: "`hh:mm a`",
                title: "example"
              }
            ]
          },
          values: [
            "HH",
            "H",
            "hh",
            "h",
            "mm",
            "m",
            "ss",
            "s",
            "a"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"HH:mm"'
          }
        },
        {
          name: "max",
          mixin: {
            name: "TimeInput",
            path: "../Input/TimeInput.vue"
          },
          description: "The last allowed time\nas ISO time string",
          tags: {
            example: [
              {
                description: "`22:30:00`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "min",
          mixin: {
            name: "TimeInput",
            path: "../Input/TimeInput.vue"
          },
          description: "The first allowed time\nas ISO time string",
          tags: {
            example: [
              {
                description: "`01:30:00`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "step",
          mixin: {
            name: "TimeInput",
            path: "../Input/TimeInput.vue"
          },
          description: "Rounding to the nearest step.\nRequires an object with a `unit`\nand a `size` key",
          tags: {
            example: [
              {
                description: "{ unit: 'second', size: 15 }",
                title: "example"
              }
            ]
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    size: 5,\n    unit: "minute"\n}'
          }
        },
        {
          name: "times",
          description: "Deactivate the times dropdown or not",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TimeInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/TimeField.vue"
      ],
      srcFile: "src/components/Forms/Field/TimeField.vue"
    },
    {
      exportName: "default",
      displayName: "ToggleField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-toggle-input>`\nfor additional information.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-toggle-field :value="toggle" @input="toggle = $event" label="Toggle" name="toggle" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "id",
          mixin: {
            name: "ToggleInput",
            path: "../Input/ToggleInput.vue"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "text",
          mixin: {
            name: "ToggleInput",
            path: "../Input/ToggleInput.vue"
          },
          description: "The text to display next to the toggle. This can either be a string\nthat doesn't change when the toggle switches. Or an array with the\nfirst value for the `false` text and the second value for\nthe `true` text.",
          type: {
            name: "array|string"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          mixin: {
            name: "ToggleInput",
            path: "../Input/ToggleInput.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/ToggleInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/ToggleField.vue"
      ],
      srcFile: "src/components/Forms/Field/ToggleField.vue"
    },
    {
      exportName: "default",
      displayName: "TogglesField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string|number|boolean"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "columns",
          type: {
            name: "number"
          }
        },
        {
          name: "grow",
          type: {
            name: "boolean"
          }
        },
        {
          name: "labels",
          type: {
            name: "boolean"
          }
        },
        {
          name: "options",
          type: {
            name: "array"
          }
        },
        {
          name: "reset",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TogglesInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/TogglesField.vue"
      ],
      srcFile: "src/components/Forms/Field/TogglesField.vue"
    },
    {
      exportName: "default",
      displayName: "UrlField",
      description: "Have a look at `<k-field>`, `<k-input>` and `<k-url-input>`\nfor additional information.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-url-field :value="url" @input="url = $event" name="url" label="Url" />'
          }
        ]
      },
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"url"'
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"url"'
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("url.placeholder")'
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"url"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "link",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/UrlInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Field/UrlField.vue"
      ],
      srcFile: "src/components/Forms/Field/UrlField.vue"
    },
    {
      exportName: "default",
      displayName: "UsersField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "info",
          type: {
            name: "string"
          }
        },
        {
          name: "link",
          type: {
            name: "boolean"
          }
        },
        {
          name: "layout",
          description: "Switches the layout of the items",
          tags: {},
          values: [
            "list",
            "cards"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"list"'
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "multiple",
          description: "If false, only a single item can be selected",
          type: {
            name: "boolean"
          }
        },
        {
          name: "parent",
          type: {
            name: "string"
          }
        },
        {
          name: "search",
          type: {
            name: "boolean"
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          }
        },
        {
          name: "text",
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "change"
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field/ModelsField.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Field/UsersField.vue"
      ],
      srcFile: "src/components/Forms/Field/UsersField.vue"
    },
    {
      exportName: "default",
      displayName: "WriterField",
      description: "",
      tags: {},
      props: [
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "help",
          mixin: {
            name: "help",
            path: "../../../mixins/props/help.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          mixin: {
            name: "label",
            path: "../../../mixins/props/label.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "counter",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "input",
          type: {
            name: "string|number"
          }
        },
        {
          name: "translate",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "breaks",
          type: {
            name: "boolean"
          }
        },
        {
          name: "code",
          type: {
            name: "boolean"
          }
        },
        {
          name: "emptyDocument",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    type: "doc",\n    content: []\n}'
          }
        },
        {
          name: "extensions",
          type: {
            name: "array"
          }
        },
        {
          name: "headings",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: true,
            value: "() => [1, 2, 3, 4, 5, 6]"
          }
        },
        {
          name: "inline",
          type: {
            name: "boolean"
          }
        },
        {
          name: "keys",
          type: {
            name: "object"
          }
        },
        {
          name: "marks",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "nodes",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: true,
            value: '() => ["heading", "bulletList", "orderedList"]'
          }
        },
        {
          name: "paste",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "() => () => false"
          }
        },
        {
          name: "toolbar",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    inline: true\n}"
          }
        }
      ],
      events: [
        {
          name: "input"
        },
        {
          name: "focus",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "blur",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        }
      ],
      slots: [
        {
          name: "header",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "counter",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "default",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "footer",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "help",
          mixin: {
            name: "Field",
            path: "../Field.vue"
          }
        },
        {
          name: "before",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "after",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Input",
            path: "../Input.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Field.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/WriterInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Writer/Writer.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/counter.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/help.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/label.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Field/WriterField.vue"
      ],
      srcFile: "src/components/Forms/Field/WriterField.vue"
    },
    {
      description: "The Fieldset component is a wrapper around manual field component creation. You simply pass it an fields object and all field components will automatically be created including a nice field grid. This is the ideal starting point if you want an easy way to create fields without having to deal with a full form element.",
      tags: {},
      exportName: "default",
      displayName: "Fieldset",
      props: [
        {
          name: "config",
          type: {
            name: "object"
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          }
        },
        {
          name: "fields",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "novalidate",
          description: "If `true`, form fields won't show their validation status on the fly.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        }
      ],
      events: [
        {
          name: "focus"
        },
        {
          name: "submit"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            },
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous2>"
            }
          ]
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focus a specific field in the fieldset or the first one if no name is given",
          params: [
            {
              name: "name",
              type: {
                name: "string"
              },
              description: "field name to focus"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "string"
                },
                name: "name",
                description: "field name to focus"
              }
            ]
          }
        },
        {
          name: "hasFieldType",
          description: "Check if a particular field type exists",
          params: [
            {
              name: "type",
              type: {
                name: "string"
              },
              description: "field type"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "string"
                },
                name: "type",
                description: "field type"
              }
            ]
          }
        },
        {
          name: "hasField",
          description: "Check if a field with the given name exists in the fieldset",
          params: [
            {
              name: "name",
              type: {
                name: "string"
              },
              description: "field name"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "string"
                },
                name: "name",
                description: "field name"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Fieldset.vue"
      ],
      srcFile: "src/components/Forms/Fieldset.vue"
    },
    {
      description: 'The Form component takes a fields definition and a value to create a full featured form with grid and everything. If you "just" need the fields, go for the `<k-fieldset>` component instead.',
      tags: {},
      exportName: "default",
      displayName: "Form",
      props: [
        {
          name: "disabled",
          description: "Whether the form is disabled",
          type: {
            name: "boolean"
          }
        },
        {
          name: "config",
          type: {
            name: "object"
          }
        },
        {
          name: "fields",
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "novalidate",
          description: "If `true`, form fields won't show their validation status on the fly.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            },
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous2>"
            }
          ]
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          },
          description: "When the form is submitted. This can be done in most inputs by hitting enter. It can also be triggered by a field component by firing a `submit` event. This will bubble up to the form and trigger a submit there as well. This is used in the textarea component for example to link the `cmd+enter` shortcut to a submit.",
          properties: [
            {
              type: {
                names: [
                  "object"
                ]
              },
              name: "value",
              description: "all field values"
            }
          ]
        },
        {
          name: "focus",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            },
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous2>"
            }
          ]
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focus a specific field in the form or the first one if no name is given",
          params: [
            {
              name: "name",
              type: {
                name: "string"
              },
              description: "field name to focus"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "string"
                },
                name: "name",
                description: "field name to focus"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "Submit the form",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          description: "Add something above the form"
        },
        {
          name: "default",
          description: "If you want to replace the default fieldset"
        },
        {
          name: "footer",
          description: "Add something below the form"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Form.vue"
      ],
      srcFile: "src/components/Forms/Form.vue"
    },
    {
      exportName: "default",
      displayName: "FormButtons",
      description: "",
      tags: {},
      props: [
        {
          name: "lock",
          type: {
            name: "boolean|object"
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/FormButtons.vue"
      ],
      srcFile: "src/components/Forms/FormButtons.vue"
    },
    {
      exportName: "default",
      displayName: "Input",
      description: "",
      tags: {},
      props: [
        {
          name: "after",
          mixin: {
            name: "after",
            path: "../../mixins/props/after.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "before",
          mixin: {
            name: "before",
            path: "../../mixins/props/before.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "invalid",
          mixin: {
            name: "invalid",
            path: "../../mixins/props/invalid.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          }
        },
        {
          name: "icon",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "novalidate",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "string|boolean|number|object|array"
          },
          defaultValue: {
            func: false,
            value: "null"
          }
        }
      ],
      events: [
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      slots: [
        {
          name: "before"
        },
        {
          name: "default"
        },
        {
          name: "after"
        },
        {
          name: "icon"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/after.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/before.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/invalid.js",
        "src/components/Forms/Input.vue"
      ],
      srcFile: "src/components/Forms/Input.vue"
    },
    {
      exportName: "default",
      displayName: "AlphaInput",
      description: "",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-alpha-input :value="value" @input="value = $event" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "default",
          type: {
            name: "number|string"
          }
        },
        {
          name: "max",
          description: "The highest accepted number",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "1"
          }
        },
        {
          name: "min",
          description: "The lowest required number",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "0"
          }
        },
        {
          name: "step",
          description: "The amount to increment when dragging the slider. This can be a decimal.",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "0.01"
          }
        },
        {
          name: "tooltip",
          description: "The slider tooltip can have text before and after the value.",
          type: {
            name: "boolean|object"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "number|string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/RangeInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/AlphaInput.vue"
      ],
      srcFile: "src/components/Forms/Input/AlphaInput.vue"
    },
    {
      displayName: "CalendarInput",
      description: "The Calendar component is mainly used for our `DateInput` component, but it could be used as stand-alone calendar as well with a little CSS love.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-calendar-input :value="value" @input="value = $event" />'
          }
        ]
      },
      exportName: "default",
      props: [
        {
          name: "max",
          description: "The last allowed date",
          tags: {
            example: [
              {
                description: "`2020-12-31`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "min",
          description: "The first allowed date",
          tags: {
            example: [
              {
                description: "`2020-01-01`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          description: "ISO date/datetime string",
          tags: {
            example: [
              {
                description: "`2020-03-05`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "src/components/Forms/Input/CalendarInput.vue"
      ],
      srcFile: "src/components/Forms/Input/CalendarInput.vue"
    },
    {
      exportName: "default",
      displayName: "CheckboxesInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "options",
          mixin: {
            name: "options",
            path: "../../../mixins/props/options.js"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "columns",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "1"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "min",
          type: {
            name: "number"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          description: "The value for the input should be provided as array. Each value in the array corresponds with the value in the options. If you provide a string, the string will be split by comma.",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/options.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/CheckboxesInput.vue"
      ],
      srcFile: "src/components/Forms/Input/CheckboxesInput.vue"
    },
    {
      exportName: "default",
      displayName: "CheckboxInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="checkbox" @input="checkbox = $event" type="checkbox" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "checked",
          type: {
            name: "boolean"
          }
        },
        {
          name: "info",
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"checkbox"'
          }
        },
        {
          name: "value",
          type: {
            name: "boolean|number|string"
          }
        },
        {
          name: "variant",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input"
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/ChoiceInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/CheckboxInput.vue"
      ],
      srcFile: "src/components/Forms/Input/CheckboxInput.vue"
    },
    {
      exportName: "default",
      displayName: "ChoiceInput",
      description: "",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-choice-input :value="value" @input="value = $event" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "checked",
          type: {
            name: "boolean"
          }
        },
        {
          name: "info",
          type: {
            name: "string"
          }
        },
        {
          name: "label",
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"checkbox"'
          }
        },
        {
          name: "value",
          type: {
            name: "boolean|number|string"
          }
        },
        {
          name: "variant",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input"
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/ChoiceInput.vue"
      ],
      srcFile: "src/components/Forms/Input/ChoiceInput.vue"
    },
    {
      exportName: "default",
      displayName: "ColorInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "alpha",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "format",
          tags: {},
          values: [
            "`hex`",
            "`rgb`",
            "`hsl`"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"hex"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        },
        {
          name: "submit"
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/ColorInput.vue"
      ],
      srcFile: "src/components/Forms/Input/ColorInput.vue"
    },
    {
      exportName: "default",
      displayName: "ColornameInput",
      description: "",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-colorname-input :value="value" @input="value = $event" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autocomplete",
          mixin: {
            name: "autocomplete",
            path: "../../../mixins/props/autocomplete.js"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"false"'
          }
        },
        {
          name: "ariaLabel",
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"text"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        },
        {
          name: "alpha",
          description: "Add the alpha value to the color name",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "format",
          tags: {},
          values: [
            "`hex`",
            "`rgb`",
            "`hsl`"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"hex"'
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/StringInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autocomplete.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/ColornameInput.vue"
      ],
      srcFile: "src/components/Forms/Input/ColornameInput.vue"
    },
    {
      exportName: "default",
      displayName: "ColoroptionsInput",
      description: "",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-coloroptions-input :options="options" :value="value" @input="value = $event" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "options",
          mixin: {
            name: "options",
            path: "../../../mixins/props/options.js"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "columns",
          type: {
            name: "number"
          }
        },
        {
          name: "reset",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        },
        {
          name: "format",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"hex"'
          },
          values: [
            "hex",
            "rgb",
            "hsl"
          ]
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/RadioInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/options.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/ColoroptionsInput.vue"
      ],
      srcFile: "src/components/Forms/Input/ColoroptionsInput.vue"
    },
    {
      exportName: "default",
      displayName: "ColorpickerInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "options",
          mixin: {
            name: "options",
            path: "../../../mixins/props/options.js"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "alpha",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "format",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"hex"'
          },
          values: [
            "hex",
            "rgb",
            "hsl"
          ]
        },
        {
          name: "value",
          type: {
            name: "object|string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/options.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/ColorpickerInput.vue"
      ],
      srcFile: "src/components/Forms/Input/ColorpickerInput.vue"
    },
    {
      exportName: "default",
      displayName: "CoordsInput",
      description: "",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-coords-input :value="value" @input="value = $event" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "reset",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    x: 0,\n    y: 0\n}"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/CoordsInput.vue"
      ],
      srcFile: "src/components/Forms/Input/CoordsInput.vue"
    },
    {
      exportName: "default",
      displayName: "DateInput",
      description: "Form input to handle a date value.\n\nComponent allows some degree of free input and parses the\ninput value to a dayjs object. Supports rounding to a\nnearest `step` as well as keyboard interactions\n(altering value by arrow up/down, selecting of\ninput parts via tab key).",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-input :value="date" @input="date = $event" type="date" name="date" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "display",
          description: "Format to parse and display the date",
          tags: {
            example: [
              {
                description: "`MM/DD/YY`",
                title: "example"
              }
            ]
          },
          values: [
            "YYYY",
            "YY",
            "MM",
            "M",
            "DD",
            "D"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"DD.MM.YYYY"'
          }
        },
        {
          name: "max",
          description: "The last allowed date as ISO date string",
          tags: {
            example: [
              {
                description: "`2025-12-31`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "min",
          description: "The first allowed date as ISO date string",
          tags: {
            example: [
              {
                description: "`2020-01-01`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "step",
          description: "Rounding to the nearest step.\nRequires an object with a `unit`\nand a `size` key",
          tags: {
            example: [
              {
                description: "{ unit: 'minute', size: 30 }",
                title: "example"
              }
            ]
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    size: 1,\n    unit: "day"\n}'
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"date"'
          }
        },
        {
          name: "value",
          description: "Value must be provided as ISO date string",
          tags: {
            example: [
              {
                description: "`2012-12-12`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "focus"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        },
        {
          name: "submit"
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "select",
          description: "Sets the cursor selection in the input element\nthat includes the provided part",
          params: [
            {
              name: "part",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "part"
              }
            ],
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "selectFirst",
          description: "Selects the first pattern if available",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "selectLast",
          description: "Selects the last pattern if available",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "selectNext",
          description: "Selects the next pattern if available",
          params: [
            {
              name: "index",
              type: {
                name: "Number"
              }
            }
          ],
          tags: {
            params: [
              {
                title: "param",
                type: {
                  name: "Number"
                },
                name: "index"
              }
            ],
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "selectPrev",
          description: "Selects the previous pattern if available",
          params: [
            {
              name: "index",
              type: {
                name: "Number"
              }
            }
          ],
          tags: {
            params: [
              {
                title: "param",
                type: {
                  name: "Number"
                },
                name: "index"
              }
            ],
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/DateInput.vue"
      ],
      srcFile: "src/components/Forms/Input/DateInput.vue"
    },
    {
      exportName: "default",
      displayName: "EmailInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-email-input :value="email" @input="email = $event" name="email" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("email.placeholder")'
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"email"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"email"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/EmailInput.vue"
      ],
      srcFile: "src/components/Forms/Input/EmailInput.vue"
    },
    {
      exportName: "default",
      displayName: "HueInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-hue-input :value="value" @input="value = $event" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "default",
          type: {
            name: "number|string"
          }
        },
        {
          name: "max",
          description: "The highest accepted number",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "360"
          }
        },
        {
          name: "min",
          description: "The lowest required number",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "0"
          }
        },
        {
          name: "step",
          description: "The amount to increment when dragging the slider. This can be a decimal.",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "1"
          }
        },
        {
          name: "tooltip",
          description: "The slider tooltip can have text before and after the value.",
          type: {
            name: "boolean|object"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "value",
          type: {
            name: "number|string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/RangeInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/HueInput.vue"
      ],
      srcFile: "src/components/Forms/Input/HueInput.vue"
    },
    {
      exportName: "default",
      displayName: "ListInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "breaks",
          type: {
            name: "boolean"
          }
        },
        {
          name: "code",
          type: {
            name: "boolean"
          }
        },
        {
          name: "emptyDocument",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    type: "doc",\n    content: []\n}'
          }
        },
        {
          name: "extensions",
          type: {
            name: "array"
          }
        },
        {
          name: "headings",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: true,
            value: "() => [1, 2, 3, 4, 5, 6]"
          }
        },
        {
          name: "inline",
          type: {
            name: "boolean"
          }
        },
        {
          name: "keys",
          type: {
            name: "object"
          }
        },
        {
          name: "marks",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "nodes",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: '["bulletList", "orderedList"]'
          }
        },
        {
          name: "paste",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "() => () => false"
          }
        },
        {
          name: "toolbar",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    inline: true\n}"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/WriterInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Writer/Writer.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/ListInput.vue"
      ],
      srcFile: "src/components/Forms/Input/ListInput.vue"
    },
    {
      exportName: "default",
      displayName: "MultiselectInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "accept",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"string"'
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "ignore",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "search",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "object|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "draggable",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "layout",
          description: "You can set the layout to `list` to extend the width of each tag\nto 100% and show them in a list. This is handy in narrow columns\nor when a list is a more appropriate design choice for the input\nin general.",
          tags: {},
          values: [
            '"list"'
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "max",
          description: "The maximum number of accepted tags",
          type: {
            name: "number"
          }
        },
        {
          name: "min",
          description: "The minimum number of required tags",
          type: {
            name: "number"
          }
        },
        {
          name: "sort",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "input"
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TagsInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Selector.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Navigation/Tags.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/MultiselectInput.vue"
      ],
      srcFile: "src/components/Forms/Input/MultiselectInput.vue"
    },
    {
      exportName: "default",
      displayName: "NumberInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="number" @input="number = $event" name="number" type="number" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "min",
          type: {
            name: "number"
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "step",
          description: "The amount to increment with each input step. This can be a decimal.",
          type: {
            name: "number|string"
          }
        },
        {
          name: "value",
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/NumberInput.vue"
      ],
      srcFile: "src/components/Forms/Input/NumberInput.vue"
    },
    {
      exportName: "default",
      displayName: "PasswordInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="password" @input="password = $event" name="password" type="password" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"new-password"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"password"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/PasswordInput.vue"
      ],
      srcFile: "src/components/Forms/Input/PasswordInput.vue"
    },
    {
      exportName: "default",
      displayName: "RadioInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "options",
          mixin: {
            name: "options",
            path: "../../../mixins/props/options.js"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "columns",
          type: {
            name: "number"
          }
        },
        {
          name: "reset",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        },
        {
          name: "value",
          type: {
            name: "string|number|boolean"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/options.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/RadioInput.vue"
      ],
      srcFile: "src/components/Forms/Input/RadioInput.vue"
    },
    {
      exportName: "default",
      displayName: "RangeInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="range" @input="range = $event" name="range" type="range" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "default",
          type: {
            name: "number|string"
          }
        },
        {
          name: "max",
          description: "The highest accepted number",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "100"
          }
        },
        {
          name: "min",
          description: "The lowest required number",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "0"
          }
        },
        {
          name: "step",
          description: "The amount to increment when dragging the slider. This can be a decimal.",
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: false,
            value: "1"
          }
        },
        {
          name: "tooltip",
          description: "The slider tooltip can have text before and after the value.",
          type: {
            name: "boolean|object"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return {\n        before: null,\n        after: null\n    };\n}"
          }
        },
        {
          name: "value",
          type: {
            name: "number|string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/RangeInput.vue"
      ],
      srcFile: "src/components/Forms/Input/RangeInput.vue"
    },
    {
      exportName: "default",
      displayName: "SearchInput",
      description: "",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-search-input :value="value" @input="value = $event" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autocomplete",
          mixin: {
            name: "autocomplete",
            path: "../../../mixins/props/autocomplete.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("search") + " …"'
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "ariaLabel",
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"text"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input"
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/StringInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autocomplete.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/SearchInput.vue"
      ],
      srcFile: "src/components/Forms/Input/SearchInput.vue"
    },
    {
      exportName: "default",
      displayName: "SelectInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "options",
          mixin: {
            name: "options",
            path: "../../../mixins/props/options.js"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "ariaLabel",
          type: {
            name: "string"
          }
        },
        {
          name: "default",
          type: {
            name: "string"
          }
        },
        {
          name: "empty",
          description: "The text, that is shown as the first empty option, when the field is not required.",
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          type: {
            name: "string|number|boolean"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "click",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/options.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/SelectInput.vue"
      ],
      srcFile: "src/components/Forms/Input/SelectInput.vue"
    },
    {
      exportName: "default",
      displayName: "SlugInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="slug" @input="slug = $event" name="slug" type="slug" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"text"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        },
        {
          name: "allow",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        },
        {
          name: "formData",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "sync",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/SlugInput.vue"
      ],
      srcFile: "src/components/Forms/Input/SlugInput.vue"
    },
    {
      exportName: "default",
      displayName: "StringInput",
      description: "",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-string-input :value="value" type="text" @input="value = $event" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "autocomplete",
          mixin: {
            name: "autocomplete",
            path: "../../../mixins/props/autocomplete.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "ariaLabel",
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"text"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input"
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autocomplete.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/StringInput.vue"
      ],
      srcFile: "src/components/Forms/Input/StringInput.vue"
    },
    {
      exportName: "default",
      displayName: "TagsInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "accept",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"all"'
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "ignore",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "search",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "object|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Selector",
            path: "../Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "draggable",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "layout",
          description: "You can set the layout to `list` to extend the width of each tag\nto 100% and show them in a list. This is handy in narrow columns\nor when a list is a more appropriate design choice for the input\nin general.",
          tags: {},
          values: [
            '"list"'
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "max",
          description: "The maximum number of accepted tags",
          type: {
            name: "number"
          }
        },
        {
          name: "min",
          description: "The minimum number of required tags",
          type: {
            name: "number"
          }
        },
        {
          name: "sort",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "input"
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Selector.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Navigation/Tags.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/TagsInput.vue"
      ],
      srcFile: "src/components/Forms/Input/TagsInput.vue"
    },
    {
      exportName: "default",
      displayName: "TelInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="tel" @input="tel = $event" name="tel" type="tel" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("tel.placeholder")'
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"tel"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"tel"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/TelInput.vue"
      ],
      srcFile: "src/components/Forms/Input/TelInput.vue"
    },
    {
      exportName: "default",
      displayName: "TextareaInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="text" @input="text = $event" name="text" type="textarea" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "buttons",
          type: {
            name: "boolean|array"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "size",
          description: "Pre-selects the size before auto-sizing kicks in.\nThis can be useful to fill gaps in field layouts.",
          tags: {},
          values: [
            "small",
            "medium",
            "large",
            "huge"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        },
        {
          name: "uploads",
          type: {
            name: "boolean|object|array"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "focus",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/TextareaInput.vue"
      ],
      srcFile: "src/components/Forms/Input/TextareaInput.vue"
    },
    {
      exportName: "default",
      displayName: "TextInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="text" @input="text = $event" name="text" type="text" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"text"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/TextInput.vue"
      ],
      srcFile: "src/components/Forms/Input/TextInput.vue"
    },
    {
      exportName: "default",
      displayName: "TimeInput",
      description: "Form input to handle a time value.\n\nExtends `k-date-input` and makes sure that values\nget parsed and emitted as time-only ISO string `HH:mm:ss`",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-input :value="time" @input="time = $event" name="time" type="time" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "display",
          description: "Format to parse and display the time",
          tags: {
            example: [
              {
                description: "`hh:mm a`",
                title: "example"
              }
            ]
          },
          values: [
            "HH",
            "H",
            "hh",
            "h",
            "mm",
            "m",
            "ss",
            "s",
            "a"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"HH:mm"'
          }
        },
        {
          name: "max",
          description: "The last allowed time\nas ISO time string",
          tags: {
            example: [
              {
                description: "`22:30:00`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "min",
          description: "The first allowed time\nas ISO time string",
          tags: {
            example: [
              {
                description: "`01:30:00`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "step",
          description: "Rounding to the nearest step.\nRequires an object with a `unit`\nand a `size` key",
          tags: {
            example: [
              {
                description: "{ unit: 'second', size: 15 }",
                title: "example"
              }
            ]
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    size: 5,\n    unit: "minute"\n}'
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"time"'
          }
        },
        {
          name: "value",
          description: "Value must be provided as ISO time string",
          tags: {
            example: [
              {
                description: "`22:33:00`",
                title: "example"
              }
            ]
          },
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "focus",
          mixin: {
            name: "DateInput",
            path: "DateInput.vue"
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        },
        {
          name: "submit"
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "select",
          description: "Sets the cursor selection in the input element\nthat includes the provided part",
          params: [
            {
              name: "part",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "part"
              }
            ],
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "selectFirst",
          description: "Selects the first pattern if available",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "selectLast",
          description: "Selects the last pattern if available",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "selectNext",
          description: "Selects the next pattern if available",
          params: [
            {
              name: "index",
              type: {
                name: "Number"
              }
            }
          ],
          tags: {
            params: [
              {
                title: "param",
                type: {
                  name: "Number"
                },
                name: "index"
              }
            ],
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "selectPrev",
          description: "Selects the previous pattern if available",
          params: [
            {
              name: "index",
              type: {
                name: "Number"
              }
            }
          ],
          tags: {
            params: [
              {
                title: "param",
                type: {
                  name: "Number"
                },
                name: "index"
              }
            ],
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/DateInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/TimeInput.vue"
      ],
      srcFile: "src/components/Forms/Input/TimeInput.vue"
    },
    {
      exportName: "default",
      displayName: "TimeoptionsInput",
      description: "The Times component displayes available times to choose from",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-timeoptions-input value="12:12" @input="onInput" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "display",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"HH:mm"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/TimeoptionsInput.vue"
      ],
      srcFile: "src/components/Forms/Input/TimeoptionsInput.vue"
    },
    {
      exportName: "default",
      displayName: "ToggleInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="toggle" @input="toggle = $event" name="toggle" type="toggle" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "text",
          description: "The text to display next to the toggle. This can either be a string\nthat doesn't change when the toggle switches. Or an array with the\nfirst value for the `false` text and the second value for\nthe `true` text.",
          type: {
            name: "array|string"
          }
        },
        {
          name: "value",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/ToggleInput.vue"
      ],
      srcFile: "src/components/Forms/Input/ToggleInput.vue"
    },
    {
      exportName: "default",
      displayName: "TogglesInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "columns",
          type: {
            name: "number"
          }
        },
        {
          name: "grow",
          type: {
            name: "boolean"
          }
        },
        {
          name: "labels",
          type: {
            name: "boolean"
          }
        },
        {
          name: "options",
          type: {
            name: "array"
          }
        },
        {
          name: "reset",
          type: {
            name: "boolean"
          }
        },
        {
          name: "value",
          type: {
            name: "string|number|boolean"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "src/components/Forms/Input/TogglesInput.vue"
      ],
      srcFile: "src/components/Forms/Input/TogglesInput.vue"
    },
    {
      exportName: "default",
      displayName: "UrlInput",
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-input :value="url" @input="url = $event" name="url" type="url" />'
          }
        ]
      },
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "font",
          mixin: {
            name: "font",
            path: "../../../mixins/props/font.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "pattern",
          mixin: {
            name: "pattern",
            path: "../../../mixins/props/pattern.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("url.placeholder")'
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "autocomplete",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"url"'
          }
        },
        {
          name: "preselect",
          type: {
            name: "boolean"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"url"'
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Input/TextInput.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/font.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/pattern.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/UrlInput.vue"
      ],
      srcFile: "src/components/Forms/Input/UrlInput.vue"
    },
    {
      exportName: "default",
      displayName: "WriterInput",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "name",
          mixin: {
            name: "name",
            path: "../../../mixins/props/name.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "required",
          mixin: {
            name: "required",
            path: "../../../mixins/props/required.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "maxlength",
          mixin: {
            name: "maxlength",
            path: "../../../mixins/props/maxlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "minlength",
          mixin: {
            name: "minlength",
            path: "../../../mixins/props/minlength.js"
          },
          type: {
            name: "number"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "breaks",
          type: {
            name: "boolean"
          }
        },
        {
          name: "code",
          type: {
            name: "boolean"
          }
        },
        {
          name: "emptyDocument",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    type: "doc",\n    content: []\n}'
          }
        },
        {
          name: "extensions",
          type: {
            name: "array"
          }
        },
        {
          name: "headings",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: true,
            value: "() => [1, 2, 3, 4, 5, 6]"
          }
        },
        {
          name: "inline",
          type: {
            name: "boolean"
          }
        },
        {
          name: "keys",
          type: {
            name: "object"
          }
        },
        {
          name: "marks",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "nodes",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: true,
            value: '() => ["heading", "bulletList", "orderedList"]'
          }
        },
        {
          name: "paste",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "() => () => false"
          }
        },
        {
          name: "toolbar",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    inline: true\n}"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        }
      ],
      events: [
        {
          name: "input"
        },
        {
          name: "invalid",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "focus",
          description: "Focuses the input element",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Writer/Writer.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/input.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/maxlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/minlength.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/name.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/required.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Input/WriterInput.vue"
      ],
      srcFile: "src/components/Forms/Input/WriterInput.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "Layout",
      props: [
        {
          name: "attrs",
          type: {
            name: "array|object"
          }
        },
        {
          name: "columns",
          type: {
            name: "array"
          }
        },
        {
          name: "disabled",
          type: {
            name: "boolean"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsetGroups",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsets",
          type: {
            name: "object"
          }
        },
        {
          name: "id",
          type: {
            name: "string"
          }
        },
        {
          name: "isSelected",
          type: {
            name: "boolean"
          }
        },
        {
          name: "layouts",
          type: {
            name: "array"
          }
        },
        {
          name: "settings",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "select"
        },
        {
          name: "updateColumn"
        },
        {
          name: "prepend"
        },
        {
          name: "append"
        },
        {
          name: "duplicate"
        },
        {
          name: "change"
        },
        {
          name: "copy"
        },
        {
          name: "paste"
        },
        {
          name: "updateAttrs",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "remove"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Layouts/Layout.vue"
      ],
      srcFile: "src/components/Forms/Layouts/Layout.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "LayoutColumn",
      props: [
        {
          name: "blocks",
          type: {
            name: "array"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsetGroups",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsets",
          type: {
            name: "object"
          }
        },
        {
          name: "id",
          type: {
            name: "string"
          }
        },
        {
          name: "isSelected",
          type: {
            name: "boolean"
          }
        },
        {
          name: "width",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"1/1"'
          }
        }
      ],
      events: [
        {
          name: "input"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Layouts/LayoutColumn.vue"
      ],
      srcFile: "src/components/Forms/Layouts/LayoutColumn.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "Layouts",
      props: [
        {
          name: "disabled",
          type: {
            name: "boolean"
          }
        },
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "endpoints",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsetGroups",
          type: {
            name: "object"
          }
        },
        {
          name: "fieldsets",
          type: {
            name: "object"
          }
        },
        {
          name: "layouts",
          type: {
            name: "array"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "selector",
          type: {
            name: "object"
          }
        },
        {
          name: "settings",
          type: {
            name: "object"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Layouts/Layouts.vue"
      ],
      srcFile: "src/components/Forms/Layouts/Layouts.vue"
    },
    {
      exportName: "default",
      displayName: "LayoutSelector",
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"default"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "label",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: 'function() {\n    return this.$t("field.layout.select");\n}'
          }
        },
        {
          name: "layouts",
          type: {
            name: "array"
          }
        },
        {
          name: "selector",
          type: {
            name: "object"
          }
        },
        {
          name: "value",
          type: {
            name: "array"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Forms/Layouts/LayoutSelector.vue"
      ],
      srcFile: "src/components/Forms/Layouts/LayoutSelector.vue"
    },
    {
      exportName: "default",
      displayName: "Login",
      description: "",
      tags: {},
      props: [
        {
          name: "methods",
          type: {
            name: "array"
          }
        }
      ],
      events: [
        {
          name: "error",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Login.vue"
      ],
      srcFile: "src/components/Forms/Login.vue"
    },
    {
      displayName: "LoginAlert",
      description: "",
      tags: {},
      events: [
        {
          name: "click"
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Forms/LoginAlert.vue"
      ],
      srcFile: "src/components/Forms/LoginAlert.vue"
    },
    {
      exportName: "default",
      displayName: "LoginCode",
      description: "",
      tags: {},
      props: [
        {
          name: "methods",
          type: {
            name: "array"
          }
        },
        {
          name: "pending",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "error",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/LoginCode.vue"
      ],
      srcFile: "src/components/Forms/LoginCode.vue"
    },
    {
      exportName: "default",
      displayName: "ArrayFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "array|string"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "html",
          mixin: {
            name: "Bubbles",
            path: "../../Layout/Bubbles.vue"
          },
          description: "If set to `true`, the `text` is rendered as HTML code,\notherwise as plain text",
          type: {
            name: "boolean"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Previews/BubblesFieldPreview.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Layout/Bubbles.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/ArrayFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/ArrayFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "BubblesFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "array|string"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "html",
          mixin: {
            name: "Bubbles",
            path: "../../Layout/Bubbles.vue"
          },
          description: "If set to `true`, the `text` is rendered as HTML code,\notherwise as plain text",
          type: {
            name: "boolean"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Layout/Bubbles.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/BubblesFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/BubblesFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "ColorFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/ColorFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/ColorFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "DateFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Previews/TextFieldPreview.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/DateFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/DateFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "EmailFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "string|object"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Previews/UrlFieldPreview.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/EmailFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/EmailFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "FilesFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "array|string"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "html",
          mixin: {
            name: "Bubbles",
            path: "../../Layout/Bubbles.vue"
          },
          description: "If set to `true`, the `text` is rendered as HTML code,\notherwise as plain text",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Previews/BubblesFieldPreview.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Layout/Bubbles.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/FilesFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/FilesFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "FlagFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/FlagFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/FlagFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "HtmlFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/HtmlFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/HtmlFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "ImageFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/ImageFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/ImageFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "ObjectFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "array|object"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "html",
          mixin: {
            name: "Bubbles",
            path: "../../Layout/Bubbles.vue"
          },
          description: "If set to `true`, the `text` is rendered as HTML code,\notherwise as plain text",
          type: {
            name: "boolean"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Previews/BubblesFieldPreview.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Layout/Bubbles.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/ObjectFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/ObjectFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "PagesFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "array|string"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "html",
          mixin: {
            name: "Bubbles",
            path: "../../Layout/Bubbles.vue"
          },
          description: "If set to `true`, the `text` is rendered as HTML code,\notherwise as plain text",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Previews/BubblesFieldPreview.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Layout/Bubbles.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/PagesFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/PagesFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "TextFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/TextFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/TextFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "TimeFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Previews/DateFieldPreview.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Previews/TextFieldPreview.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/TimeFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/TimeFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "ToggleFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          }
        }
      ],
      events: [
        {
          name: "input"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/ToggleFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/ToggleFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "UrlFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "string|object"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/UrlFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/UrlFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "UsersFieldPreview",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "field",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "value",
          mixin: {
            name: "fieldPreview",
            path: "../../../mixins/forms/fieldPreview.js"
          },
          type: {
            name: "array|string"
          },
          defaultValue: {
            func: true,
            value: "() => []"
          }
        },
        {
          name: "html",
          mixin: {
            name: "Bubbles",
            path: "../../Layout/Bubbles.vue"
          },
          description: "If set to `true`, the `text` is rendered as HTML code,\notherwise as plain text",
          type: {
            name: "boolean"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Previews/BubblesFieldPreview.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Layout/Bubbles.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/forms/fieldPreview.js",
        "src/components/Forms/Previews/UsersFieldPreview.vue"
      ],
      srcFile: "src/components/Forms/Previews/UsersFieldPreview.vue"
    },
    {
      exportName: "default",
      displayName: "Selector",
      description: "",
      tags: {},
      props: [
        {
          name: "accept",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"all"'
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          }
        },
        {
          name: "ignore",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "label",
          type: {
            name: "string"
          }
        },
        {
          name: "options",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "search",
          type: {
            name: "object|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "create",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "escape"
        },
        {
          name: "pick",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "select",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Selector.vue"
      ],
      srcFile: "src/components/Forms/Selector.vue"
    },
    {
      exportName: "default",
      displayName: "StructureForm",
      description: "",
      tags: {},
      props: [
        {
          name: "fields",
          description: "Form fields",
          type: {
            name: "object"
          }
        },
        {
          name: "index",
          description: "Index of current model/row",
          type: {
            name: "number|string"
          }
        },
        {
          name: "total",
          description: "Total number of rows in field",
          type: {
            name: "number"
          }
        },
        {
          name: "value",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "close"
        },
        {
          name: "paginate"
        },
        {
          name: "discard"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "submit"
        }
      ],
      sourceFiles: [
        "src/components/Forms/Structure/StructureForm.vue"
      ],
      srcFile: "src/components/Forms/Structure/StructureForm.vue"
    },
    {
      exportName: "default",
      displayName: "Toolbar",
      description: "",
      tags: {},
      props: [
        {
          name: "buttons",
          type: {
            name: "boolean|array"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "uploads",
          type: {
            name: "boolean|object|array"
          }
        }
      ],
      events: [
        {
          name: "command",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      sourceFiles: [
        "src/components/Forms/Toolbar.vue"
      ],
      srcFile: "src/components/Forms/Toolbar.vue"
    },
    {
      exportName: "default",
      displayName: "EmailDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("insert")'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "../../Dialogs/Elements/Fields.vue"
          },
          description: "Empty state message if no fields are defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "../../Dialogs/Elements/Fields.vue"
          },
          description: "An array or object with all available fields",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => ({\n    href: {\n        label: window.panel.$t("email"),\n        type: "email",\n        icon: "email"\n    },\n    title: {\n        label: window.panel.$t("link.text"),\n        type: "text",\n        icon: "title"\n    }\n})'
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "../../Dialogs/Elements/Fields.vue"
          },
          description: "Skip client side validation (vuelidate).\nValidation is skipped by default in\ndialogs. Native input validation still works though.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "../../Dialogs/Elements/Fields.vue"
          },
          description: "An object with all values for the fields",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/EmailDialog.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Forms/Toolbar/EmailDialog.vue"
      ],
      srcFile: "src/components/Forms/Toolbar/EmailDialog.vue"
    },
    {
      exportName: "default",
      displayName: "LinkDialog",
      description: "The Dialog mixin is intended for all components\nthat extend <k-dialog> It forwards the methods to\nthe <k-dialog> ref. Extending <k-dialog> directly\ncan lead to breaking methods when the methods are not\nwired correctly to the right elements and refs.",
      tags: {},
      props: [
        {
          name: "cancelButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Cancel Button Settings",
          type: {
            name: "boolean|string|object"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Whether to disable the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The icon type for the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"check"'
          }
        },
        {
          name: "submitButton",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "Submit button settings",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("insert")'
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Buttons",
            path: "../../Dialogs/Elements/Buttons.vue"
          },
          description: "The theme of the submit button",
          tags: {
            deprecated: [
              {
                description: "4.0.0 use the submit button settings instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"positive"'
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"medium"'
          }
        },
        {
          name: "visible",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "empty",
          mixin: {
            name: "Fields",
            path: "../../Dialogs/Elements/Fields.vue"
          },
          description: "Empty state message if no fields are defined",
          type: {
            name: "string"
          },
          defaultValue: {
            func: true,
            value: '() => window.panel.$t("dialog.fields.empty")'
          }
        },
        {
          name: "fields",
          mixin: {
            name: "Fields",
            path: "../../Dialogs/Elements/Fields.vue"
          },
          description: "An array or object with all available fields",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: '() => ({\n    href: {\n        label: window.panel.$t("link"),\n        type: "link",\n        placeholder: window.panel.$t("url.placeholder"),\n        icon: "url"\n    },\n    title: {\n        label: window.panel.$t("link.text"),\n        type: "text",\n        icon: "title"\n    }\n})'
          }
        },
        {
          name: "novalidate",
          mixin: {
            name: "Fields",
            path: "../../Dialogs/Elements/Fields.vue"
          },
          description: "Skip client side validation (vuelidate).\nValidation is skipped by default in\ndialogs. Native input validation still works though.",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Fields",
            path: "../../Dialogs/Elements/Fields.vue"
          },
          description: "An object with all values for the fields",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "submit",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "close"
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "cancel",
          description: "Triggers the `@cancel` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "close",
          description: "Triggers the `@close` event and closes the dialog.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "error",
          description: "Shows the error notification bar in the dialog with the given message",
          params: [
            {
              name: "error",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "error"
              }
            ]
          }
        },
        {
          name: "focus",
          description: "Sets the focus on the first usable input\nor a given input by name",
          params: [
            {
              name: "input",
              type: {
                name: "String"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "String"
                },
                name: "input"
              }
            ]
          }
        },
        {
          name: "input",
          description: "Updates the dialog values",
          params: [
            {
              name: "value",
              type: {
                name: "Object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "Object"
                },
                name: "value"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the dialog and triggers the `@open` event.\nUse ready to fire events that should be run as\nsoon as the dialog is open",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "submit",
          description: "This event is triggered when the submit button is clicked,\nor the form is submitted. It can also be called manually.",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "success",
          description: "Shows the success notification bar in the dialog with the given message",
          params: [
            {
              name: "success"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "union",
                  elements: [
                    {
                      name: "String"
                    },
                    {
                      name: "Object"
                    }
                  ]
                },
                name: "message"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Buttons.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/Elements/Fields.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Dialogs/LinkDialog.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/dialog.js",
        "src/components/Forms/Toolbar/LinkDialog.vue"
      ],
      srcFile: "src/components/Forms/Toolbar/LinkDialog.vue"
    },
    {
      description: "The Upload component is a combination of a native file input\nand a dialog. The native file input is invisible and only\nserves to open the file selector from the OS. Once files are\nselected the dialog will open and show the progress and\npotential upload errors.",
      tags: {
        deprecated: [
          {
            description: "4.0.0 Use the $panel.upload module instead",
            title: "deprecated"
          }
        ]
      },
      exportName: "default",
      displayName: "Upload",
      props: [
        {
          name: "accept",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"*"'
          }
        },
        {
          name: "attributes",
          type: {
            name: "object"
          }
        },
        {
          name: "max",
          type: {
            name: "number"
          }
        },
        {
          name: "method",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"POST"'
          }
        },
        {
          name: "multiple",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "url",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "success",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "open",
          description: "Opens the uploader with the object of given parameters.\nFor all available parameters, check out the component props.\nIf no additional parameters are passed, the properties from\nthe upload element are used.",
          params: [
            {
              name: "params",
              type: {
                name: "object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "object"
                },
                name: "params"
              }
            ],
            deprecated: [
              {
                description: "4.0.0",
                title: "deprecated"
              }
            ]
          }
        },
        {
          name: "drop",
          description: 'Instead of opening the file picker first\nyou can also start the uploader directly,\nby "dropping" a FileList from a drop event\nfor example.',
          params: [
            {
              name: "files",
              type: {
                name: "array"
              }
            },
            {
              name: "params",
              type: {
                name: "object"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "array"
                },
                name: "files"
              },
              {
                title: "param",
                type: {
                  name: "object"
                },
                name: "params"
              }
            ],
            deprecated: [
              {
                description: "4.0.0",
                title: "deprecated"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Upload.vue"
      ],
      srcFile: "src/components/Forms/Upload.vue"
    },
    {
      exportName: "default",
      displayName: "Toolbar",
      description: "",
      tags: {},
      props: [
        {
          name: "editor",
          type: {
            name: "object"
          },
          required: true
        },
        {
          name: "inline",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "marks",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: true,
            value: '() => [\n    "bold",\n    "italic",\n    "underline",\n    "strike",\n    "code",\n    "|",\n    "link",\n    "email",\n    "|",\n    "clear"\n]'
          }
        },
        {
          name: "nodes",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      events: [
        {
          name: "command",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            }
          ]
        }
      ],
      methods: [
        {
          name: "close",
          description: "Closes the inline toolbar",
          params: [
            {
              name: "event",
              type: {
                name: "FocusEvent"
              }
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ],
            params: [
              {
                title: "param",
                type: {
                  name: "FocusEvent"
                },
                name: "event"
              }
            ]
          }
        },
        {
          name: "open",
          description: "Opens the toolbar",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Forms/Writer/Toolbar.vue"
      ],
      srcFile: "src/components/Forms/Writer/Toolbar.vue"
    },
    {
      exportName: "default",
      displayName: "Writer",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "placeholder",
          mixin: {
            name: "placeholder",
            path: "../../../mixins/props/placeholder.js"
          },
          type: {
            name: "number|string"
          }
        },
        {
          name: "spellcheck",
          mixin: {
            name: "spellcheck",
            path: "../../../mixins/props/spellcheck.js"
          },
          type: {
            name: "boolean|string"
          },
          defaultValue: {
            func: false,
            value: '"off"'
          }
        },
        {
          name: "breaks",
          type: {
            name: "boolean"
          }
        },
        {
          name: "code",
          type: {
            name: "boolean"
          }
        },
        {
          name: "emptyDocument",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: '{\n    type: "doc",\n    content: []\n}'
          }
        },
        {
          name: "extensions",
          type: {
            name: "array"
          }
        },
        {
          name: "headings",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: true,
            value: "() => [1, 2, 3, 4, 5, 6]"
          }
        },
        {
          name: "inline",
          type: {
            name: "boolean"
          }
        },
        {
          name: "keys",
          type: {
            name: "object"
          }
        },
        {
          name: "marks",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "nodes",
          type: {
            name: "array|boolean"
          },
          defaultValue: {
            func: true,
            value: '() => ["heading", "bulletList", "orderedList"]'
          }
        },
        {
          name: "paste",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "() => () => false"
          }
        },
        {
          name: "toolbar",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    inline: true\n}"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/placeholder.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/spellcheck.js",
        "src/components/Forms/Writer/Writer.vue"
      ],
      srcFile: "src/components/Forms/Writer/Writer.vue"
    },
    {
      description: "",
      tags: {
        deprecated: [
          {
            description: "4.0.0 Use `<k-frame>` instead",
            title: "deprecated"
          }
        ]
      },
      exportName: "default",
      displayName: "AspectRatio",
      props: [
        {
          name: "cover",
          type: {
            name: "boolean"
          }
        },
        {
          name: "ratio",
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default",
          description: "Content"
        }
      ],
      sourceFiles: [
        "src/components/Layout/AspectRatio.vue"
      ],
      srcFile: "src/components/Layout/AspectRatio.vue"
    },
    {
      description: "The `k-bar` can be used to create  all sorts of toolbars aligning its items accordingly.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: "<k-bar>\n  <div></div>\n	 <div></div>\n</k-bar>"
          }
        ]
      },
      exportName: "default",
      displayName: "Bar",
      props: [
        {
          name: "align",
          description: "How to align items horizontally (if not at `start` which is the default)",
          tags: {},
          values: [
            "`center`",
            "`end`"
          ],
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "left"
        },
        {
          name: "center"
        },
        {
          name: "right"
        },
        {
          name: "default",
          description: "Contents of the bar"
        }
      ],
      sourceFiles: [
        "src/components/Layout/Bar.vue"
      ],
      srcFile: "src/components/Layout/Bar.vue"
    },
    {
      description: "The `<k-box>` component is a multi-purpose box with text. You can use it as a foundation for empty state displays or anything else that needs to be displayed in a box.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-box text="This is a nice box" theme="positive" />'
          }
        ]
      },
      exportName: "default",
      displayName: "Box",
      props: [
        {
          name: "align",
          tags: {},
          values: [
            "center"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "button",
          description: "Whether the box should function as a button",
          type: {
            name: "boolean"
          }
        },
        {
          name: "height",
          description: "CSS value for the height of the box",
          type: {
            name: "string"
          }
        },
        {
          name: "icon",
          description: "Optional icon to display in the box",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          description: "Choose one of the pre-defined styles",
          tags: {},
          values: [
            "positive",
            "negative",
            "notice",
            "warning",
            "info",
            "passive",
            "text",
            "dark",
            "code",
            "empty"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "text",
          description: "Text to display inside the box",
          type: {
            name: "string"
          }
        },
        {
          name: "html",
          description: "If set to `true`, the `text` is rendered as HTML code,  otherwise as plain text",
          type: {
            name: "boolean"
          }
        }
      ],
      slots: [
        {
          name: "default",
          description: "Use instead of `text` prop"
        }
      ],
      sourceFiles: [
        "src/components/Layout/Box.vue"
      ],
      srcFile: "src/components/Layout/Box.vue"
    },
    {
      description: "Bubble to display content in an inline context, e.g. the structure preview table",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        since: [
          {
            description: "3.7.0",
            title: "since"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-bubble text="Hello" />'
          }
        ]
      },
      exportName: "default",
      displayName: "Bubble",
      props: [
        {
          name: "back",
          description: "Sets a custom background color. Either shorthand for Panel default colors or actual CSS value.",
          tags: {
            deprecated: [
              {
                description: "4.0.0 Use `--bubble-back` CSS property instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "color",
          description: "Sets a custom color. Either shorthand for Panel default colors or actual CSS value.",
          tags: {
            deprecated: [
              {
                description: "4.0.0 Use `--bubble-text` CSS property instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "element",
          description: "HTML element to use",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"li"'
          }
        },
        {
          name: "html",
          description: "If set to `true`, the `text` is rendered as HTML code,\notherwise as plain text",
          type: {
            name: "boolean"
          }
        },
        {
          name: "image",
          description: "Optional image to display in the bubble. Used for <k-image-frame>, see for available props",
          type: {
            name: "object"
          }
        },
        {
          name: "link",
          description: "Sets a link on the bubble. Link can be absolute or relative.",
          type: {
            name: "string"
          }
        },
        {
          name: "text",
          description: "Text to display in the bubble",
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "image",
          description: "Replace the default image"
        }
      ],
      sourceFiles: [
        "src/components/Layout/Bubble.vue"
      ],
      srcFile: "src/components/Layout/Bubble.vue"
    },
    {
      exportName: "default",
      description: "Display a list of <k-bubble>",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        since: [
          {
            description: "3.7.0",
            title: "since"
          }
        ],
        examples: [
          {
            title: "example",
            content: `<k-bubbles :bubbles="['Hello', 'World']" />`
          }
        ]
      },
      displayName: "Bubbles",
      props: [
        {
          name: "html",
          description: "If set to `true`, the `text` is rendered as HTML code,\notherwise as plain text",
          type: {
            name: "boolean"
          }
        },
        {
          name: "bubbles",
          description: "Array or string of bubbles, see <k-bubble> for available props.  If string, will be split by comma.",
          type: {
            name: "array|string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Layout/Bubbles.vue"
      ],
      srcFile: "src/components/Layout/Bubbles.vue"
    },
    {
      description: "The Column component can be used within a <k-grid> component to layout elements in a very convenient way. The Grid is based on 12 columns by default and each column can change its width.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-grid>\n  <k-column width="2/3">…</k-column>\n  <k-column width="1/3">…</k-column>\n</k-grid>'
          }
        ]
      },
      exportName: "default",
      displayName: "Column",
      props: [
        {
          name: "width",
          description: "Width of the column in the grid (as a fraction)",
          tags: {},
          values: [
            "e.g. 1/6",
            "1/4",
            "1/3",
            "1/2",
            "2/3"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"1/1"'
          }
        },
        {
          name: "sticky",
          description: "Whether the column should stick to the window edge when scrolling",
          type: {
            name: "boolean"
          }
        }
      ],
      slots: [
        {
          name: "default",
          description: "Column content"
        }
      ],
      sourceFiles: [
        "src/components/Layout/Column.vue"
      ],
      srcFile: "src/components/Layout/Column.vue"
    },
    {
      description: "The dropzone component helps to simplify creating areas, where files can be dropped and uploaded or displayed. You simply wrap it around any other element to create the zone. The dropzone will also create a focus ring around the area when the user drags files over it.",
      tags: {},
      exportName: "default",
      displayName: "Dropzone",
      props: [
        {
          name: "disabled",
          description: "You can deactivate the dropzone with this property",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "drop",
          type: {
            names: [
              "undefined"
            ]
          },
          description: "The drop event is triggered when files are being dropped into the dropzone.",
          properties: [
            {
              type: {
                names: [
                  "array"
                ]
              },
              name: "files",
              description: "The event receives the files list as argument, which can then be used to start an upload for example."
            }
          ]
        }
      ],
      slots: [
        {
          name: "default",
          description: "Everything that should be covered by the dropzone"
        }
      ],
      sourceFiles: [
        "src/components/Layout/Dropzone.vue"
      ],
      srcFile: "src/components/Layout/Dropzone.vue"
    },
    {
      exportName: "default",
      displayName: "ColorFrame",
      description: "Use <k-color-frame> to display a color preview.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        since: [
          {
            description: "4.0.0",
            title: "since"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-color-frame color="#efefef" ratio="1/1" />'
          }
        ]
      },
      props: [
        {
          name: "element",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "HTML element to use as container",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"div"'
          }
        },
        {
          name: "fit",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Object fit value to user for the content",
          tags: {},
          values: [
            "contain",
            "fill",
            "cover"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "ratio",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Aspect ratio for the container. The ratio can be defined freely with the format `widthFraction/heightFraction`.",
          tags: {},
          values: [
            "e.g. `1/1`",
            "`16/9` or `4/5`"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "cover",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "If the content doesn't fit the defined ratio, the component will add additional space around the content. You can change that behavior with the `cover` attribute. If `true`, the image will be cropped to fit the ratio.",
          type: {
            name: "boolean"
          }
        },
        {
          name: "back",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Background for the frame. Either shorthand for Panel default colors or actual CSS value.",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Theme to use for the frame",
          tags: {},
          values: [
            "positive",
            "negative",
            "notice",
            "warning",
            "info",
            "passive",
            "white",
            "dark"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "color",
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Layout/Frame/Frame.vue",
        "src/components/Layout/Frame/ColorFrame.vue"
      ],
      srcFile: "src/components/Layout/Frame/ColorFrame.vue"
    },
    {
      exportName: "default",
      description: "Use <k-frame> to display content in a fixed ratio with background etc.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        since: [
          {
            description: "4.0.0",
            title: "since"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-frame :ratio="1/1" :back="black">💛</k-frame>'
          }
        ]
      },
      displayName: "Frame",
      props: [
        {
          name: "element",
          description: "HTML element to use as container",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"div"'
          }
        },
        {
          name: "fit",
          description: "Object fit value to user for the content",
          tags: {},
          values: [
            "contain",
            "fill",
            "cover"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "ratio",
          description: "Aspect ratio for the container. The ratio can be defined freely with the format `widthFraction/heightFraction`.",
          tags: {},
          values: [
            "e.g. `1/1`",
            "`16/9` or `4/5`"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "cover",
          description: "If the content doesn't fit the defined ratio, the component will add additional space around the content. You can change that behavior with the `cover` attribute. If `true`, the image will be cropped to fit the ratio.",
          type: {
            name: "boolean"
          }
        },
        {
          name: "back",
          description: "Background for the frame. Either shorthand for Panel default colors or actual CSS value.",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          description: "Theme to use for the frame",
          tags: {},
          values: [
            "positive",
            "negative",
            "notice",
            "warning",
            "info",
            "passive",
            "white",
            "dark"
          ],
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Layout/Frame/Frame.vue"
      ],
      srcFile: "src/components/Layout/Frame/Frame.vue"
    },
    {
      exportName: "default",
      displayName: "IconFrame",
      description: "Use <k-icon-frame> to display an icon in a fixed ratio with background etc.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        since: [
          {
            description: "4.0.0",
            title: "since"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-icon-frame icon="home" ratio="1/1" back="black" />'
          }
        ]
      },
      props: [
        {
          name: "element",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "HTML element to use as container",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"div"'
          }
        },
        {
          name: "fit",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Object fit value to user for the content",
          tags: {},
          values: [
            "contain",
            "fill",
            "cover"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "ratio",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Aspect ratio for the container. The ratio can be defined freely with the format `widthFraction/heightFraction`.",
          tags: {},
          values: [
            "e.g. `1/1`",
            "`16/9` or `4/5`"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "cover",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "If the content doesn't fit the defined ratio, the component will add additional space around the content. You can change that behavior with the `cover` attribute. If `true`, the image will be cropped to fit the ratio.",
          type: {
            name: "boolean"
          }
        },
        {
          name: "back",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Background for the frame. Either shorthand for Panel default colors or actual CSS value.",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Theme to use for the frame",
          tags: {},
          values: [
            "positive",
            "negative",
            "notice",
            "warning",
            "info",
            "passive",
            "white",
            "dark"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "alt",
          mixin: {
            name: "Icon",
            path: "../../Misc/Icon.vue"
          },
          description: "For better accessibility of icons,\nyou can pass an additional alt\nattribute like for images.",
          type: {
            name: "string"
          }
        },
        {
          name: "color",
          mixin: {
            name: "Icon",
            path: "../../Misc/Icon.vue"
          },
          description: "Sets a custom color. Either shorthand\nfor Panel default colors or actual CSS value.",
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          mixin: {
            name: "Icon",
            path: "../../Misc/Icon.vue"
          },
          description: "Unset unused props from mixin",
          tags: {
            see: [
              {
                description: "https://getkirby.com/docs/reference/panel/icons",
                title: "see"
              }
            ]
          },
          type: {
            name: "null",
            func: true
          }
        },
        {
          name: "icon",
          description: "Name of the chosen icon",
          tags: {
            see: [
              {
                description: "https://getkirby.com/docs/reference/panel/icons",
                title: "see"
              }
            ]
          },
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Layout/Frame/Frame.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Misc/Icon.vue",
        "src/components/Layout/Frame/IconFrame.vue"
      ],
      srcFile: "src/components/Layout/Frame/IconFrame.vue"
    },
    {
      exportName: "default",
      displayName: "ImageFrame",
      description: "Use <k-image-frame> to display an image in a fixed ratio with background etc.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        since: [
          {
            description: "4.0.0",
            title: "since"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-image-frame src="https://getkirby.com/image.jpg" ratio="16/9" back="pattern" />'
          }
        ]
      },
      props: [
        {
          name: "element",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "HTML element to use as container",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"div"'
          }
        },
        {
          name: "fit",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Object fit value to user for the content",
          tags: {},
          values: [
            "contain",
            "fill",
            "cover"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "ratio",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Aspect ratio for the container. The ratio can be defined freely with the format `widthFraction/heightFraction`.",
          tags: {},
          values: [
            "e.g. `1/1`",
            "`16/9` or `4/5`"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "cover",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "If the content doesn't fit the defined ratio, the component will add additional space around the content. You can change that behavior with the `cover` attribute. If `true`, the image will be cropped to fit the ratio.",
          type: {
            name: "boolean"
          }
        },
        {
          name: "back",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Background for the frame. Either shorthand for Panel default colors or actual CSS value.",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          },
          description: "Theme to use for the frame",
          tags: {},
          values: [
            "positive",
            "negative",
            "notice",
            "warning",
            "info",
            "passive",
            "white",
            "dark"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "alt",
          description: "Just like in regular `<img>` tags, you can and should define a proper `alt` attribute whenever possible. The component will add an empty alt tag when no alt text is specified to be skipped by screen readers. Otherwise the filename would be read.",
          type: {
            name: "string"
          }
        },
        {
          name: "sizes",
          description: "For responsive images, pass the `sizes` attribute",
          type: {
            name: "string"
          }
        },
        {
          name: "src",
          description: "The path/URL to the image file",
          type: {
            name: "string"
          }
        },
        {
          name: "srcset",
          description: "For responsive images, pass the `srcset` attribute",
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default",
          mixin: {
            name: "Frame",
            path: "Frame.vue"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Layout/Frame/Frame.vue",
        "src/components/Layout/Frame/ImageFrame.vue"
      ],
      srcFile: "src/components/Layout/Frame/ImageFrame.vue"
    },
    {
      description: "The <k-grid> component is a CSS grid wrapper. It goes very well together with the <k-column> component, which allows to set column widths in a very comfortable way. Any other element within the Grid component can be used as well though.\n\nCustomised the grid via the `--columns` CSS property on `<k-grid>` and the `--width` and/or `--span` properties on its children.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ]
      },
      exportName: "default",
      displayName: "Grid",
      props: [
        {
          name: "gutter",
          tags: {
            deprecated: [
              {
                description: '4.0.0 Use `style="gap: "` or `variant` prop instead',
                title: "deprecated"
              }
            ]
          },
          values: [
            "small",
            "medium",
            "large",
            "huge"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "variant",
          description: "Variants for common grid-spacing use cases",
          tags: {},
          values: [
            "`columns`",
            "`fields`"
          ],
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Layout/Grid.vue"
      ],
      srcFile: "src/components/Layout/Grid.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "Header",
      props: [
        {
          name: "editable",
          description: "Whether the headline is editable",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "edit"
        }
      ],
      slots: [
        {
          name: "default"
        },
        {
          name: "buttons"
        },
        {
          name: "left"
        },
        {
          name: "right"
        }
      ],
      sourceFiles: [
        "src/components/Layout/Header.vue"
      ],
      srcFile: "src/components/Layout/Header.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "Overlay",
      props: [
        {
          name: "autofocus",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "nested",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"overlay"'
          }
        },
        {
          name: "visible",
          description: "Overlays are only openend on demand with the `open()` method.\nIf you need an overlay that's visible on creation, you can set the\n`visible` prop",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "cancel"
        },
        {
          name: "close"
        },
        {
          name: "open"
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Layout/Overlay.vue"
      ],
      srcFile: "src/components/Layout/Overlay.vue"
    },
    {
      exportName: "default",
      displayName: "Stats",
      description: "",
      tags: {},
      props: [
        {
          name: "reports",
          type: {
            name: "array"
          }
        },
        {
          name: "size",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"large"'
          }
        }
      ],
      sourceFiles: [
        "src/components/Layout/Stats.vue"
      ],
      srcFile: "src/components/Layout/Stats.vue"
    },
    {
      description: "A simple table component with columns and rows",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ]
      },
      exportName: "default",
      displayName: "Table",
      props: [
        {
          name: "columns",
          description: "Configuration which columns to include.\nSupported keys: after, before, label, type, width",
          tags: {
            example: [
              {
                description: '{ title: { label: "title", type: "text" } }',
                title: "example"
              }
            ]
          },
          type: {
            name: "object"
          }
        },
        {
          name: "disabled",
          description: "Whether table is disabled",
          type: {
            name: "boolean"
          }
        },
        {
          name: "fields",
          description: "Optional fields configuration that can be used as columns\n(used for our structure field)",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "empty",
          description: "Text to be shown when table has no rows",
          type: {
            name: "string"
          }
        },
        {
          name: "index",
          description: "Index number for first row",
          type: {
            name: "number|boolean"
          },
          defaultValue: {
            func: false,
            value: "1"
          }
        },
        {
          name: "rows",
          description: "Array of table rows",
          type: {
            name: "array"
          }
        },
        {
          name: "options",
          description: "What options to include in dropdown",
          type: {
            name: "array|func"
          }
        },
        {
          name: "pagination",
          description: "Optional pagination settings",
          type: {
            name: "object|boolean"
          }
        },
        {
          name: "sortable",
          description: "Whether table is sortable",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "paginate"
        },
        {
          name: "change",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "cell",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "header",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "option",
          type: {
            names: [
              "undefined"
            ]
          },
          properties: [
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous1>"
            },
            {
              type: {
                names: [
                  "undefined"
                ]
              },
              name: "<anonymous2>"
            }
          ]
        },
        {
          name: "sort",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "header",
          scoped: true,
          bindings: [
            {
              name: "column",
              title: "binding"
            },
            {
              name: "columnIndex",
              title: "binding"
            },
            {
              name: "label",
              title: "binding"
            }
          ]
        },
        {
          name: "index",
          scoped: true,
          bindings: [
            {
              name: "row",
              title: "binding"
            },
            {
              name: "rowIndex",
              title: "binding"
            }
          ]
        },
        {
          name: "options",
          scoped: true,
          bindings: [
            {
              name: "row",
              title: "binding"
            },
            {
              name: "rowIndex",
              title: "binding"
            }
          ]
        }
      ],
      sourceFiles: [
        "src/components/Layout/Table.vue"
      ],
      srcFile: "src/components/Layout/Table.vue"
    },
    {
      exportName: "default",
      displayName: "TableCell",
      description: "",
      tags: {},
      props: [
        {
          name: "column",
          description: "Column options",
          type: {
            name: "object"
          }
        },
        {
          name: "field",
          description: "Optional corresponding field options",
          type: {
            name: "object"
          }
        },
        {
          name: "mobile",
          description: "Keep cell on mobile",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "row",
          description: "Current row",
          type: {
            name: "object"
          }
        },
        {
          name: "value",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '""'
          }
        }
      ],
      events: [
        {
          name: "input"
        }
      ],
      sourceFiles: [
        "src/components/Layout/TableCell.vue"
      ],
      srcFile: "src/components/Layout/TableCell.vue"
    },
    {
      exportName: "default",
      displayName: "Tabs",
      description: "",
      tags: {},
      props: [
        {
          name: "tab",
          type: {
            name: "string"
          }
        },
        {
          name: "tabs",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Layout/Tabs.vue"
      ],
      srcFile: "src/components/Layout/Tabs.vue"
    },
    {
      description: "",
      tags: {
        deprecated: [
          {
            description: "4.0.0",
            title: "deprecated"
          }
        ]
      },
      exportName: "default",
      displayName: "View",
      props: [
        {
          name: "align",
          description: "To center the content",
          tags: {},
          values: [
            "center"
          ],
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default",
          description: "where your content goes"
        }
      ],
      sourceFiles: [
        "src/components/Layout/View.vue"
      ],
      srcFile: "src/components/Layout/View.vue"
    },
    {
      description: "The Draggable component implements the\n[Vue.Draggable](https://github.com/SortableJS/Vue.Draggable)\nlibrary which is a wrapper for the widespread\n[Sortable.js](https://github.com/RubaXa/Sortable) library.",
      tags: {
        examples: [
          {
            title: "example",
            content: "<k-draggable>\n  <li>Drag me.</li>\n  <li>Or me.</li>\n  <li>Drop it!</li>\n</k-draggable>"
          }
        ]
      },
      exportName: "default",
      displayName: "Draggable",
      props: [
        {
          name: "data",
          type: {
            name: "object"
          }
        },
        {
          name: "element",
          description: "HTML element for the wrapper",
          type: {
            name: "string"
          }
        },
        {
          name: "handle",
          description: "Whether to show a sort handle or, if yes,\nwhich CSS selector to use",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "list",
          description: "Array/object of items to sync when sorting",
          type: {
            name: "array|object"
          }
        },
        {
          name: "move",
          type: {
            name: "func"
          }
        },
        {
          name: "options",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "change"
        },
        {
          name: "sort"
        },
        {
          name: "end",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "start",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "default",
          description: "Items to be sortable via drag and drop"
        },
        {
          name: "footer",
          description: "Non-sortable footer"
        }
      ],
      sourceFiles: [
        "src/components/Misc/Draggable.vue"
      ],
      srcFile: "src/components/Misc/Draggable.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "ErrorBoundary",
      slots: [
        {
          name: "error",
          bindings: []
        },
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Misc/ErrorBoundary.vue"
      ],
      srcFile: "src/components/Misc/ErrorBoundary.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "Fatal",
      props: [
        {
          name: "html",
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Misc/Fatal.vue"
      ],
      srcFile: "src/components/Misc/Fatal.vue"
    },
    {
      exportName: "default",
      description: "Display any icon from the Panel's icon set. To combine it with an aspect ratio, background etc. use `<k-icon-frame>`",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-icon type="edit" />'
          }
        ]
      },
      displayName: "Icon",
      props: [
        {
          name: "alt",
          description: "For better accessibility of icons,\nyou can pass an additional alt\nattribute like for images.",
          type: {
            name: "string"
          }
        },
        {
          name: "color",
          description: "Sets a custom color. Either shorthand\nfor Panel default colors or actual CSS value.",
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          description: "Name of the chosen icon",
          tags: {
            see: [
              {
                description: "https://getkirby.com/docs/reference/panel/icons",
                title: "see"
              }
            ]
          },
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Misc/Icon.vue"
      ],
      srcFile: "src/components/Misc/Icon.vue"
    },
    {
      description: "Component to load all icons from plugins",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "Icons",
      sourceFiles: [
        "src/components/Misc/Icons.vue"
      ],
      srcFile: "src/components/Misc/Icons.vue"
    },
    {
      description: "",
      tags: {
        deprecated: [
          {
            description: '4.0.0 Use `<k-icon type="loader" />` instead',
            title: "deprecated"
          }
        ],
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "Loader",
      sourceFiles: [
        "src/components/Misc/Loader.vue"
      ],
      srcFile: "src/components/Misc/Loader.vue"
    },
    {
      description: "Displays notification from `panel.notification`",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "Notification",
      sourceFiles: [
        "src/components/Misc/Notification.vue"
      ],
      srcFile: "src/components/Misc/Notification.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "OfflineWarning",
      sourceFiles: [
        "src/components/Misc/OfflineWarning.vue"
      ],
      srcFile: "src/components/Misc/OfflineWarning.vue"
    },
    {
      description: "A simple progress bar that we mostly use it in the upload dialog",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-progress :value="10" />'
          }
        ]
      },
      exportName: "default",
      displayName: "Progress",
      props: [
        {
          name: "value",
          description: "Current value of the the progress bar",
          tags: {},
          values: [
            "0-100"
          ],
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "0"
          }
        }
      ],
      sourceFiles: [
        "src/components/Misc/Progress.vue"
      ],
      srcFile: "src/components/Misc/Progress.vue"
    },
    {
      description: "Icon used as handle to drag elements inside the sortable context of `<k-draggable>` with corresponding hover styles.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: "<k-sort-handle />"
          }
        ]
      },
      exportName: "default",
      displayName: "SortHandle",
      sourceFiles: [
        "src/components/Misc/SortHandle.vue"
      ],
      srcFile: "src/components/Misc/SortHandle.vue"
    },
    {
      exportName: "default",
      displayName: "Breadcrumb",
      description: "",
      tags: {},
      props: [
        {
          name: "crumbs",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "label",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"Breadcrumb"'
          }
        },
        {
          name: "view",
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "src/components/Navigation/Breadcrumb.vue"
      ],
      srcFile: "src/components/Navigation/Breadcrumb.vue"
    },
    {
      exportName: "default",
      displayName: "Browser",
      description: "",
      tags: {},
      props: [
        {
          name: "items",
          type: {
            name: "array"
          }
        },
        {
          name: "name",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"items"'
          }
        },
        {
          name: "selected",
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"radio"'
          }
        }
      ],
      events: [
        {
          name: "select"
        }
      ],
      sourceFiles: [
        "src/components/Navigation/Browser.vue"
      ],
      srcFile: "src/components/Navigation/Browser.vue"
    },
    {
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-button icon="check">Save</k-button>'
          }
        ]
      },
      exportName: "default",
      displayName: "Button",
      props: [
        {
          name: "autofocus",
          description: "Sets autofocus on button (when supported by element)",
          type: {
            name: "boolean"
          }
        },
        {
          name: "click",
          description: "Pass instead of a link URL to be triggered on clicking the button",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "current",
          description: "Sets the `aria-current` attribute.\nEspecially useful in connection with the `link` attribute.",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "dialog",
          description: "Name/path of a dialog to open on click",
          type: {
            name: "string"
          }
        },
        {
          name: "disabled",
          description: "A disabled button will have no pointer events and\nthe opacity is be reduced.",
          type: {
            name: "boolean"
          }
        },
        {
          name: "drawer",
          description: "Name/path of a drawer to open on click",
          type: {
            name: "string"
          }
        },
        {
          name: "dropdown",
          description: "Whether the button opens a dropdown",
          type: {
            name: "boolean"
          }
        },
        {
          name: "element",
          description: "Force which HTML element to use",
          type: {
            name: "string"
          }
        },
        {
          name: "icon",
          description: "Adds an icon to the button.",
          type: {
            name: "string"
          }
        },
        {
          name: "id",
          type: {
            name: "string|number"
          }
        },
        {
          name: "link",
          description: "If the link attribute is set, the button will be represented\nas a proper `a` tag with `link`'s value as `href` attribute.",
          type: {
            name: "string"
          }
        },
        {
          name: "responsive",
          description: "A responsive button will hide the button text on smaller screens\nautomatically and only keep the icon. An icon must be set in this case.\nIf set to `text`, the icon will be hidden instead.",
          type: {
            name: "boolean|string"
          }
        },
        {
          name: "rel",
          description: "`rel` attribute for when using with `link`",
          type: {
            name: "string"
          }
        },
        {
          name: "role",
          description: "`role` attribute for when using with `link`",
          type: {
            name: "string"
          }
        },
        {
          name: "selected",
          description: "Sets the `aria-selected` attribute.",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "size",
          description: "Specific sizes for buttong styling",
          tags: {},
          values: [
            "`xs`",
            "`sm`"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "target",
          description: "In connection with the `link` attribute, you can also set the\ntarget of the link. This does not apply to regular buttons.",
          type: {
            name: "string"
          }
        },
        {
          name: "tabindex",
          type: {
            name: "string"
          }
        },
        {
          name: "text",
          description: "The button text",
          type: {
            name: "string|number"
          }
        },
        {
          name: "theme",
          description: "With the theme you can control the general design of the button.",
          type: {
            name: "string"
          }
        },
        {
          name: "title",
          description: "The title attribute can be used to add additional text\nto the button, which is shown on mouseover.",
          type: {
            name: "string"
          }
        },
        {
          name: "tooltip",
          tags: {
            deprecated: [
              {
                description: "4.0.0 Use the `title` prop instead",
                title: "deprecated"
              }
            ]
          },
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          description: "The type attribute sets the button type like in HTML.",
          tags: {},
          values: [
            "button",
            "submit",
            "reset"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"button"'
          }
        },
        {
          name: "variant",
          description: "Styling variants for the button",
          tags: {},
          values: [
            "`filled`",
            "`dimmed`"
          ],
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "click",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Navigation/Button.vue"
      ],
      srcFile: "src/components/Navigation/Button.vue"
    },
    {
      description: "",
      tags: {
        deprecated: [
          {
            description: '4.0.0 `<k-button-disabled>` has been deprecated and will be removed in v5. Use `<k-button :disabled="true">` instead.',
            title: "deprecated"
          }
        ]
      },
      exportName: "default",
      displayName: "ButtonDisabled",
      props: [
        {
          name: "icon",
          type: {
            name: "string"
          }
        },
        {
          name: "id",
          type: {
            name: "string|number"
          }
        },
        {
          name: "responsive",
          type: {
            name: "boolean"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        },
        {
          name: "tooltip",
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Navigation/ButtonDisabled.vue"
      ],
      srcFile: "src/components/Navigation/ButtonDisabled.vue"
    },
    {
      description: "The Button Group should always be used when two or more buttons are positioned next to each other. The Button Group takes care of consistent margins between buttons.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-button-group>\n  <k-button icon="edit">Edit</k-button>\n  <k-button icon="trash">Delete</k-button>\n</k-button-group>'
          }
        ]
      },
      exportName: "default",
      displayName: "ButtonGroup",
      props: [
        {
          name: "buttons",
          description: "Either pass the buttons as default slot\nor as an array to this prop",
          type: {
            name: "array"
          }
        },
        {
          name: "layout",
          description: "Styling/layout variations",
          tags: {},
          values: [
            "`collapsed`",
            "`dropdown`"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "variant",
          description: "Styling variants - see `<k-button>` for details.\nDefault for buttons if not defined individually.",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          description: "Color theme - see `<k-button>` for details.\nDefault for buttons if not defined individually.",
          type: {
            name: "string"
          }
        },
        {
          name: "size",
          description: "Specific size styling - see `<k-button>` for details.\nDefault for buttons if not defined individually.",
          type: {
            name: "string"
          }
        },
        {
          name: "responsive",
          description: "Whether to show text on small screens - see `<k-button>` for details.\nDefault for buttons if not defined individually.",
          type: {
            name: "boolean"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Navigation/ButtonGroup.vue"
      ],
      srcFile: "src/components/Navigation/ButtonGroup.vue"
    },
    {
      description: "",
      tags: {
        deprecated: [
          {
            description: '4.0.0 `<k-button-link>` has been deprecated and will be removed in v5. Use `<k-button link="https//getkirby.com">` instead.',
            title: "deprecated"
          }
        ]
      },
      exportName: "default",
      displayName: "ButtonLink",
      props: [
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "current",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          }
        },
        {
          name: "id",
          type: {
            name: "string|number"
          }
        },
        {
          name: "link",
          type: {
            name: "string"
          }
        },
        {
          name: "rel",
          type: {
            name: "string"
          }
        },
        {
          name: "responsive",
          type: {
            name: "boolean"
          }
        },
        {
          name: "role",
          type: {
            name: "string"
          }
        },
        {
          name: "target",
          type: {
            name: "string"
          }
        },
        {
          name: "tabindex",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        },
        {
          name: "tooltip",
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Navigation/ButtonLink.vue"
      ],
      srcFile: "src/components/Navigation/ButtonLink.vue"
    },
    {
      description: "",
      tags: {
        deprecated: [
          {
            description: "4.0.0 `<k-button-native>` has been deprecated and will be removed in v5. Use `<k-button>` instead.",
            title: "deprecated"
          }
        ]
      },
      exportName: "default",
      displayName: "ButtonNative",
      props: [
        {
          name: "autofocus",
          type: {
            name: "boolean"
          }
        },
        {
          name: "click",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "() => {}"
          }
        },
        {
          name: "current",
          type: {
            name: "string|boolean"
          }
        },
        {
          name: "icon",
          type: {
            name: "string"
          }
        },
        {
          name: "id",
          type: {
            name: "string|number"
          }
        },
        {
          name: "responsive",
          type: {
            name: "boolean"
          }
        },
        {
          name: "role",
          type: {
            name: "string"
          }
        },
        {
          name: "tabindex",
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          type: {
            name: "string"
          }
        },
        {
          name: "tooltip",
          type: {
            name: "string"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"button"'
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Navigation/ButtonNative.vue"
      ],
      srcFile: "src/components/Navigation/ButtonNative.vue"
    },
    {
      exportName: "default",
      displayName: "FileBrowser",
      description: "",
      tags: {},
      props: [
        {
          name: "selected",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "select",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Navigation/FileBrowser.vue"
      ],
      srcFile: "src/components/Navigation/FileBrowser.vue"
    },
    {
      description: "Our Link component is a wrapper around a native HTML `a` element, but it is also used to swap this with a Vue `router-link` element in our application whenever it makes sense. It comes with a set of additional useful helpers.",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-link to="https://getkirby.com">Kirby Website</k-link>'
          }
        ]
      },
      exportName: "default",
      displayName: "Link",
      props: [
        {
          name: "disabled",
          description: "Disabled links will have no pointer events and cannot be clicked or focused.",
          type: {
            name: "boolean"
          }
        },
        {
          name: "rel",
          type: {
            name: "string"
          }
        },
        {
          name: "tabindex",
          type: {
            name: "string|number"
          }
        },
        {
          name: "target",
          type: {
            name: "string"
          }
        },
        {
          name: "title",
          type: {
            name: "string"
          }
        },
        {
          name: "to",
          description: "The path or absolute URL for the link.",
          type: {
            name: "string|func"
          }
        }
      ],
      events: [
        {
          name: "click",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Navigation/Link.vue"
      ],
      srcFile: "src/components/Navigation/Link.vue"
    },
    {
      exportName: "default",
      displayName: "ModelTabs",
      description: "",
      tags: {},
      props: [
        {
          name: "tab",
          type: {
            name: "string"
          }
        },
        {
          name: "tabs",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      sourceFiles: [
        "src/components/Navigation/ModelTabs.vue"
      ],
      srcFile: "src/components/Navigation/ModelTabs.vue"
    },
    {
      displayName: "k-page-tree",
      exportName: "default",
      description: "",
      tags: {},
      props: [
        {
          name: "element",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"k-tree"'
          }
        },
        {
          name: "current",
          type: {
            name: "string"
          }
        },
        {
          name: "items",
          type: {
            name: "array|object"
          }
        },
        {
          name: "level",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "0"
          }
        },
        {
          name: "root",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "move",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "close",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "open",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "select",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "toggle",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Navigation/Tree.vue",
        "src/components/Navigation/PageTree.vue"
      ],
      srcFile: "src/components/Navigation/PageTree.vue"
    },
    {
      description: "",
      tags: {
        examples: [
          {
            title: "example",
            content: '<k-pagination\n  :details="true"\n  :page="5"\n  :total="125"\n  :limit="10" />'
          }
        ]
      },
      exportName: "default",
      displayName: "Pagination",
      props: [
        {
          name: "details",
          description: "Show/hide the details display with the page selector\nin the center of the two navigation buttons.",
          type: {
            name: "boolean"
          }
        },
        {
          name: "limit",
          description: "Sets the limit of items to be shown per page",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "10"
          }
        },
        {
          name: "page",
          description: "Sets the current page",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "1"
          }
        },
        {
          name: "total",
          description: "Sets the total number of items that are in the paginated list.\nThis has to be set higher to 0 to activate pagination.",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "0"
          }
        },
        {
          name: "validate",
          type: {
            name: "func"
          },
          defaultValue: {
            func: true,
            value: "() => Promise.resolve()"
          }
        }
      ],
      events: [
        {
          name: "paginate",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      methods: [
        {
          name: "goTo",
          description: "Jump to the given page",
          params: [
            {
              name: "page"
            }
          ],
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "prev",
          description: "Go to the previous page",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        },
        {
          name: "next",
          description: "Go to the next page",
          tags: {
            access: [
              {
                description: "public",
                title: "access"
              }
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Navigation/Pagination.vue"
      ],
      srcFile: "src/components/Navigation/Pagination.vue"
    },
    {
      description: "Group of buttons with left- and right-pointing arrows\nused for navigation between previous and next items",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: `<k-prev-next :prev="{ link: 'a' }" :next="false" />`
          }
        ]
      },
      exportName: "default",
      displayName: "PrevNext",
      props: [
        {
          name: "prev",
          description: "Button configuraiton for left-pointing arrow",
          type: {
            name: "boolean|object"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "next",
          description: "Button configuraiton for right-pointing arrow",
          type: {
            name: "boolean|object"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      sourceFiles: [
        "src/components/Navigation/PrevNext.vue"
      ],
      srcFile: "src/components/Navigation/PrevNext.vue"
    },
    {
      description: "The Tag Button is mostly used in the `<k-tags-input>` component",
      tags: {
        examples: [
          {
            title: "example",
            content: "<k-tag>Design</k-tag>"
          }
        ]
      },
      exportName: "default",
      displayName: "Tag",
      props: [
        {
          name: "image",
          type: {
            name: "object"
          }
        },
        {
          name: "removable",
          description: "Enables the remove button",
          type: {
            name: "boolean"
          }
        }
      ],
      events: [
        {
          name: "remove",
          description: "This event is emitted when the remove button is being clicked or the tag is focussed and the delete key is entered."
        }
      ],
      slots: [
        {
          name: "image"
        },
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Navigation/Tag.vue"
      ],
      srcFile: "src/components/Navigation/Tag.vue"
    },
    {
      exportName: "default",
      displayName: "Tags",
      description: "",
      tags: {},
      props: [
        {
          name: "autofocus",
          mixin: {
            name: "autofocus",
            path: "../../mixins/props/autofocus.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "disabled",
          mixin: {
            name: "disabled",
            path: "../../mixins/props/disabled.js"
          },
          type: {
            name: "boolean"
          }
        },
        {
          name: "id",
          mixin: {
            name: "id",
            path: "../../mixins/props/id.js"
          },
          type: {
            name: "number|string"
          },
          defaultValue: {
            func: true,
            value: "function() {\n    return this._uid;\n}"
          }
        },
        {
          name: "accept",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"all"'
          }
        },
        {
          name: "icon",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "ignore",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "label",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "options",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "search",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "object|boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "value",
          mixin: {
            name: "Selector",
            path: "../Forms/Selector.vue"
          },
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "draggable",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "layout",
          description: "You can set the layout to `list` to extend the width of each tag\nto 100% and show them in a list. This is handy in narrow columns\nor when a list is a more appropriate design choice for the input\nin general.",
          tags: {},
          values: [
            '"list"'
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "max",
          description: "The maximum number of accepted tags",
          type: {
            name: "number"
          }
        },
        {
          name: "min",
          description: "The minimum number of required tags",
          type: {
            name: "number"
          }
        },
        {
          name: "sort",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        }
      ],
      events: [
        {
          name: "input",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Forms/Selector.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/autofocus.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/disabled.js",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/props/id.js",
        "src/components/Navigation/Tags.vue"
      ],
      srcFile: "src/components/Navigation/Tags.vue"
    },
    {
      displayName: "k-tree",
      exportName: "default",
      description: "",
      tags: {},
      props: [
        {
          name: "element",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"k-tree"'
          }
        },
        {
          name: "current",
          type: {
            name: "string"
          }
        },
        {
          name: "items",
          type: {
            name: "array|object"
          }
        },
        {
          name: "level",
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "0"
          }
        }
      ],
      events: [
        {
          name: "close",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "open",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "select",
          type: {
            names: [
              "undefined"
            ]
          }
        },
        {
          name: "toggle",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Navigation/Tree.vue"
      ],
      srcFile: "src/components/Navigation/Tree.vue"
    },
    {
      exportName: "default",
      displayName: "FieldsSection",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "lock",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "help",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "parent",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "timestamp",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "number"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/section.js",
        "src/components/Sections/FieldsSection.vue"
      ],
      srcFile: "src/components/Sections/FieldsSection.vue"
    },
    {
      exportName: "default",
      displayName: "FilesSection",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "column",
          type: {
            name: "string"
          }
        },
        {
          name: "parent",
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          type: {
            name: "string"
          }
        },
        {
          name: "timestamp",
          type: {
            name: "number"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Sections/ModelsSection.vue",
        "src/components/Sections/FilesSection.vue"
      ],
      srcFile: "src/components/Sections/FilesSection.vue"
    },
    {
      exportName: "default",
      displayName: "InfoSection",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "lock",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "help",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "parent",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "timestamp",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "number"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/section.js",
        "src/components/Sections/InfoSection.vue"
      ],
      srcFile: "src/components/Sections/InfoSection.vue"
    },
    {
      exportName: "default",
      displayName: "ModelsSection",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "column",
          type: {
            name: "string"
          }
        },
        {
          name: "parent",
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          type: {
            name: "string"
          }
        },
        {
          name: "timestamp",
          type: {
            name: "number"
          }
        }
      ],
      sourceFiles: [
        "src/components/Sections/ModelsSection.vue"
      ],
      srcFile: "src/components/Sections/ModelsSection.vue"
    },
    {
      exportName: "default",
      displayName: "PagesSection",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "column",
          type: {
            name: "string"
          }
        },
        {
          name: "parent",
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          type: {
            name: "string"
          }
        },
        {
          name: "timestamp",
          type: {
            name: "number"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Sections/ModelsSection.vue",
        "src/components/Sections/PagesSection.vue"
      ],
      srcFile: "src/components/Sections/PagesSection.vue"
    },
    {
      exportName: "default",
      displayName: "Section",
      description: "",
      tags: {},
      props: [
        {
          name: "buttons",
          type: {
            name: "array"
          }
        },
        {
          name: "headline",
          type: {
            name: "string"
          }
        },
        {
          name: "invalid",
          type: {
            name: "boolean"
          }
        },
        {
          name: "link",
          type: {
            name: "string"
          }
        },
        {
          name: "required",
          type: {
            name: "boolean"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Sections/Section.vue"
      ],
      srcFile: "src/components/Sections/Section.vue"
    },
    {
      exportName: "default",
      displayName: "Sections",
      description: "",
      tags: {},
      props: [
        {
          name: "empty",
          type: {
            name: "string"
          }
        },
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "lock",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "parent",
          type: {
            name: "string"
          }
        },
        {
          name: "tab",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "submit"
        }
      ],
      sourceFiles: [
        "src/components/Sections/Sections.vue"
      ],
      srcFile: "src/components/Sections/Sections.vue"
    },
    {
      exportName: "default",
      displayName: "StatsSection",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "lock",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "help",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "name",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "parent",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "string"
          }
        },
        {
          name: "timestamp",
          mixin: {
            name: "section",
            path: "../../mixins/section.js"
          },
          type: {
            name: "number"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/section.js",
        "src/components/Sections/StatsSection.vue"
      ],
      srcFile: "src/components/Sections/StatsSection.vue"
    },
    {
      description: "",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ]
      },
      exportName: "default",
      displayName: "Code",
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Text/Code.vue"
      ],
      srcFile: "src/components/Text/Code.vue"
    },
    {
      description: "Use to display consistently sized headlines",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: "<k-headline>This is a nice headline</k-headline>"
          }
        ]
      },
      exportName: "default",
      displayName: "Headline",
      props: [
        {
          name: "link",
          description: "Sets a link for the headline.\nThe link can be absolute or relative.",
          type: {
            name: "string"
          }
        },
        {
          name: "size",
          description: "Alternate text sizes",
          tags: {
            deprecated: [
              {
                description: "4.0.0 Use `tag` prop instead to get different sizes",
                title: "deprecated"
              }
            ]
          },
          values: [
            "small",
            "large",
            "huge"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "tag",
          description: "HTML tag for the headline element",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"h2"'
          }
        },
        {
          name: "theme",
          description: "Visual look of the headline",
          tags: {
            deprecated: [
              {
                description: "4.0.0",
                title: "deprecated"
              }
            ]
          },
          values: [
            "positive",
            "negative"
          ],
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "click"
        }
      ],
      slots: [
        {
          name: "default",
          description: "Content/text of the headline"
        }
      ],
      sourceFiles: [
        "src/components/Text/Headline.vue"
      ],
      srcFile: "src/components/Text/Headline.vue"
    },
    {
      description: "<k-label> is used to label form fields and sections",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ]
      },
      exportName: "default",
      displayName: "Label",
      props: [
        {
          name: "input",
          description: "ID of the input element to which the label belongs",
          type: {
            name: "string|number"
          }
        },
        {
          name: "invalid",
          description: "Whether the input value is currently invalid",
          type: {
            name: "boolean"
          }
        },
        {
          name: "link",
          description: "Sets a link for the label. Link can be absolute or relative.",
          type: {
            name: "string"
          }
        },
        {
          name: "required",
          description: "Whether a value is required for the input",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "false"
          }
        },
        {
          name: "type",
          description: "Which type the label belongs to",
          tags: {},
          values: [
            "field",
            "section"
          ],
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"field"'
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/Text/Label.vue"
      ],
      srcFile: "src/components/Text/Label.vue"
    },
    {
      description: "The <k-text> component is a container for all multi-line text with additional formats.",
      tags: {
        access: [
          {
            description: "public",
            title: "access"
          }
        ],
        examples: [
          {
            title: "example",
            content: '<k-text>\n  <b>Lorem</b> <a href="#">ipsum</a> <i>dolor</i> …\n</k-text>'
          }
        ]
      },
      exportName: "default",
      displayName: "Text",
      props: [
        {
          name: "align",
          description: "Changes the text alignment",
          tags: {},
          values: [
            "start",
            "center",
            "end"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "html",
          description: "HTML content to render instead\nof the default slot",
          type: {
            name: "string"
          }
        },
        {
          name: "size",
          description: "Font size of the text",
          tags: {},
          values: [
            "tiny",
            "small",
            "medium",
            "large",
            "huge"
          ],
          type: {
            name: "string"
          }
        },
        {
          name: "theme",
          description: "Visual appearance of the text",
          tags: {
            deprecated: [
              {
                description: "4.0.0 Use `k-help` class instead",
                title: "deprecated"
              }
            ]
          },
          values: [
            "help"
          ],
          type: {
            name: "string"
          }
        }
      ],
      slots: [
        {
          name: "default",
          description: "Text content"
        }
      ],
      sourceFiles: [
        "src/components/Text/Text.vue"
      ],
      srcFile: "src/components/Text/Text.vue"
    },
    {
      displayName: "Inside",
      description: "",
      tags: {},
      slots: [
        {
          name: "topbar"
        },
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/View/Inside.vue"
      ],
      srcFile: "src/components/View/Inside.vue"
    },
    {
      exportName: "default",
      displayName: "Menu",
      description: "",
      tags: {},
      sourceFiles: [
        "src/components/View/Menu.vue"
      ],
      srcFile: "src/components/View/Menu.vue"
    },
    {
      displayName: "Outside",
      description: "",
      tags: {},
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/View/Outside.vue"
      ],
      srcFile: "src/components/View/Outside.vue"
    },
    {
      displayName: "Panel",
      description: "",
      tags: {},
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/View/Panel.vue"
      ],
      srcFile: "src/components/View/Panel.vue"
    },
    {
      exportName: "default",
      displayName: "Topbar",
      description: "",
      tags: {},
      props: [
        {
          name: "breadcrumb",
          type: {
            name: "array"
          }
        },
        {
          name: "license",
          type: {
            name: "boolean"
          }
        },
        {
          name: "menu",
          type: {
            name: "array"
          }
        },
        {
          name: "title",
          type: {
            name: "string"
          }
        },
        {
          name: "view",
          type: {
            name: "object"
          }
        }
      ],
      slots: [
        {
          name: "default"
        }
      ],
      sourceFiles: [
        "src/components/View/Topbar.vue"
      ],
      srcFile: "src/components/View/Topbar.vue"
    },
    {
      exportName: "default",
      displayName: "ErrorView",
      description: "",
      tags: {},
      props: [
        {
          name: "error",
          type: {
            name: "string"
          }
        },
        {
          name: "layout",
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/ErrorView.vue"
      ],
      srcFile: "src/components/Views/ErrorView.vue"
    },
    {
      exportName: "default",
      displayName: "FileFocusButton",
      description: "",
      tags: {},
      props: [
        {
          name: "focus",
          type: {
            name: "object"
          }
        }
      ],
      events: [
        {
          name: "set",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Files/FileFocusButton.vue"
      ],
      srcFile: "src/components/Views/Files/FileFocusButton.vue"
    },
    {
      exportName: "default",
      displayName: "FilePreview",
      description: "",
      tags: {},
      props: [
        {
          name: "details",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "focus",
          type: {
            name: "object"
          }
        },
        {
          name: "focusable",
          type: {
            name: "boolean"
          }
        },
        {
          name: "image",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "url",
          type: {
            name: "string"
          }
        }
      ],
      events: [
        {
          name: "focus",
          type: {
            names: [
              "undefined"
            ]
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Files/FilePreview.vue"
      ],
      srcFile: "src/components/Views/Files/FilePreview.vue"
    },
    {
      exportName: "default",
      displayName: "FileView",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        },
        {
          name: "permissions",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "lock",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "model",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "tab",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    columns: []\n}"
          }
        },
        {
          name: "tabs",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "preview",
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Views/ModelView.vue",
        "src/components/Views/Files/FileView.vue"
      ],
      srcFile: "src/components/Views/Files/FileView.vue"
    },
    {
      exportName: "default",
      displayName: "LanguagesView",
      description: "",
      tags: {},
      props: [
        {
          name: "languages",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "variables",
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Languages/LanguagesView.vue"
      ],
      srcFile: "src/components/Views/Languages/LanguagesView.vue"
    },
    {
      exportName: "default",
      displayName: "LanguageView",
      description: "",
      tags: {},
      props: [
        {
          name: "code",
          type: {
            name: "string"
          }
        },
        {
          name: "deletable",
          type: {
            name: "boolean"
          }
        },
        {
          name: "direction",
          type: {
            name: "string"
          }
        },
        {
          name: "id",
          type: {
            name: "string"
          }
        },
        {
          name: "info",
          type: {
            name: "array"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "name",
          type: {
            name: "string"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        },
        {
          name: "translations",
          type: {
            name: "array"
          }
        },
        {
          name: "url",
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Languages/LanguageView.vue"
      ],
      srcFile: "src/components/Views/Languages/LanguageView.vue"
    },
    {
      exportName: "default",
      displayName: "LegacyPluginView",
      description: "",
      tags: {},
      props: [
        {
          name: "id",
          type: {
            name: "string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/LegacyPluginView.vue"
      ],
      srcFile: "src/components/Views/LegacyPluginView.vue"
    },
    {
      exportName: "default",
      displayName: "InstallationView",
      description: "",
      tags: {},
      props: [
        {
          name: "isInstallable",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isInstalled",
          type: {
            name: "boolean"
          }
        },
        {
          name: "isOk",
          type: {
            name: "boolean"
          }
        },
        {
          name: "requirements",
          type: {
            name: "object"
          }
        },
        {
          name: "translations",
          type: {
            name: "array"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Login/InstallationView.vue"
      ],
      srcFile: "src/components/Views/Login/InstallationView.vue"
    },
    {
      exportName: "default",
      displayName: "LoginView",
      description: "",
      tags: {},
      props: [
        {
          name: "methods",
          type: {
            name: "array"
          }
        },
        {
          name: "pending",
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Login/LoginView.vue"
      ],
      srcFile: "src/components/Views/Login/LoginView.vue"
    },
    {
      exportName: "default",
      displayName: "ResetPasswordView",
      description: "",
      tags: {},
      sourceFiles: [
        "src/components/Views/Login/ResetPasswordView.vue"
      ],
      srcFile: "src/components/Views/Login/ResetPasswordView.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ],
        since: [
          {
            description: "4.0.0",
            title: "since"
          }
        ]
      },
      exportName: "default",
      displayName: "UserInfo",
      props: [
        {
          name: "user",
          type: {
            name: "object|string"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Login/UserInfo.vue"
      ],
      srcFile: "src/components/Views/Login/UserInfo.vue"
    },
    {
      exportName: "default",
      displayName: "ModelView",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        },
        {
          name: "permissions",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "lock",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "model",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "tab",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    columns: []\n}"
          }
        },
        {
          name: "tabs",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/ModelView.vue"
      ],
      srcFile: "src/components/Views/ModelView.vue"
    },
    {
      exportName: "default",
      displayName: "PageView",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        },
        {
          name: "permissions",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "lock",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "model",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "tab",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    columns: []\n}"
          }
        },
        {
          name: "tabs",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        },
        {
          name: "status",
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Views/ModelView.vue",
        "src/components/Views/Pages/PageView.vue"
      ],
      srcFile: "src/components/Views/Pages/PageView.vue"
    },
    {
      exportName: "default",
      displayName: "SiteView",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        },
        {
          name: "permissions",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "lock",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "model",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "tab",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    columns: []\n}"
          }
        },
        {
          name: "tabs",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      events: [
        {
          name: "submit"
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Views/ModelView.vue",
        "src/components/Views/Pages/SiteView.vue"
      ],
      srcFile: "src/components/Views/Pages/SiteView.vue"
    },
    {
      description: "The Search mixin is intended for all components\nthat feature a query input that should trigger\nrunning a search via a required `search` method.",
      tags: {},
      exportName: "default",
      displayName: "SearchView",
      props: [
        {
          name: "delay",
          mixin: {
            name: "search",
            path: "../../mixins/search.js"
          },
          type: {
            name: "number"
          },
          defaultValue: {
            func: false,
            value: "200"
          }
        },
        {
          name: "hasSearch",
          mixin: {
            name: "search",
            path: "../../mixins/search.js"
          },
          type: {
            name: "boolean"
          },
          defaultValue: {
            func: false,
            value: "true"
          }
        },
        {
          name: "type",
          type: {
            name: "string"
          },
          defaultValue: {
            func: false,
            value: '"pages"'
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/mixins/search.js",
        "src/components/Views/SearchView.vue"
      ],
      srcFile: "src/components/Views/SearchView.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "SystemPlugins",
      props: [
        {
          name: "plugins",
          type: {
            name: "array"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/System/SystemPlugins.vue"
      ],
      srcFile: "src/components/Views/System/SystemPlugins.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "SystemSecurity",
      props: [
        {
          name: "exceptions",
          type: {
            name: "array"
          }
        },
        {
          name: "security",
          type: {
            name: "array"
          }
        },
        {
          name: "urls",
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/System/SystemSecurity.vue"
      ],
      srcFile: "src/components/Views/System/SystemSecurity.vue"
    },
    {
      exportName: "default",
      displayName: "SystemView",
      description: "",
      tags: {},
      props: [
        {
          name: "environment",
          type: {
            name: "array"
          }
        },
        {
          name: "exceptions",
          type: {
            name: "array"
          }
        },
        {
          name: "plugins",
          type: {
            name: "array"
          }
        },
        {
          name: "security",
          type: {
            name: "array"
          }
        },
        {
          name: "urls",
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/System/SystemView.vue"
      ],
      srcFile: "src/components/Views/System/SystemView.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ]
      },
      exportName: "default",
      displayName: "TableUpdateStatusCell",
      props: [
        {
          name: "value",
          type: {
            name: "string|object"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/System/TableUpdateStatusCell.vue"
      ],
      srcFile: "src/components/Views/System/TableUpdateStatusCell.vue"
    },
    {
      exportName: "default",
      displayName: "AccountView",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        },
        {
          name: "permissions",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "lock",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "model",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "tab",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    columns: []\n}"
          }
        },
        {
          name: "tabs",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Views/ModelView.vue",
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Views/Users/UserView.vue",
        "src/components/Views/Users/AccountView.vue"
      ],
      srcFile: "src/components/Views/Users/AccountView.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ],
        since: [
          {
            description: "4.0.0",
            title: "since"
          }
        ]
      },
      exportName: "default",
      displayName: "UserAvatar",
      props: [
        {
          name: "model",
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Users/UserAvatar.vue"
      ],
      srcFile: "src/components/Views/Users/UserAvatar.vue"
    },
    {
      description: "",
      tags: {
        internal: [
          {
            description: true,
            title: "internal"
          }
        ],
        since: [
          {
            description: "4.0.0",
            title: "since"
          }
        ]
      },
      exportName: "default",
      displayName: "UserProfile",
      props: [
        {
          name: "isLocked",
          type: {
            name: "boolean"
          }
        },
        {
          name: "model",
          type: {
            name: "object"
          }
        },
        {
          name: "permissions",
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Users/UserProfile.vue"
      ],
      srcFile: "src/components/Views/Users/UserProfile.vue"
    },
    {
      exportName: "default",
      displayName: "UsersView",
      description: "",
      tags: {},
      props: [
        {
          name: "role",
          type: {
            name: "object"
          }
        },
        {
          name: "roles",
          type: {
            name: "array"
          }
        },
        {
          name: "search",
          type: {
            name: "string"
          }
        },
        {
          name: "title",
          type: {
            name: "string"
          }
        },
        {
          name: "users",
          type: {
            name: "object"
          }
        }
      ],
      sourceFiles: [
        "src/components/Views/Users/UsersView.vue"
      ],
      srcFile: "src/components/Views/Users/UsersView.vue"
    },
    {
      exportName: "default",
      displayName: "UserView",
      description: "",
      tags: {},
      props: [
        {
          name: "blueprint",
          type: {
            name: "string"
          }
        },
        {
          name: "next",
          type: {
            name: "object"
          }
        },
        {
          name: "prev",
          type: {
            name: "object"
          }
        },
        {
          name: "permissions",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "lock",
          type: {
            name: "boolean|object"
          }
        },
        {
          name: "model",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{}"
          }
        },
        {
          name: "tab",
          type: {
            name: "object"
          },
          defaultValue: {
            func: false,
            value: "{\n    columns: []\n}"
          }
        },
        {
          name: "tabs",
          type: {
            name: "array"
          },
          defaultValue: {
            func: false,
            value: "[]"
          }
        }
      ],
      sourceFiles: [
        "/Users/bastianallgeier/Sites/kirby/v3/sandbox/kirby/panel/src/components/Views/ModelView.vue",
        "src/components/Views/Users/UserView.vue"
      ],
      srcFile: "src/components/Views/Users/UserView.vue"
    }
  ];
  const Docs_vue_vue_type_style_index_0_lang = "";
  const _sfc_main$e = {
    props: {
      component: {
        type: String
      }
    },
    computed: {
      example() {
        return `<${this.component} />`;
      },
      info() {
        return ui.find((doc) => {
          const componentName = "k-" + this.$helper.string.camelToKebab(doc.displayName);
          return componentName === this.component;
        });
      }
    },
    methods: {
      md(text) {
        return marked.parse(text ?? "");
      }
    }
  };
  var _sfc_render$e = function render() {
    var _a, _b;
    var _vm = this, _c = _vm._self._c;
    return _c("div", { staticClass: "k-ui-docs" }, [_vm.info.description ? _c("section", { staticClass: "k-ui-docs-section" }, [_c("k-headline", { staticClass: "h3" }, [_vm._v("Description")]), _c("k-box", { attrs: { "theme": "text" } }, [_c("k-text", { domProps: { "innerHTML": _vm._s(_vm.md(_vm.info.description)) } })], 1)], 1) : _vm._e(), ((_a = _vm.info.tags.examples) == null ? void 0 : _a.length) ? _c("section", { staticClass: "k-ui-docs-section" }, [_c("k-headline", { staticClass: "h3" }, [_vm._v("Examples")]), _vm._l(_vm.info.tags.examples, function(example, index) {
      return _c("k-ui-code", { key: index, attrs: { "language": "html" } }, [_vm._v(_vm._s(example.content))]);
    })], 2) : _vm._e(), _c("section", { staticClass: "k-ui-docs-section" }, [_c("k-headline", { staticClass: "h3" }, [_vm._v("Props")]), _c("div", { staticClass: "k-table" }, [_c("table", [_vm._m(0), _c("tbody", _vm._l(_vm.info.props, function(prop) {
      var _a2;
      return _c("tr", { key: prop.name }, [_c("td", [_c("k-text", [_c("code", [_vm._v(_vm._s(prop.name))])])], 1), _c("td", [_c("k-text", { staticClass: "k-ui-docs-types" }, _vm._l(prop.type.name.split("|"), function(type) {
        return _c("code", { attrs: { "data-type": type } }, [_vm._v(" " + _vm._s(type) + " ")]);
      }), 0)], 1), _c("td", [prop.defaultValue ? _c("code", [_vm._v(_vm._s((_a2 = prop.defaultValue) == null ? void 0 : _a2.value))]) : _vm._e()]), _c("td", [_c("k-text", { domProps: { "innerHTML": _vm._s(_vm.md(prop.description)) } })], 1)]);
    }), 0)])])], 1), ((_b = _vm.info.slots) == null ? void 0 : _b.length) ? _c("section", { staticClass: "k-ui-docs-section" }, [_c("k-headline", { staticClass: "h3" }, [_vm._v("Slots")]), _c("div", { staticClass: "k-table" }, [_c("table", [_vm._m(1), _c("tbody", _vm._l(_vm.info.slots, function(slot) {
      return _c("tr", { key: slot.name }, [_c("td", { staticStyle: { "width": "12rem" } }, [_c("k-text", [_c("code", [_vm._v(_vm._s(slot.name))])])], 1), _c("td", [_c("k-text", { domProps: { "innerHTML": _vm._s(_vm.md(slot.description)) } })], 1)]);
    }), 0)])])], 1) : _vm._e()]);
  };
  var _sfc_staticRenderFns$e = [function() {
    var _vm = this, _c = _vm._self._c;
    return _c("thead", [_c("th", { staticStyle: { "width": "8rem" } }, [_vm._v("Name")]), _c("th", { staticStyle: { "width": "12rem" } }, [_vm._v("Type")]), _c("th", { staticStyle: { "width": "10rem" } }, [_vm._v("Default")]), _c("th", [_vm._v("Description")])]);
  }, function() {
    var _vm = this, _c = _vm._self._c;
    return _c("thead", [_c("th", { staticStyle: { "width": "8rem" } }, [_vm._v("Slot")]), _c("th", [_vm._v("Description")])]);
  }];
  _sfc_render$e._withStripped = true;
  var __component__$e = /* @__PURE__ */ normalizeComponent(
    _sfc_main$e,
    _sfc_render$e,
    _sfc_staticRenderFns$e,
    false,
    null,
    null,
    null,
    null
  );
  __component__$e.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/Docs.vue";
  const Docs = __component__$e.exports;
  const _sfc_main$d = {
    props: {
      docs: String
    }
  };
  var _sfc_render$d = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-drawer", _vm._b({ ref: "drawer", staticClass: "k-form-drawer", on: { "submit": function($event) {
      return _vm.$emit("cancel");
    } } }, "k-drawer", _vm.$attrs, false), [_c("k-ui-docs", { attrs: { "component": _vm.docs } })], 1);
  };
  var _sfc_staticRenderFns$d = [];
  _sfc_render$d._withStripped = true;
  var __component__$d = /* @__PURE__ */ normalizeComponent(
    _sfc_main$d,
    _sfc_render$d,
    _sfc_staticRenderFns$d,
    false,
    null,
    null,
    null,
    null
  );
  __component__$d.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/DocsDrawer.vue";
  const DocsDrawer = __component__$d.exports;
  const Example_vue_vue_type_style_index_0_lang = "";
  const _sfc_main$c = {
    props: {
      code: {
        type: Boolean,
        default: true
      },
      label: String,
      flex: Boolean
    },
    data() {
      return {
        inspect: null
      };
    },
    methods: {
      openCode() {
        this.inspect = window.UiExamples[this.label];
      }
    }
  };
  var _sfc_render$c = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("div", { staticClass: "k-ui-example", attrs: { "data-flex": _vm.flex, "tabindex": "0" } }, [_c("k-bar", { staticClass: "k-ui-example-header" }, [_c("h3", { staticClass: "k-ui-example-label" }, [_vm._v(_vm._s(_vm.label))]), _vm.code ? _c("k-button-group", { staticClass: "k-ui-example-inspector", attrs: { "layout": "collapsed" } }, [_c("k-button", { attrs: { "icon": "preview", "theme": _vm.inspect === null ? "info" : null, "size": "xs" }, on: { "click": function($event) {
      _vm.inspect = null;
    } } }), _c("k-button", { attrs: { "icon": "code", "theme": _vm.inspect !== null ? "info" : null, "size": "xs" }, on: { "click": _vm.openCode } })], 1) : _vm._e()], 1), _vm.inspect ? _c("div", { staticClass: "k-ui-example-code" }, [_c("k-ui-code", { attrs: { "language": "html" } }, [_vm._v(_vm._s(_vm.inspect))])], 1) : _c("div", { staticClass: "k-ui-example-canvas" }, [_vm._t("default")], 2)], 1);
  };
  var _sfc_staticRenderFns$c = [];
  _sfc_render$c._withStripped = true;
  var __component__$c = /* @__PURE__ */ normalizeComponent(
    _sfc_main$c,
    _sfc_render$c,
    _sfc_staticRenderFns$c,
    false,
    null,
    null,
    null,
    null
  );
  __component__$c.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/Example.vue";
  const Example = __component__$c.exports;
  const _sfc_main$b = {};
  var _sfc_render$b = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("div", { staticClass: "k-ui-examples" }, [_vm._t("default")], 2);
  };
  var _sfc_staticRenderFns$b = [];
  _sfc_render$b._withStripped = true;
  var __component__$b = /* @__PURE__ */ normalizeComponent(
    _sfc_main$b,
    _sfc_render$b,
    _sfc_staticRenderFns$b,
    false,
    null,
    null,
    null,
    null
  );
  __component__$b.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/Examples.vue";
  const Examples = __component__$b.exports;
  const _sfc_main$a = {
    props: {
      description: {
        default: true,
        type: Boolean
      },
      icon: {
        default: true,
        type: Boolean
      },
      placeholder: {
        default: true,
        type: Boolean
      },
      type: String,
      value: {
        default: null,
        type: [String, Number, Array]
      }
    },
    data() {
      return {
        input: null
      };
    },
    computed: {
      label() {
        return this.$helper.string.ucfirst(this.type);
      }
    },
    watch: {
      value: {
        handler(value) {
          this.input = value;
        },
        immediate: true
      }
    },
    methods: {
      emit(input) {
        this.input = input;
        this.$emit("input", input);
      }
    }
  };
  var _sfc_render$a = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-ui-form", [_c("k-ui-examples", [_c("k-ui-example", { attrs: { "label": "Default" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "name": _vm.type, "label": _vm.label, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Autofocus" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "autofocus": true, "label": _vm.label, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Required" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "label": _vm.label, "required": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm.placeholder ? _c("k-ui-example", { attrs: { "label": "Placeholder" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "label": _vm.label, "value": _vm.input, "placeholder": "Placeholder text …" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _c("k-ui-example", { attrs: { "label": "Help" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "label": _vm.label, "value": _vm.input, "help": "This is some help text" }, on: { "input": _vm.emit } })], 1), _vm.description ? _c("k-ui-example", { attrs: { "label": "Before & After" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "label": _vm.label, "value": _vm.input, "after": "After", "before": "Before" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _vm.icon ? _c("k-ui-example", { attrs: { "label": "Icon" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "label": _vm.label, "value": _vm.input, "icon": "edit" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _c("k-ui-example", { attrs: { "label": "Disabled" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "disabled": true, "label": _vm.label, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm._t("default")], 2)], 1);
  };
  var _sfc_staticRenderFns$a = [];
  _sfc_render$a._withStripped = true;
  var __component__$a = /* @__PURE__ */ normalizeComponent(
    _sfc_main$a,
    _sfc_render$a,
    _sfc_staticRenderFns$a,
    false,
    null,
    null,
    null,
    null
  );
  __component__$a.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/FieldExamples.vue";
  const FieldExamples = __component__$a.exports;
  const FieldPreviewExample_vue_vue_type_style_index_0_lang = "";
  const _sfc_main$9 = {
    props: {
      column: {
        default: () => {
          return {};
        },
        type: Object
      },
      field: {
        default: () => {
          return {};
        },
        type: Object
      },
      label: String,
      type: String,
      value: {}
    }
  };
  var _sfc_render$9 = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-ui-example", { attrs: { "label": _vm.label } }, [_c("div", { staticClass: "k-table" }, [_c("table", [_c("thead", [_c("tr", [_c("th", { attrs: { "data-mobile": "true" } }, [_vm._v(" " + _vm._s(_vm.$helper.string.ucfirst(_vm.type)) + " Field Preview ")])])]), _c("tbody", [_c("tr", [_c("td", { staticClass: "k-table-cell" }, [_c(`k-${_vm.type}-field-preview`, { tag: "component", attrs: { "column": _vm.column, "field": _vm.field, "value": _vm.value }, on: { "input": function($event) {
      return _vm.$emit("input", $event);
    } } })], 1)])])])])]);
  };
  var _sfc_staticRenderFns$9 = [];
  _sfc_render$9._withStripped = true;
  var __component__$9 = /* @__PURE__ */ normalizeComponent(
    _sfc_main$9,
    _sfc_render$9,
    _sfc_staticRenderFns$9,
    false,
    null,
    null,
    null,
    null
  );
  __component__$9.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/FieldPreviewExample.vue";
  const FieldPreviewExample = __component__$9.exports;
  const Form_vue_vue_type_style_index_0_lang = "";
  const _sfc_main$8 = {
    methods: {
      submit(form) {
        const entries = Object.fromEntries(new FormData(form));
        this.$panel.dialog.open({
          component: "k-ui-output-dialog",
          props: {
            code: JSON.stringify(entries, null, 2)
          }
        });
      }
    }
  };
  var _sfc_render$8 = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("form", { staticClass: "k-ui-form", on: { "submit": function($event) {
      $event.preventDefault();
      return _vm.submit($event.target);
    } } }, [_vm._t("default"), _c("footer", [_c("k-button", { attrs: { "type": "submit", "icon": "check", "theme": "positive", "variant": "filled" } }, [_vm._v(" Submit ")])], 1)], 2);
  };
  var _sfc_staticRenderFns$8 = [];
  _sfc_render$8._withStripped = true;
  var __component__$8 = /* @__PURE__ */ normalizeComponent(
    _sfc_main$8,
    _sfc_render$8,
    _sfc_staticRenderFns$8,
    false,
    null,
    null,
    null,
    null
  );
  __component__$8.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/Form.vue";
  const Form = __component__$8.exports;
  const Index_vue_vue_type_style_index_0_lang = "";
  const _sfc_main$7 = {
    props: {
      examples: Array
    }
  };
  var _sfc_render$7 = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-panel-inside", { staticClass: "k-ui-index-view" }, [_c("k-header", [_vm._v("UI")]), _c("k-collection", { attrs: { "items": _vm.examples } })], 1);
  };
  var _sfc_staticRenderFns$7 = [];
  _sfc_render$7._withStripped = true;
  var __component__$7 = /* @__PURE__ */ normalizeComponent(
    _sfc_main$7,
    _sfc_render$7,
    _sfc_staticRenderFns$7,
    false,
    null,
    null,
    null,
    null
  );
  __component__$7.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/Index.vue";
  const Index = __component__$7.exports;
  const InputExamples_vue_vue_type_style_index_0_lang = "";
  const _sfc_main$6 = {
    props: {
      placeholder: {
        default: true,
        type: Boolean
      },
      type: String,
      value: {
        default: null,
        type: [String, Number, Boolean, Object, Array]
      }
    },
    data() {
      return {
        input: null
      };
    },
    watch: {
      value: {
        handler(value) {
          this.input = value;
        },
        immediate: true
      }
    },
    methods: {
      emit(input) {
        this.input = input;
        this.$emit("input", input);
      }
    }
  };
  var _sfc_render$6 = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-ui-form", [_c("k-ui-examples", { staticClass: "k-ui-input-examples" }, [_c("k-ui-example", { attrs: { "label": "Default" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "name": _vm.type, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Autofocus" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "autofocus": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Required" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "required": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm.placeholder ? _c("k-ui-example", { attrs: { "label": "Placeholder" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "value": _vm.input, "placeholder": "Placeholder text …" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _c("k-ui-example", { attrs: { "label": "Focus" } }, [_c(`k-${_vm.type}-input`, { ref: "input", tag: "component", staticStyle: { "margin-bottom": "1.5rem" }, attrs: { "value": _vm.input }, on: { "input": _vm.emit } }), _c("k-button", { attrs: { "variant": "filled", "size": "sm" }, on: { "click": function($event) {
      return _vm.$refs.input.focus();
    } } }, [_vm._v(" Focus ")])], 1), _c("k-ui-example", { attrs: { "label": "Disabled" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "disabled": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm._t("default")], 2)], 1);
  };
  var _sfc_staticRenderFns$6 = [];
  _sfc_render$6._withStripped = true;
  var __component__$6 = /* @__PURE__ */ normalizeComponent(
    _sfc_main$6,
    _sfc_render$6,
    _sfc_staticRenderFns$6,
    false,
    null,
    null,
    null,
    null
  );
  __component__$6.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/InputExamples.vue";
  const InputExamples = __component__$6.exports;
  const _sfc_main$5 = {
    props: {
      description: {
        default: true,
        type: Boolean
      },
      icon: {
        default: true,
        type: Boolean
      },
      placeholder: {
        default: true,
        type: Boolean
      },
      type: String,
      value: {
        default: null,
        type: [String, Number]
      }
    },
    data() {
      return {
        input: null
      };
    },
    watch: {
      value: {
        handler(value) {
          this.input = value;
        },
        immediate: true
      }
    },
    methods: {
      emit(input) {
        this.input = input;
        this.$emit("input", input);
      }
    }
  };
  var _sfc_render$5 = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-ui-form", [_c("k-ui-examples", [_c("k-ui-example", { attrs: { "label": "Default" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "name": _vm.type, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Autofocus" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "autofocus": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Required" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "required": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm.placeholder ? _c("k-ui-example", { attrs: { "label": "Placeholder" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "value": _vm.input, "placeholder": "Placeholder text …" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _vm.description ? _c("k-ui-example", { attrs: { "label": "Before & After" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "value": _vm.input, "after": "After", "before": "Before" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _vm.icon ? _c("k-ui-example", { attrs: { "label": "Icon" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "value": _vm.input, "icon": "edit" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _c("k-ui-example", { attrs: { "label": "Disabled" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "disabled": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm._t("default")], 2)], 1);
  };
  var _sfc_staticRenderFns$5 = [];
  _sfc_render$5._withStripped = true;
  var __component__$5 = /* @__PURE__ */ normalizeComponent(
    _sfc_main$5,
    _sfc_render$5,
    _sfc_staticRenderFns$5,
    false,
    null,
    null,
    null,
    null
  );
  __component__$5.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/InputboxExamples.vue";
  const InputboxExamples = __component__$5.exports;
  const _sfc_main$4 = {
    props: {
      columns: {
        default: true,
        type: Boolean
      },
      info: {
        default: true,
        type: Boolean
      },
      type: String,
      value: {
        default: null,
        type: [Array, String]
      }
    },
    data() {
      return {
        input: null
      };
    },
    computed: {
      label() {
        return this.$helper.string.ucfirst(this.type);
      },
      options() {
        return [
          { text: "Option A", value: "a" },
          { text: "Option B", value: "b" },
          { text: "Option C", value: "c" }
        ];
      },
      optionsWithInfo() {
        return [
          { text: "Option A", value: "a", info: "This is some info text" },
          { text: "Option B", value: "b", info: "This is some info text" },
          { text: "Option C", value: "c", info: "This is some info text" }
        ];
      }
    },
    watch: {
      value: {
        handler(value) {
          this.input = value;
        },
        immediate: true
      }
    },
    methods: {
      emit(input) {
        this.input = input;
        this.$emit("input", input);
      }
    }
  };
  var _sfc_render$4 = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-ui-form", [_c("k-ui-examples", [_c("k-ui-example", { attrs: { "label": "Default" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "name": _vm.type, "label": _vm.label, "options": _vm.options, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Autofocus" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "autofocus": true, "label": _vm.label, "options": _vm.options, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm.info ? _c("k-ui-example", { attrs: { "label": "Options with info" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "label": _vm.label, "options": _vm.optionsWithInfo, "value": _vm.input }, on: { "input": _vm.emit } })], 1) : _vm._e(), _c("k-ui-example", { attrs: { "label": "Required" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "label": _vm.label, "options": _vm.optionsWithInfo, "required": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm.columns ? _c("k-ui-example", { attrs: { "label": "Columns" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "columns": 3, "label": _vm.label, "options": _vm.optionsWithInfo, "value": _vm.input }, on: { "input": _vm.emit } })], 1) : _vm._e(), _c("k-ui-example", { attrs: { "label": "Disabled" } }, [_c(`k-${_vm.type}-field`, { tag: "component", attrs: { "label": _vm.label, "options": _vm.optionsWithInfo, "disabled": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm._t("default")], 2)], 1);
  };
  var _sfc_staticRenderFns$4 = [];
  _sfc_render$4._withStripped = true;
  var __component__$4 = /* @__PURE__ */ normalizeComponent(
    _sfc_main$4,
    _sfc_render$4,
    _sfc_staticRenderFns$4,
    false,
    null,
    null,
    null,
    null
  );
  __component__$4.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/OptionsFieldExamples.vue";
  const OptionsFieldExamples = __component__$4.exports;
  const OptionsInputExamples_vue_vue_type_style_index_0_lang = "";
  const _sfc_main$3 = {
    props: {
      info: {
        default: true,
        type: Boolean
      },
      options: {
        default() {
          return [
            { text: "Option A", value: "a" },
            { text: "Option B", value: "b" },
            { text: "Option C", value: "c" }
          ];
        },
        type: Array
      },
      optionsWithInfo: {
        default() {
          return [
            { text: "Option A", value: "a", info: "This is some info text" },
            { text: "Option B", value: "b", info: "This is some info text" },
            { text: "Option C", value: "c", info: "This is some info text" }
          ];
        },
        type: Array
      },
      type: String,
      value: [Array, String, Number]
    },
    data() {
      return {
        input: null
      };
    },
    watch: {
      value: {
        handler(value) {
          this.input = value;
        },
        immediate: true
      }
    },
    methods: {
      emit(input) {
        this.input = input;
        this.$emit("input", input);
      }
    }
  };
  var _sfc_render$3 = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-ui-form", [_c("k-ui-examples", { staticClass: "k-ui-options-input-examples" }, [_c("k-ui-example", { attrs: { "label": "Default" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "name": _vm.type, "options": _vm.options, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Autofocus" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "autofocus": true, "options": _vm.options, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Required" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "options": _vm.options, "required": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm.info ? _c("k-ui-example", { attrs: { "label": "Options with info" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "options": _vm.optionsWithInfo, "value": _vm.input }, on: { "input": _vm.emit } })], 1) : _vm._e(), _c("k-ui-example", { attrs: { "label": "Focus" } }, [_c("div", { staticStyle: { "margin-bottom": "1.5rem" } }, [_c(`k-${_vm.type}-input`, { ref: "input", tag: "component", staticStyle: { "margin-bottom": "1.5rem" }, attrs: { "options": _vm.info ? _vm.optionsWithInfo : _vm.options, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-button", { attrs: { "variant": "filled", "size": "sm" }, on: { "click": function($event) {
      return _vm.$refs.input.focus();
    } } }, [_vm._v(" Focus ")])], 1), _c("k-ui-example", { attrs: { "label": "Disabled" } }, [_c(`k-${_vm.type}-input`, { tag: "component", attrs: { "disabled": true, "options": _vm.info ? _vm.optionsWithInfo : _vm.options, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm._t("default", null, { "options": _vm.options, "optionsWithInfo": _vm.optionsWithInfo })], 2)], 1);
  };
  var _sfc_staticRenderFns$3 = [];
  _sfc_render$3._withStripped = true;
  var __component__$3 = /* @__PURE__ */ normalizeComponent(
    _sfc_main$3,
    _sfc_render$3,
    _sfc_staticRenderFns$3,
    false,
    null,
    null,
    null,
    null
  );
  __component__$3.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/OptionsInputExamples.vue";
  const OptionsInputExamples = __component__$3.exports;
  const _sfc_main$2 = {
    props: {
      columns: {
        default: true,
        type: Boolean
      },
      description: {
        default: true,
        type: Boolean
      },
      icon: {
        default: true,
        type: Boolean
      },
      info: {
        default: true,
        type: Boolean
      },
      placeholder: {
        default: true,
        type: Boolean
      },
      type: String,
      value: {
        default: null,
        type: [Array, String]
      }
    },
    data() {
      return {
        input: null
      };
    },
    computed: {
      options() {
        return [
          { text: "Option A", value: "a" },
          { text: "Option B", value: "b" },
          { text: "Option C", value: "c" }
        ];
      },
      optionsWithInfo() {
        return [
          { text: "Option A", value: "a", info: "This is some info text" },
          { text: "Option B", value: "b", info: "This is some info text" },
          { text: "Option C", value: "c", info: "This is some info text" }
        ];
      }
    },
    watch: {
      value: {
        handler(value) {
          this.input = value;
        },
        immediate: true
      }
    },
    methods: {
      emit(input) {
        this.input = input;
        this.$emit("input", input);
      }
    }
  };
  var _sfc_render$2 = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-ui-form", [_c("k-ui-examples", [_c("k-ui-example", { attrs: { "label": "Default" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "name": _vm.type, "options": _vm.options, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "Autofocus" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "autofocus": true, "options": _vm.options, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm.info ? _c("k-ui-example", { attrs: { "label": "Options with info" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "options": _vm.optionsWithInfo, "value": _vm.input }, on: { "input": _vm.emit } })], 1) : _vm._e(), _c("k-ui-example", { attrs: { "label": "Required" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "options": _vm.optionsWithInfo, "required": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _vm.placeholder ? _c("k-ui-example", { attrs: { "label": "Placeholder" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "options": _vm.options, "value": _vm.input, "placeholder": "Placeholder text …" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _vm.description ? _c("k-ui-example", { attrs: { "label": "Before & After" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "options": _vm.options, "value": _vm.input, "after": "After", "before": "Before" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _vm.icon ? _c("k-ui-example", { attrs: { "label": "Icon" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "options": _vm.options, "value": _vm.input, "icon": "edit" }, on: { "input": _vm.emit } })], 1) : _vm._e(), _vm.columns ? _c("k-ui-example", { attrs: { "label": "Columns" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "columns": 3, "options": _vm.optionsWithInfo, "value": _vm.input }, on: { "input": _vm.emit } })], 1) : _vm._e(), _c("k-ui-example", { attrs: { "label": "Disabled" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component", attrs: { "options": _vm.optionsWithInfo, "disabled": true, "value": _vm.input }, on: { "input": _vm.emit } })], 1), _c("k-ui-example", { attrs: { "label": "No options" } }, [_c(`k-${_vm.type}-inputbox`, { tag: "component" })], 1), _vm._t("default", null, { "options": _vm.options, "optionsWithInfo": _vm.optionsWithInfo })], 2)], 1);
  };
  var _sfc_staticRenderFns$2 = [];
  _sfc_render$2._withStripped = true;
  var __component__$2 = /* @__PURE__ */ normalizeComponent(
    _sfc_main$2,
    _sfc_render$2,
    _sfc_staticRenderFns$2,
    false,
    null,
    null,
    null,
    null
  );
  __component__$2.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/OptionsInputboxExamples.vue";
  const OptionsInputboxExamples = __component__$2.exports;
  const _sfc_main$1 = {
    props: {
      code: String
    }
  };
  var _sfc_render$1 = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-dialog", _vm._b({ attrs: { "size": "large", "cancel-button": false, "submit-button": false }, on: { "cancel": function($event) {
      return _vm.$emit("cancel");
    } } }, "k-dialog", _vm.$attrs, false), [_c("k-code", [_vm._v(_vm._s(_vm.code))])], 1);
  };
  var _sfc_staticRenderFns$1 = [];
  _sfc_render$1._withStripped = true;
  var __component__$1 = /* @__PURE__ */ normalizeComponent(
    _sfc_main$1,
    _sfc_render$1,
    _sfc_staticRenderFns$1,
    false,
    null,
    null,
    null,
    null
  );
  __component__$1.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/OutputDialog.vue";
  const OutputDialog = __component__$1.exports;
  const Playground_vue_vue_type_style_index_0_lang = "";
  const _sfc_main = {
    props: {
      docs: String,
      examples: Object,
      file: String,
      props: Object,
      styles: String,
      tab: String,
      tabs: {
        type: Array,
        default: () => []
      },
      template: String,
      title: String
    },
    data() {
      return {
        component: null
      };
    },
    watch: {
      tab: {
        handler() {
          this.createComponent();
        },
        immediate: true
      }
    },
    methods: {
      async createComponent() {
        if (!this.file) {
          return;
        }
        const component = await import(
          /* @vite-ignore */
          this.$panel.url(this.file)
        );
        component.default.template = this.template;
        this.component = component.default;
        window.UiExamples = this.examples;
      },
      openDocs() {
        this.$panel.drawer.open({
          component: "k-ui-docs-drawer",
          props: {
            icon: "book",
            title: this.docs,
            docs: this.docs
          }
        });
      }
    }
  };
  var _sfc_render = function render() {
    var _vm = this, _c = _vm._self._c;
    return _c("k-panel-inside", { staticClass: "k-ui-playground-view", attrs: { "data-has-tabs": _vm.tabs.length > 1 } }, [_c("k-header", [_vm._v(" " + _vm._s(_vm.title) + " "), _vm.docs ? _c("k-button-group", { attrs: { "slot": "buttons" }, slot: "buttons" }, [_c("k-button", { attrs: { "icon": "book", "size": "sm", "variant": "filled" }, on: { "click": _vm.openDocs } }, [_vm._v(" Docs ")])], 1) : _vm._e()], 1), _c("k-tabs", { attrs: { "tab": _vm.tab, "tabs": _vm.tabs } }), _vm.file ? _c(_vm.component, _vm._b({ tag: "component" }, "component", _vm.props, false)) : _vm._e(), _vm.styles ? _c("style", { tag: "component", domProps: { "innerHTML": _vm._s(_vm.styles) } }) : _vm._e()], 1);
  };
  var _sfc_staticRenderFns = [];
  _sfc_render._withStripped = true;
  var __component__ = /* @__PURE__ */ normalizeComponent(
    _sfc_main,
    _sfc_render,
    _sfc_staticRenderFns,
    false,
    null,
    null,
    null,
    null
  );
  __component__.options.__file = "/Users/nhoffmann/Sites/kirby/sandbox/public/site/plugins/ui/js/components/Playground.vue";
  const Playground = __component__.exports;
  panel.plugin("getkirby/ui", {
    components: {
      "k-ui-code": Code,
      "k-ui-docs": Docs,
      "k-ui-docs-drawer": DocsDrawer,
      "k-ui-example": Example,
      "k-ui-examples": Examples,
      "k-ui-field-examples": FieldExamples,
      "k-ui-field-preview-example": FieldPreviewExample,
      "k-ui-form": Form,
      "k-ui-index-view": Index,
      "k-ui-input-examples": InputExamples,
      "k-ui-inputbox-examples": InputboxExamples,
      "k-ui-options-field-examples": OptionsFieldExamples,
      "k-ui-options-input-examples": OptionsInputExamples,
      "k-ui-options-inputbox-examples": OptionsInputboxExamples,
      "k-ui-output-dialog": OutputDialog,
      "k-ui-playground-view": Playground
    }
  });
})();
